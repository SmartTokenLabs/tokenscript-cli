<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<ts:token xmlns:ts="http://tokenscript.org/2022/09/tokenscript"
		  xmlns:xml="http://www.w3.org/XML/1998/namespace"
		  xsi:schemaLocation="http://tokenscript.org/2022/09/tokenscript http://tokenscript.org/2022/09/tokenscript.xsd"
		  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		  xmlns:ethereum="urn:ethereum:constantinople"
		  xmlns:xhmtl="http://www.w3.org/1999/xhtml"
		  name="Devcon6">
	<ts:label>
		<ts:plurals xml:lang="en">
			<ts:string quantity="one">Devcon 6</ts:string>
			<ts:string quantity="other">Devcon 6</ts:string>
		</ts:plurals>
	</ts:label>
	<ts:contract interface="erc721" name="Devcon6Souvenir">
		<ts:address network="11155111">0xFF6E9ADF5E4cC99F2aa1f4DC01f0956b757b4ABA</ts:address>
	</ts:contract>
	<ts:attestation name="Devcon6Attestation" type="eas">
		<ts:meta>
			<ts:name>Devcon 6 Attestation</ts:name>
			<ts:image>https://devcon-vi.attest.tickets/img/nft_bg.png</ts:image>
			<ts:description>Your Devcon 7 ticket attestation. Use it to claim great perks available for all Devcon 6 attendees!</ts:description>
			<ts:attributeField name='data.eventId'>Event ID</ts:attributeField>
			<ts:attributeField name='data.ticketClass'>Ticket Class</ts:attributeField>
			<ts:attributeField name='data.ticketId'>Ticket ID</ts:attributeField>
			<ts:attributeField name='time'>Valid From</ts:attributeField>
			<ts:attributeField name='meta.commitmentId'>Email</ts:attributeField>
		</ts:meta>
		<!--
			EC Public key in raw hex format
		-->
		<ts:key>0408d4bc48bc518c82fb4ad216ef88c11068b3f0c40ba60c255f9e0a7a18382e27654eee6b2283266071567993392c1a338fa0b9f2db7aaab1ba8bf2179808dd34</ts:key>
		<!--
			Event ID is the same as devconId/conferenceId but renamed to be more generic.
			It can be used to define multiple "attestation collections" for the same public key and schema ID.
			If omitted, all attestations with this schemaUID and pubkey are considered the same collection
		-->
		<ts:eventId>devcon6</ts:eventId>
		<!--
			This field defines the inner attestation fields used to construct a unique ID for the attestation.
			In this way, duplicate attestations are not imported and an attestation can be revoked and reissued.
			When the user imports the attestation again it replaces the old one.
			If omitted, the EAS attestation UID is used.
		-->
		<ts:idFields>ticketId</ts:idFields>
		<ts:eas schemaUID="0x7f6fb09beb1886d0b223e9f15242961198dd360021b2c9f75ac879c0f786cafd" />
	</ts:attestation>
	<ts:origins>
		<!-- Define the contract which holds the token that the user will use -->
		<ts:ethereum contract="Devcon6Souvenir"/>
		<ts:attestation name="Devcon6Attestation"/>
	</ts:origins>
	<ts:selection name="alreadyRedeemed" filter="isRedeemed=TRUE">
		<ts:label>
			<ts:string xml:lang="en">Already minted</ts:string>
		</ts:label>
	</ts:selection>
	<ts:cards>
		<!--<ts:viewContent name="common" xmlns="http://www.w3.org/1999/xhtml">
			<ts:include type="html" src="./dist/index.html"/>
			<ts:include type="css" src="./src/styles.css"/>
		</ts:viewContent>-->
		<ts:card type="token" name="Info" origins="Devcon6Attestation">
			<ts:label>
				<ts:string xml:lang="en">Ticket Info</ts:string>
			</ts:label>

			<ts:view xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
				<!--<ts:viewContent name="common"/>-->
				<ts:include type="html" src="./dist/index.html"/>
				<ts:include type="css" src="./src/styles.css"/>
			</ts:view>
		</ts:card>
		<ts:card type="action" name="Unlock" origins="Devcon6Attestation">
			<!-- this action is of the model confirm-back.
			window.onConfirm is called if user hit "confirm";
			window.close() causes the back button to be pressed.
			-->
			<ts:label>
				<ts:string xml:lang="en">Unlock</ts:string>
			</ts:label>
			<ts:view xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
				<ts:include type="html" src="./dist/enter.html"/>
				<ts:include type="css" src="./src/styles.css"/>
			</ts:view>
		</ts:card>
		<ts:card type="action" name="Lock" origins="Devcon6Attestation">
			<!-- this action is of the model confirm-back.
			window.onConfirm is called if user hit "confirm";
			window.close() causes the back button to be pressed.
			-->
			<ts:label>
				<ts:string xml:lang="en">Lock</ts:string>
			</ts:label>
			<ts:view xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
				<ts:include type="html" src="./dist/lock.html"/>
				<ts:include type="css" src="./src/styles.css"/>
			</ts:view>
		</ts:card>
		<ts:card type="action" name="Mint" origins="Devcon6Attestation" exclude="alreadyRedeemed">
			<ts:label>
				<ts:string xml:lang="en">Mint Souvenir NFT</ts:string>
			</ts:label>
			<ts:transaction>
				<ethereum:transaction as="uint" contract="Devcon6Souvenir" function="mintUsingAttestation">
					<ts:data>
						<ts:struct ref="attestation"/>
						<ts:bytes ref="attestationSig"/>
					</ts:data>
				</ethereum:transaction>
			</ts:transaction>
			<ts:view xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
				<ts:include type="html" src="./dist/mint.html"/>
				<ts:include type="css" src="./src/styles.css"/>
			</ts:view>
		</ts:card>
		<ts:card type="action" name="Burn" origins="Devcon6Souvenir">
			<!-- this action is of the model confirm-back.
			window.onConfirm is called if user hit "confirm";
			window.close() causes the back button to be pressed.
			-->
			<ts:label>
				<ts:string xml:lang="en">Burn</ts:string>
			</ts:label>
			<ts:transaction>
				<ethereum:transaction as="uint" contract="Devcon6Souvenir" function="burn">
					<ts:data>
						<ts:uint256 ref="tokenId"/>
					</ts:data>
				</ethereum:transaction>
			</ts:transaction>
		</ts:card>
	</ts:cards>

	<ts:attribute name="isRedeemed">
		<ts:type><ts:syntax>1.3.6.1.4.1.1466.115.121.1.36</ts:syntax></ts:type>
		<ts:origins>
			<ethereum:call function="isRedeemed" contract="Devcon6Souvenir" as="bool">
				<ts:data>
					<ts:uint256 ref="tokenId"/>
				</ts:data>
			</ethereum:call>
		</ts:origins>
	</ts:attribute>

</ts:token>
