<ts:token xmlns:asnx="urn:ietf:params:xml:ns:asnx" xmlns:ethereum="urn:ethereum:constantinople" xmlns:ts="http://tokenscript.org/2022/09/tokenscript" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="ENS" xsi:schemaLocation="http://tokenscript.org/2022/09/tokenscript http://tokenscript.org/2022/09/tokenscript.xsd">
	<asnx:module name="ENS-Events">
    <namedType name="NameRegistered">
      <type>
        <sequence>
          <element name="name" ethereum:type="string"/>
          <element name="label" ethereum:indexed="true" ethereum:type="bytes32"/>
          <element name="owner" ethereum:indexed="true" ethereum:type="address"/>
          <element name="cost" ethereum:type="uint"/>
          <element name="expires" ethereum:type="uint"/>
        </sequence>
      </type>
    </namedType>
  </asnx:module>
	<ts:label>
		<ts:plurals xml:lang="en">
			<ts:string quantity="one">ENS Token</ts:string>
			<ts:string quantity="other">ENS Tokens</ts:string>
		</ts:plurals>
	</ts:label>
	<ts:meta>
		<ts:description xml:lang="en">Manage your ENS via your token</ts:description>
		<ts:aboutUrl xml:lang="en">https://docs.ens.domains/</ts:aboutUrl>
		<ts:iconUrl xml:lang="en">https://www.gitbook.com/cdn-cgi/image/width=40,dpr=2,height=40,fit=contain,format=auto/https%3A%2F%2F464911102-files.gitbook.io%2F~%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fcollections%252F2TjMAeHSzwlQgcOdL48E%252Ficon%252FKWP0gk2C6bdRPliWIA6o%252Fens%2520transparent%2520background.png%3Falt%3Dmedia%26token%3Dbd28b063-5a75-4971-890c-97becea09076</ts:iconUrl>
	</ts:meta>
	<ts:contract interface="erc721" name="ENS">
		<ts:address network="1">0x57f1887a8bf19b14fc0df6fd9b2acc9af147ea85</ts:address>
	</ts:contract>
  <ts:contract name="registry">
    <ts:address network="1">0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e</ts:address>
  </ts:contract>
  <ts:contract name="PublicResolver">
    <ts:address network="1">0x4976fb03C32e5B8cfe2b6cCB31c09Ba78EBaBa41</ts:address>
  </ts:contract>
  
  <ts:contract name="ETHRegistrarController">
    <ts:address network="1">0x283af0b28c62c092c9727f1ee09c02ca627eb7f5</ts:address>
  </ts:contract>
	<ts:origins>
		
		<ts:ethereum contract="ENS"/>
	</ts:origins>

	<ts:cards>
		<ts:viewContent xmlns="http://www.w3.org/1999/xhtml" name="common">
			
			
		<style xmlns="http://www.w3.org/1999/xhtml">/*&lt;![CDATA[*/ 

.loader-container.svelte-i4cppe.svelte-i4cppe{width:100%;height:100%;display:flex;justify-content:center;align-items:center}.lds-ring.svelte-i4cppe.svelte-i4cppe{display:inline-block;position:relative;width:80px;height:80px}.lds-ring.svelte-i4cppe div.svelte-i4cppe{box-sizing:border-box;display:block;position:absolute;width:64px;height:64px;margin:8px;border:8px solid #656565;border-radius:50%;animation:svelte-i4cppe-lds-ring 1.2s cubic-bezier(0.5, 0, 0.5, 1) infinite;border-color:#656565 transparent transparent transparent}.lds-ring.svelte-i4cppe div.svelte-i4cppe:nth-child(1){animation-delay:-0.45s}.lds-ring.svelte-i4cppe div.svelte-i4cppe:nth-child(2){animation-delay:-0.3s}.lds-ring.svelte-i4cppe div.svelte-i4cppe:nth-child(3){animation-delay:-0.15s}@keyframes svelte-i4cppe-lds-ring{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}

 /*//]]&gt;*/</style>
<script xmlns="http://www.w3.org/1999/xhtml" type="module" crossorigin="">//&lt;![CDATA[

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) =&gt; key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) =&gt; {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
(function polyfill() {
  const relList = document.createElement("link").relList;
  if (relList &amp;&amp; relList.supports &amp;&amp; relList.supports("modulepreload")) {
    return;
  }
  for (const link of document.querySelectorAll('link[rel="modulepreload"]')) {
    processPreload(link);
  }
  new MutationObserver((mutations) =&gt; {
    for (const mutation of mutations) {
      if (mutation.type !== "childList") {
        continue;
      }
      for (const node of mutation.addedNodes) {
        if (node.tagName === "LINK" &amp;&amp; node.rel === "modulepreload")
          processPreload(node);
      }
    }
  }).observe(document, { childList: true, subtree: true });
  function getFetchOpts(link) {
    const fetchOpts = {};
    if (link.integrity)
      fetchOpts.integrity = link.integrity;
    if (link.referrerPolicy)
      fetchOpts.referrerPolicy = link.referrerPolicy;
    if (link.crossOrigin === "use-credentials")
      fetchOpts.credentials = "include";
    else if (link.crossOrigin === "anonymous")
      fetchOpts.credentials = "omit";
    else
      fetchOpts.credentials = "same-origin";
    return fetchOpts;
  }
  function processPreload(link) {
    if (link.ep)
      return;
    link.ep = true;
    const fetchOpts = getFetchOpts(link);
    fetch(link.href, fetchOpts);
  }
})();
function noop() {
}
function run(fn) {
  return fn();
}
function blank_object() {
  return /* @__PURE__ */ Object.create(null);
}
function run_all(fns) {
  fns.forEach(run);
}
function is_function(thing) {
  return typeof thing === "function";
}
function safe_not_equal(a, b) {
  return a != a ? b == b : a !== b || a &amp;&amp; typeof a === "object" || typeof a === "function";
}
let src_url_equal_anchor;
function src_url_equal(element_src, url) {
  if (element_src === url)
    return true;
  if (!src_url_equal_anchor) {
    src_url_equal_anchor = document.createElement("a");
  }
  src_url_equal_anchor.href = url;
  return element_src === src_url_equal_anchor.href;
}
function is_empty(obj) {
  return Object.keys(obj).length === 0;
}
const globals = typeof window !== "undefined" ? window : typeof globalThis !== "undefined" ? globalThis : (
  // @ts-ignore Node typings have this
  global
);
function append(target, node) {
  target.appendChild(node);
}
function insert(target, node, anchor) {
  target.insertBefore(node, anchor || null);
}
function detach(node) {
  if (node.parentNode) {
    node.parentNode.removeChild(node);
  }
}
function element(name) {
  return document.createElement(name);
}
function text(data2) {
  return document.createTextNode(data2);
}
function space() {
  return text(" ");
}
function empty() {
  return text("");
}
function listen(node, event, handler, options) {
  node.addEventListener(event, handler, options);
  return () =&gt; node.removeEventListener(event, handler, options);
}
function attr(node, attribute, value) {
  if (value == null)
    node.removeAttribute(attribute);
  else if (node.getAttribute(attribute) !== value)
    node.setAttribute(attribute, value);
}
function children(element2) {
  return Array.from(element2.childNodes);
}
function set_data(text2, data2) {
  data2 = "" + data2;
  if (text2.data === data2)
    return;
  text2.data = /** @type {string} */
  data2;
}
function set_style(node, key, value, important) {
  if (value == null) {
    node.style.removeProperty(key);
  } else {
    node.style.setProperty(key, value, important ? "important" : "");
  }
}
function construct_svelte_component(component, props) {
  return new component(props);
}
let current_component;
function set_current_component(component) {
  current_component = component;
}
const dirty_components = [];
const binding_callbacks = [];
let render_callbacks = [];
const flush_callbacks = [];
const resolved_promise = /* @__PURE__ */ Promise.resolve();
let update_scheduled = false;
function schedule_update() {
  if (!update_scheduled) {
    update_scheduled = true;
    resolved_promise.then(flush);
  }
}
function add_render_callback(fn) {
  render_callbacks.push(fn);
}
const seen_callbacks = /* @__PURE__ */ new Set();
let flushidx = 0;
function flush() {
  if (flushidx !== 0) {
    return;
  }
  const saved_component = current_component;
  do {
    try {
      while (flushidx &lt; dirty_components.length) {
        const component = dirty_components[flushidx];
        flushidx++;
        set_current_component(component);
        update(component.$$);
      }
    } catch (e) {
      dirty_components.length = 0;
      flushidx = 0;
      throw e;
    }
    set_current_component(null);
    dirty_components.length = 0;
    flushidx = 0;
    while (binding_callbacks.length)
      binding_callbacks.pop()();
    for (let i = 0; i &lt; render_callbacks.length; i += 1) {
      const callback = render_callbacks[i];
      if (!seen_callbacks.has(callback)) {
        seen_callbacks.add(callback);
        callback();
      }
    }
    render_callbacks.length = 0;
  } while (dirty_components.length);
  while (flush_callbacks.length) {
    flush_callbacks.pop()();
  }
  update_scheduled = false;
  seen_callbacks.clear();
  set_current_component(saved_component);
}
function update($$) {
  if ($$.fragment !== null) {
    $$.update();
    run_all($$.before_update);
    const dirty = $$.dirty;
    $$.dirty = [-1];
    $$.fragment &amp;&amp; $$.fragment.p($$.ctx, dirty);
    $$.after_update.forEach(add_render_callback);
  }
}
function flush_render_callbacks(fns) {
  const filtered = [];
  const targets = [];
  render_callbacks.forEach((c) =&gt; fns.indexOf(c) === -1 ? filtered.push(c) : targets.push(c));
  targets.forEach((c) =&gt; c());
  render_callbacks = filtered;
}
const outroing = /* @__PURE__ */ new Set();
let outros;
function group_outros() {
  outros = {
    r: 0,
    c: [],
    p: outros
    // parent group
  };
}
function check_outros() {
  if (!outros.r) {
    run_all(outros.c);
  }
  outros = outros.p;
}
function transition_in(block, local) {
  if (block &amp;&amp; block.i) {
    outroing.delete(block);
    block.i(local);
  }
}
function transition_out(block, local, detach2, callback) {
  if (block &amp;&amp; block.o) {
    if (outroing.has(block))
      return;
    outroing.add(block);
    outros.c.push(() =&gt; {
      outroing.delete(block);
      if (callback) {
        if (detach2)
          block.d(1);
        callback();
      }
    });
    block.o(local);
  } else if (callback) {
    callback();
  }
}
function create_component(block) {
  block &amp;&amp; block.c();
}
function mount_component(component, target, anchor) {
  const { fragment, after_update } = component.$$;
  fragment &amp;&amp; fragment.m(target, anchor);
  add_render_callback(() =&gt; {
    const new_on_destroy = component.$$.on_mount.map(run).filter(is_function);
    if (component.$$.on_destroy) {
      component.$$.on_destroy.push(...new_on_destroy);
    } else {
      run_all(new_on_destroy);
    }
    component.$$.on_mount = [];
  });
  after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
  const $$ = component.$$;
  if ($$.fragment !== null) {
    flush_render_callbacks($$.after_update);
    run_all($$.on_destroy);
    $$.fragment &amp;&amp; $$.fragment.d(detaching);
    $$.on_destroy = $$.fragment = null;
    $$.ctx = [];
  }
}
function make_dirty(component, i) {
  if (component.$$.dirty[0] === -1) {
    dirty_components.push(component);
    schedule_update();
    component.$$.dirty.fill(0);
  }
  component.$$.dirty[i / 31 | 0] |= 1 &lt;&lt; i % 31;
}
function init(component, options, instance2, create_fragment2, not_equal, props, append_styles = null, dirty = [-1]) {
  const parent_component = current_component;
  set_current_component(component);
  const $$ = component.$$ = {
    fragment: null,
    ctx: [],
    // state
    props,
    update: noop,
    not_equal,
    bound: blank_object(),
    // lifecycle
    on_mount: [],
    on_destroy: [],
    on_disconnect: [],
    before_update: [],
    after_update: [],
    context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
    // everything else
    callbacks: blank_object(),
    dirty,
    skip_bound: false,
    root: options.target || parent_component.$$.root
  };
  append_styles &amp;&amp; append_styles($$.root);
  let ready = false;
  $$.ctx = instance2 ? instance2(component, options.props || {}, (i, ret, ...rest) =&gt; {
    const value = rest.length ? rest[0] : ret;
    if ($$.ctx &amp;&amp; not_equal($$.ctx[i], $$.ctx[i] = value)) {
      if (!$$.skip_bound &amp;&amp; $$.bound[i])
        $$.bound[i](value);
      if (ready)
        make_dirty(component, i);
    }
    return ret;
  }) : [];
  $$.update();
  ready = true;
  run_all($$.before_update);
  $$.fragment = create_fragment2 ? create_fragment2($$.ctx) : false;
  if (options.target) {
    if (options.hydrate) {
      const nodes = children(options.target);
      $$.fragment &amp;&amp; $$.fragment.l(nodes);
      nodes.forEach(detach);
    } else {
      $$.fragment &amp;&amp; $$.fragment.c();
    }
    if (options.intro)
      transition_in(component.$$.fragment);
    mount_component(component, options.target, options.anchor);
    flush();
  }
  set_current_component(parent_component);
}
class SvelteComponent {
  constructor() {
    /**
     * ### PRIVATE API
     *
     * Do not use, may change at any time
     *
     * @type {any}
     */
    __publicField(this, "$$");
    /**
     * ### PRIVATE API
     *
     * Do not use, may change at any time
     *
     * @type {any}
     */
    __publicField(this, "$$set");
  }
  /** @returns {void} */
  $destroy() {
    destroy_component(this, 1);
    this.$destroy = noop;
  }
  /**
   * @template {Extract&lt;keyof Events, string&gt;} K
   * @param {K} type
   * @param {((e: Events[K]) =&gt; void) | null | undefined} callback
   * @returns {() =&gt; void}
   */
  $on(type, callback) {
    if (!is_function(callback)) {
      return noop;
    }
    const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
    callbacks.push(callback);
    return () =&gt; {
      const index = callbacks.indexOf(callback);
      if (index !== -1)
        callbacks.splice(index, 1);
    };
  }
  /**
   * @param {Partial&lt;Props&gt;} props
   * @returns {void}
   */
  $set(props) {
    if (this.$$set &amp;&amp; !is_empty(props)) {
      this.$$.skip_bound = true;
      this.$$set(props);
      this.$$.skip_bound = false;
    }
  }
}
const PUBLIC_VERSION = "4";
if (typeof window !== "undefined")
  (window.__svelte || (window.__svelte = { v: /* @__PURE__ */ new Set() })).v.add(PUBLIC_VERSION);
const subscriber_queue = [];
function writable(value, start = noop) {
  let stop;
  const subscribers = /* @__PURE__ */ new Set();
  function set(new_value) {
    if (safe_not_equal(value, new_value)) {
      value = new_value;
      if (stop) {
        const run_queue = !subscriber_queue.length;
        for (const subscriber of subscribers) {
          subscriber[1]();
          subscriber_queue.push(subscriber, value);
        }
        if (run_queue) {
          for (let i = 0; i &lt; subscriber_queue.length; i += 2) {
            subscriber_queue[i][0](subscriber_queue[i + 1]);
          }
          subscriber_queue.length = 0;
        }
      }
    }
  }
  function update2(fn) {
    set(fn(value));
  }
  function subscribe(run2, invalidate = noop) {
    const subscriber = [run2, invalidate];
    subscribers.add(subscriber);
    if (subscribers.size === 1) {
      stop = start(set, update2) || noop;
    }
    run2(value);
    return () =&gt; {
      subscribers.delete(subscriber);
      if (subscribers.size === 0 &amp;&amp; stop) {
        stop();
        stop = null;
      }
    };
  }
  return { set, update: update2, subscribe };
}
const data = writable({
  token: null
});
function setToken(token) {
  data.set({
    ...data,
    token
  });
}
const context = {
  data,
  setToken
};
const Loader_svelte_svelte_type_style_lang = "";
function create_if_block$2(ctx) {
  let div5;
  return {
    c() {
      div5 = element("div");
      div5.innerHTML = `&lt;div class="lds-ring svelte-i4cppe"&gt;&lt;div class="svelte-i4cppe"&gt;&lt;/div&gt; &lt;div class="svelte-i4cppe"&gt;&lt;/div&gt; &lt;div class="svelte-i4cppe"&gt;&lt;/div&gt; &lt;div class="svelte-i4cppe"&gt;&lt;/div&gt;&lt;/div&gt;`;
      attr(div5, "class", "loader-container svelte-i4cppe");
    },
    m(target, anchor) {
      insert(target, div5, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(div5);
      }
    }
  };
}
function create_fragment$4(ctx) {
  let if_block_anchor;
  let if_block = (
    /*show*/
    ctx[0] &amp;&amp; create_if_block$2()
  );
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
    },
    p(ctx2, [dirty]) {
      if (
        /*show*/
        ctx2[0]
      ) {
        if (if_block)
          ;
        else {
          if_block = create_if_block$2();
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function instance$3($$self, $$props, $$invalidate) {
  let { show } = $$props;
  $$self.$$set = ($$props2) =&gt; {
    if ("show" in $$props2)
      $$invalidate(0, show = $$props2.show);
  };
  return [show];
}
class Loader extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$3, create_fragment$4, safe_not_equal, { show: 0 });
  }
}
function create_if_block$1(ctx) {
  let div;
  let t3;
  let pre;
  let t4_value = JSON.stringify(
    /*token*/
    ctx[0],
    null,
    2
  ) + "";
  let t4;
  return {
    c() {
      div = element("div");
      div.innerHTML = `&lt;h3&gt;Welcome to TokenScript&lt;/h3&gt; &lt;p&gt;When a card loads in TokenScript, it gets access to the token context data through TokenScript engine&lt;/p&gt;`;
      t3 = space();
      pre = element("pre");
      t4 = text(t4_value);
      set_style(div, "text-align", "center");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      insert(target, t3, anchor);
      insert(target, pre, anchor);
      append(pre, t4);
    },
    p(ctx2, dirty) {
      if (dirty &amp; /*token*/
      1 &amp;&amp; t4_value !== (t4_value = JSON.stringify(
        /*token*/
        ctx2[0],
        null,
        2
      ) + ""))
        set_data(t4, t4_value);
    },
    d(detaching) {
      if (detaching) {
        detach(div);
        detach(t3);
        detach(pre);
      }
    }
  };
}
function create_fragment$3(ctx) {
  let div;
  let t;
  let loader;
  let current;
  let if_block = (
    /*token*/
    ctx[0] &amp;&amp; create_if_block$1(ctx)
  );
  loader = new Loader({ props: { show: (
    /*loading*/
    ctx[1]
  ) } });
  return {
    c() {
      div = element("div");
      if (if_block)
        if_block.c();
      t = space();
      create_component(loader.$$.fragment);
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (if_block)
        if_block.m(div, null);
      append(div, t);
      mount_component(loader, div, null);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (
        /*token*/
        ctx2[0]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block$1(ctx2);
          if_block.c();
          if_block.m(div, t);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
      const loader_changes = {};
      if (dirty &amp; /*loading*/
      2)
        loader_changes.show = /*loading*/
        ctx2[1];
      loader.$set(loader_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(loader.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(loader.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (if_block)
        if_block.d();
      destroy_component(loader);
    }
  };
}
function instance$2($$self, $$props, $$invalidate) {
  let token;
  let loading = true;
  context.data.subscribe(async (value) =&gt; {
    if (!value.token)
      return;
    $$invalidate(0, token = value.token);
    $$invalidate(1, loading = false);
  });
  return [token, loading];
}
class Info extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$2, create_fragment$3, safe_not_equal, {});
  }
}
function create_fragment$2(ctx) {
  let h1;
  return {
    c() {
      h1 = element("h1");
      h1.textContent = "404";
    },
    m(target, anchor) {
      insert(target, h1, anchor);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(h1);
      }
    }
  };
}
class NotFound extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$2, safe_not_equal, {});
  }
}
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
function getAugmentedNamespace(n) {
  if (n.__esModule)
    return n;
  var f = n.default;
  if (typeof f == "function") {
    var a = function a2() {
      if (this instanceof a2) {
        return Reflect.construct(f, arguments, this.constructor);
      }
      return f.apply(this, arguments);
    };
    a.prototype = f.prototype;
  } else
    a = {};
  Object.defineProperty(a, "__esModule", { value: true });
  Object.keys(n).forEach(function(k) {
    var d = Object.getOwnPropertyDescriptor(n, k);
    Object.defineProperty(a, k, d.get ? d : {
      enumerable: true,
      get: function() {
        return n[k];
      }
    });
  });
  return a;
}
var buffer = {};
var base64Js = {};
base64Js.byteLength = byteLength;
base64Js.toByteArray = toByteArray;
base64Js.fromByteArray = fromByteArray;
var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
for (var i = 0, len = code.length; i &lt; len; ++i) {
  lookup[i] = code[i];
  revLookup[code.charCodeAt(i)] = i;
}
revLookup["-".charCodeAt(0)] = 62;
revLookup["_".charCodeAt(0)] = 63;
function getLens(b64) {
  var len = b64.length;
  if (len % 4 &gt; 0) {
    throw new Error("Invalid string. Length must be a multiple of 4");
  }
  var validLen = b64.indexOf("=");
  if (validLen === -1)
    validLen = len;
  var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
  return [validLen, placeHoldersLen];
}
function byteLength(b64) {
  var lens = getLens(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];
  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function _byteLength(b64, validLen, placeHoldersLen) {
  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function toByteArray(b64) {
  var tmp;
  var lens = getLens(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];
  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
  var curByte = 0;
  var len = placeHoldersLen &gt; 0 ? validLen - 4 : validLen;
  var i;
  for (i = 0; i &lt; len; i += 4) {
    tmp = revLookup[b64.charCodeAt(i)] &lt;&lt; 18 | revLookup[b64.charCodeAt(i + 1)] &lt;&lt; 12 | revLookup[b64.charCodeAt(i + 2)] &lt;&lt; 6 | revLookup[b64.charCodeAt(i + 3)];
    arr[curByte++] = tmp &gt;&gt; 16 &amp; 255;
    arr[curByte++] = tmp &gt;&gt; 8 &amp; 255;
    arr[curByte++] = tmp &amp; 255;
  }
  if (placeHoldersLen === 2) {
    tmp = revLookup[b64.charCodeAt(i)] &lt;&lt; 2 | revLookup[b64.charCodeAt(i + 1)] &gt;&gt; 4;
    arr[curByte++] = tmp &amp; 255;
  }
  if (placeHoldersLen === 1) {
    tmp = revLookup[b64.charCodeAt(i)] &lt;&lt; 10 | revLookup[b64.charCodeAt(i + 1)] &lt;&lt; 4 | revLookup[b64.charCodeAt(i + 2)] &gt;&gt; 2;
    arr[curByte++] = tmp &gt;&gt; 8 &amp; 255;
    arr[curByte++] = tmp &amp; 255;
  }
  return arr;
}
function tripletToBase64(num) {
  return lookup[num &gt;&gt; 18 &amp; 63] + lookup[num &gt;&gt; 12 &amp; 63] + lookup[num &gt;&gt; 6 &amp; 63] + lookup[num &amp; 63];
}
function encodeChunk(uint8, start, end) {
  var tmp;
  var output = [];
  for (var i = start; i &lt; end; i += 3) {
    tmp = (uint8[i] &lt;&lt; 16 &amp; 16711680) + (uint8[i + 1] &lt;&lt; 8 &amp; 65280) + (uint8[i + 2] &amp; 255);
    output.push(tripletToBase64(tmp));
  }
  return output.join("");
}
function fromByteArray(uint8) {
  var tmp;
  var len = uint8.length;
  var extraBytes = len % 3;
  var parts = [];
  var maxChunkLength = 16383;
  for (var i = 0, len2 = len - extraBytes; i &lt; len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, i + maxChunkLength &gt; len2 ? len2 : i + maxChunkLength));
  }
  if (extraBytes === 1) {
    tmp = uint8[len - 1];
    parts.push(
      lookup[tmp &gt;&gt; 2] + lookup[tmp &lt;&lt; 4 &amp; 63] + "=="
    );
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] &lt;&lt; 8) + uint8[len - 1];
    parts.push(
      lookup[tmp &gt;&gt; 10] + lookup[tmp &gt;&gt; 4 &amp; 63] + lookup[tmp &lt;&lt; 2 &amp; 63] + "="
    );
  }
  return parts.join("");
}
var ieee754 = {};
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh &lt;https://feross.org/opensource&gt; */
ieee754.read = function(buffer2, offset, isLE, mLen, nBytes) {
  var e, m;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 &lt;&lt; eLen) - 1;
  var eBias = eMax &gt;&gt; 1;
  var nBits = -7;
  var i = isLE ? nBytes - 1 : 0;
  var d = isLE ? -1 : 1;
  var s = buffer2[offset + i];
  i += d;
  e = s &amp; (1 &lt;&lt; -nBits) - 1;
  s &gt;&gt;= -nBits;
  nBits += eLen;
  for (; nBits &gt; 0; e = e * 256 + buffer2[offset + i], i += d, nBits -= 8) {
  }
  m = e &amp; (1 &lt;&lt; -nBits) - 1;
  e &gt;&gt;= -nBits;
  nBits += mLen;
  for (; nBits &gt; 0; m = m * 256 + buffer2[offset + i], i += d, nBits -= 8) {
  }
  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : (s ? -1 : 1) * Infinity;
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};
ieee754.write = function(buffer2, value, offset, isLE, mLen, nBytes) {
  var e, m, c;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 &lt;&lt; eLen) - 1;
  var eBias = eMax &gt;&gt; 1;
  var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
  var i = isLE ? 0 : nBytes - 1;
  var d = isLE ? 1 : -1;
  var s = value &lt; 0 || value === 0 &amp;&amp; 1 / value &lt; 0 ? 1 : 0;
  value = Math.abs(value);
  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);
    if (value * (c = Math.pow(2, -e)) &lt; 1) {
      e--;
      c *= 2;
    }
    if (e + eBias &gt;= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }
    if (value * c &gt;= 2) {
      e++;
      c /= 2;
    }
    if (e + eBias &gt;= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias &gt;= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }
  for (; mLen &gt;= 8; buffer2[offset + i] = m &amp; 255, i += d, m /= 256, mLen -= 8) {
  }
  e = e &lt;&lt; mLen | m;
  eLen += mLen;
  for (; eLen &gt; 0; buffer2[offset + i] = e &amp; 255, i += d, e /= 256, eLen -= 8) {
  }
  buffer2[offset + i - d] |= s * 128;
};
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh &lt;https://feross.org&gt;
 * @license  MIT
 */
(function(exports) {
  const base64 = base64Js;
  const ieee754$1 = ieee754;
  const customInspectSymbol = typeof Symbol === "function" &amp;&amp; typeof Symbol["for"] === "function" ? Symbol["for"]("nodejs.util.inspect.custom") : null;
  exports.Buffer = Buffer2;
  exports.SlowBuffer = SlowBuffer;
  exports.INSPECT_MAX_BYTES = 50;
  const K_MAX_LENGTH = 2147483647;
  exports.kMaxLength = K_MAX_LENGTH;
  Buffer2.TYPED_ARRAY_SUPPORT = typedArraySupport();
  if (!Buffer2.TYPED_ARRAY_SUPPORT &amp;&amp; typeof console !== "undefined" &amp;&amp; typeof console.error === "function") {
    console.error(
      "This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."
    );
  }
  function typedArraySupport() {
    try {
      const arr = new Uint8Array(1);
      const proto = { foo: function() {
        return 42;
      } };
      Object.setPrototypeOf(proto, Uint8Array.prototype);
      Object.setPrototypeOf(arr, proto);
      return arr.foo() === 42;
    } catch (e) {
      return false;
    }
  }
  Object.defineProperty(Buffer2.prototype, "parent", {
    enumerable: true,
    get: function() {
      if (!Buffer2.isBuffer(this))
        return void 0;
      return this.buffer;
    }
  });
  Object.defineProperty(Buffer2.prototype, "offset", {
    enumerable: true,
    get: function() {
      if (!Buffer2.isBuffer(this))
        return void 0;
      return this.byteOffset;
    }
  });
  function createBuffer(length) {
    if (length &gt; K_MAX_LENGTH) {
      throw new RangeError('The value "' + length + '" is invalid for option "size"');
    }
    const buf = new Uint8Array(length);
    Object.setPrototypeOf(buf, Buffer2.prototype);
    return buf;
  }
  function Buffer2(arg, encodingOrOffset, length) {
    if (typeof arg === "number") {
      if (typeof encodingOrOffset === "string") {
        throw new TypeError(
          'The "string" argument must be of type string. Received type number'
        );
      }
      return allocUnsafe(arg);
    }
    return from(arg, encodingOrOffset, length);
  }
  Buffer2.poolSize = 8192;
  function from(value, encodingOrOffset, length) {
    if (typeof value === "string") {
      return fromString(value, encodingOrOffset);
    }
    if (ArrayBuffer.isView(value)) {
      return fromArrayView(value);
    }
    if (value == null) {
      throw new TypeError(
        "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
      );
    }
    if (isInstance(value, ArrayBuffer) || value &amp;&amp; isInstance(value.buffer, ArrayBuffer)) {
      return fromArrayBuffer(value, encodingOrOffset, length);
    }
    if (typeof SharedArrayBuffer !== "undefined" &amp;&amp; (isInstance(value, SharedArrayBuffer) || value &amp;&amp; isInstance(value.buffer, SharedArrayBuffer))) {
      return fromArrayBuffer(value, encodingOrOffset, length);
    }
    if (typeof value === "number") {
      throw new TypeError(
        'The "value" argument must not be of type number. Received type number'
      );
    }
    const valueOf = value.valueOf &amp;&amp; value.valueOf();
    if (valueOf != null &amp;&amp; valueOf !== value) {
      return Buffer2.from(valueOf, encodingOrOffset, length);
    }
    const b = fromObject(value);
    if (b)
      return b;
    if (typeof Symbol !== "undefined" &amp;&amp; Symbol.toPrimitive != null &amp;&amp; typeof value[Symbol.toPrimitive] === "function") {
      return Buffer2.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
    }
    throw new TypeError(
      "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
    );
  }
  Buffer2.from = function(value, encodingOrOffset, length) {
    return from(value, encodingOrOffset, length);
  };
  Object.setPrototypeOf(Buffer2.prototype, Uint8Array.prototype);
  Object.setPrototypeOf(Buffer2, Uint8Array);
  function assertSize(size) {
    if (typeof size !== "number") {
      throw new TypeError('"size" argument must be of type number');
    } else if (size &lt; 0) {
      throw new RangeError('The value "' + size + '" is invalid for option "size"');
    }
  }
  function alloc(size, fill, encoding) {
    assertSize(size);
    if (size &lt;= 0) {
      return createBuffer(size);
    }
    if (fill !== void 0) {
      return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
    }
    return createBuffer(size);
  }
  Buffer2.alloc = function(size, fill, encoding) {
    return alloc(size, fill, encoding);
  };
  function allocUnsafe(size) {
    assertSize(size);
    return createBuffer(size &lt; 0 ? 0 : checked(size) | 0);
  }
  Buffer2.allocUnsafe = function(size) {
    return allocUnsafe(size);
  };
  Buffer2.allocUnsafeSlow = function(size) {
    return allocUnsafe(size);
  };
  function fromString(string, encoding) {
    if (typeof encoding !== "string" || encoding === "") {
      encoding = "utf8";
    }
    if (!Buffer2.isEncoding(encoding)) {
      throw new TypeError("Unknown encoding: " + encoding);
    }
    const length = byteLength2(string, encoding) | 0;
    let buf = createBuffer(length);
    const actual = buf.write(string, encoding);
    if (actual !== length) {
      buf = buf.slice(0, actual);
    }
    return buf;
  }
  function fromArrayLike(array) {
    const length = array.length &lt; 0 ? 0 : checked(array.length) | 0;
    const buf = createBuffer(length);
    for (let i = 0; i &lt; length; i += 1) {
      buf[i] = array[i] &amp; 255;
    }
    return buf;
  }
  function fromArrayView(arrayView) {
    if (isInstance(arrayView, Uint8Array)) {
      const copy = new Uint8Array(arrayView);
      return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
    }
    return fromArrayLike(arrayView);
  }
  function fromArrayBuffer(array, byteOffset, length) {
    if (byteOffset &lt; 0 || array.byteLength &lt; byteOffset) {
      throw new RangeError('"offset" is outside of buffer bounds');
    }
    if (array.byteLength &lt; byteOffset + (length || 0)) {
      throw new RangeError('"length" is outside of buffer bounds');
    }
    let buf;
    if (byteOffset === void 0 &amp;&amp; length === void 0) {
      buf = new Uint8Array(array);
    } else if (length === void 0) {
      buf = new Uint8Array(array, byteOffset);
    } else {
      buf = new Uint8Array(array, byteOffset, length);
    }
    Object.setPrototypeOf(buf, Buffer2.prototype);
    return buf;
  }
  function fromObject(obj) {
    if (Buffer2.isBuffer(obj)) {
      const len = checked(obj.length) | 0;
      const buf = createBuffer(len);
      if (buf.length === 0) {
        return buf;
      }
      obj.copy(buf, 0, 0, len);
      return buf;
    }
    if (obj.length !== void 0) {
      if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {
        return createBuffer(0);
      }
      return fromArrayLike(obj);
    }
    if (obj.type === "Buffer" &amp;&amp; Array.isArray(obj.data)) {
      return fromArrayLike(obj.data);
    }
  }
  function checked(length) {
    if (length &gt;= K_MAX_LENGTH) {
      throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
    }
    return length | 0;
  }
  function SlowBuffer(length) {
    if (+length != length) {
      length = 0;
    }
    return Buffer2.alloc(+length);
  }
  Buffer2.isBuffer = function isBuffer(b) {
    return b != null &amp;&amp; b._isBuffer === true &amp;&amp; b !== Buffer2.prototype;
  };
  Buffer2.compare = function compare(a, b) {
    if (isInstance(a, Uint8Array))
      a = Buffer2.from(a, a.offset, a.byteLength);
    if (isInstance(b, Uint8Array))
      b = Buffer2.from(b, b.offset, b.byteLength);
    if (!Buffer2.isBuffer(a) || !Buffer2.isBuffer(b)) {
      throw new TypeError(
        'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
      );
    }
    if (a === b)
      return 0;
    let x = a.length;
    let y = b.length;
    for (let i = 0, len = Math.min(x, y); i &lt; len; ++i) {
      if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
      }
    }
    if (x &lt; y)
      return -1;
    if (y &lt; x)
      return 1;
    return 0;
  };
  Buffer2.isEncoding = function isEncoding(encoding) {
    switch (String(encoding).toLowerCase()) {
      case "hex":
      case "utf8":
      case "utf-8":
      case "ascii":
      case "latin1":
      case "binary":
      case "base64":
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return true;
      default:
        return false;
    }
  };
  Buffer2.concat = function concat(list, length) {
    if (!Array.isArray(list)) {
      throw new TypeError('"list" argument must be an Array of Buffers');
    }
    if (list.length === 0) {
      return Buffer2.alloc(0);
    }
    let i;
    if (length === void 0) {
      length = 0;
      for (i = 0; i &lt; list.length; ++i) {
        length += list[i].length;
      }
    }
    const buffer2 = Buffer2.allocUnsafe(length);
    let pos = 0;
    for (i = 0; i &lt; list.length; ++i) {
      let buf = list[i];
      if (isInstance(buf, Uint8Array)) {
        if (pos + buf.length &gt; buffer2.length) {
          if (!Buffer2.isBuffer(buf))
            buf = Buffer2.from(buf);
          buf.copy(buffer2, pos);
        } else {
          Uint8Array.prototype.set.call(
            buffer2,
            buf,
            pos
          );
        }
      } else if (!Buffer2.isBuffer(buf)) {
        throw new TypeError('"list" argument must be an Array of Buffers');
      } else {
        buf.copy(buffer2, pos);
      }
      pos += buf.length;
    }
    return buffer2;
  };
  function byteLength2(string, encoding) {
    if (Buffer2.isBuffer(string)) {
      return string.length;
    }
    if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
      return string.byteLength;
    }
    if (typeof string !== "string") {
      throw new TypeError(
        'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string
      );
    }
    const len = string.length;
    const mustMatch = arguments.length &gt; 2 &amp;&amp; arguments[2] === true;
    if (!mustMatch &amp;&amp; len === 0)
      return 0;
    let loweredCase = false;
    for (; ; ) {
      switch (encoding) {
        case "ascii":
        case "latin1":
        case "binary":
          return len;
        case "utf8":
        case "utf-8":
          return utf8ToBytes(string).length;
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return len * 2;
        case "hex":
          return len &gt;&gt;&gt; 1;
        case "base64":
          return base64ToBytes(string).length;
        default:
          if (loweredCase) {
            return mustMatch ? -1 : utf8ToBytes(string).length;
          }
          encoding = ("" + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  }
  Buffer2.byteLength = byteLength2;
  function slowToString(encoding, start, end) {
    let loweredCase = false;
    if (start === void 0 || start &lt; 0) {
      start = 0;
    }
    if (start &gt; this.length) {
      return "";
    }
    if (end === void 0 || end &gt; this.length) {
      end = this.length;
    }
    if (end &lt;= 0) {
      return "";
    }
    end &gt;&gt;&gt;= 0;
    start &gt;&gt;&gt;= 0;
    if (end &lt;= start) {
      return "";
    }
    if (!encoding)
      encoding = "utf8";
    while (true) {
      switch (encoding) {
        case "hex":
          return hexSlice(this, start, end);
        case "utf8":
        case "utf-8":
          return utf8Slice(this, start, end);
        case "ascii":
          return asciiSlice(this, start, end);
        case "latin1":
        case "binary":
          return latin1Slice(this, start, end);
        case "base64":
          return base64Slice(this, start, end);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return utf16leSlice(this, start, end);
        default:
          if (loweredCase)
            throw new TypeError("Unknown encoding: " + encoding);
          encoding = (encoding + "").toLowerCase();
          loweredCase = true;
      }
    }
  }
  Buffer2.prototype._isBuffer = true;
  function swap(b, n, m) {
    const i = b[n];
    b[n] = b[m];
    b[m] = i;
  }
  Buffer2.prototype.swap16 = function swap16() {
    const len = this.length;
    if (len % 2 !== 0) {
      throw new RangeError("Buffer size must be a multiple of 16-bits");
    }
    for (let i = 0; i &lt; len; i += 2) {
      swap(this, i, i + 1);
    }
    return this;
  };
  Buffer2.prototype.swap32 = function swap32() {
    const len = this.length;
    if (len % 4 !== 0) {
      throw new RangeError("Buffer size must be a multiple of 32-bits");
    }
    for (let i = 0; i &lt; len; i += 4) {
      swap(this, i, i + 3);
      swap(this, i + 1, i + 2);
    }
    return this;
  };
  Buffer2.prototype.swap64 = function swap64() {
    const len = this.length;
    if (len % 8 !== 0) {
      throw new RangeError("Buffer size must be a multiple of 64-bits");
    }
    for (let i = 0; i &lt; len; i += 8) {
      swap(this, i, i + 7);
      swap(this, i + 1, i + 6);
      swap(this, i + 2, i + 5);
      swap(this, i + 3, i + 4);
    }
    return this;
  };
  Buffer2.prototype.toString = function toString() {
    const length = this.length;
    if (length === 0)
      return "";
    if (arguments.length === 0)
      return utf8Slice(this, 0, length);
    return slowToString.apply(this, arguments);
  };
  Buffer2.prototype.toLocaleString = Buffer2.prototype.toString;
  Buffer2.prototype.equals = function equals(b) {
    if (!Buffer2.isBuffer(b))
      throw new TypeError("Argument must be a Buffer");
    if (this === b)
      return true;
    return Buffer2.compare(this, b) === 0;
  };
  Buffer2.prototype.inspect = function inspect() {
    let str = "";
    const max = exports.INSPECT_MAX_BYTES;
    str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
    if (this.length &gt; max)
      str += " ... ";
    return "&lt;Buffer " + str + "&gt;";
  };
  if (customInspectSymbol) {
    Buffer2.prototype[customInspectSymbol] = Buffer2.prototype.inspect;
  }
  Buffer2.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if (isInstance(target, Uint8Array)) {
      target = Buffer2.from(target, target.offset, target.byteLength);
    }
    if (!Buffer2.isBuffer(target)) {
      throw new TypeError(
        'The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target
      );
    }
    if (start === void 0) {
      start = 0;
    }
    if (end === void 0) {
      end = target ? target.length : 0;
    }
    if (thisStart === void 0) {
      thisStart = 0;
    }
    if (thisEnd === void 0) {
      thisEnd = this.length;
    }
    if (start &lt; 0 || end &gt; target.length || thisStart &lt; 0 || thisEnd &gt; this.length) {
      throw new RangeError("out of range index");
    }
    if (thisStart &gt;= thisEnd &amp;&amp; start &gt;= end) {
      return 0;
    }
    if (thisStart &gt;= thisEnd) {
      return -1;
    }
    if (start &gt;= end) {
      return 1;
    }
    start &gt;&gt;&gt;= 0;
    end &gt;&gt;&gt;= 0;
    thisStart &gt;&gt;&gt;= 0;
    thisEnd &gt;&gt;&gt;= 0;
    if (this === target)
      return 0;
    let x = thisEnd - thisStart;
    let y = end - start;
    const len = Math.min(x, y);
    const thisCopy = this.slice(thisStart, thisEnd);
    const targetCopy = target.slice(start, end);
    for (let i = 0; i &lt; len; ++i) {
      if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break;
      }
    }
    if (x &lt; y)
      return -1;
    if (y &lt; x)
      return 1;
    return 0;
  };
  function bidirectionalIndexOf(buffer2, val, byteOffset, encoding, dir) {
    if (buffer2.length === 0)
      return -1;
    if (typeof byteOffset === "string") {
      encoding = byteOffset;
      byteOffset = 0;
    } else if (byteOffset &gt; 2147483647) {
      byteOffset = 2147483647;
    } else if (byteOffset &lt; -2147483648) {
      byteOffset = -2147483648;
    }
    byteOffset = +byteOffset;
    if (numberIsNaN(byteOffset)) {
      byteOffset = dir ? 0 : buffer2.length - 1;
    }
    if (byteOffset &lt; 0)
      byteOffset = buffer2.length + byteOffset;
    if (byteOffset &gt;= buffer2.length) {
      if (dir)
        return -1;
      else
        byteOffset = buffer2.length - 1;
    } else if (byteOffset &lt; 0) {
      if (dir)
        byteOffset = 0;
      else
        return -1;
    }
    if (typeof val === "string") {
      val = Buffer2.from(val, encoding);
    }
    if (Buffer2.isBuffer(val)) {
      if (val.length === 0) {
        return -1;
      }
      return arrayIndexOf(buffer2, val, byteOffset, encoding, dir);
    } else if (typeof val === "number") {
      val = val &amp; 255;
      if (typeof Uint8Array.prototype.indexOf === "function") {
        if (dir) {
          return Uint8Array.prototype.indexOf.call(buffer2, val, byteOffset);
        } else {
          return Uint8Array.prototype.lastIndexOf.call(buffer2, val, byteOffset);
        }
      }
      return arrayIndexOf(buffer2, [val], byteOffset, encoding, dir);
    }
    throw new TypeError("val must be string, number or Buffer");
  }
  function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    let indexSize = 1;
    let arrLength = arr.length;
    let valLength = val.length;
    if (encoding !== void 0) {
      encoding = String(encoding).toLowerCase();
      if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
        if (arr.length &lt; 2 || val.length &lt; 2) {
          return -1;
        }
        indexSize = 2;
        arrLength /= 2;
        valLength /= 2;
        byteOffset /= 2;
      }
    }
    function read(buf, i2) {
      if (indexSize === 1) {
        return buf[i2];
      } else {
        return buf.readUInt16BE(i2 * indexSize);
      }
    }
    let i;
    if (dir) {
      let foundIndex = -1;
      for (i = byteOffset; i &lt; arrLength; i++) {
        if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
          if (foundIndex === -1)
            foundIndex = i;
          if (i - foundIndex + 1 === valLength)
            return foundIndex * indexSize;
        } else {
          if (foundIndex !== -1)
            i -= i - foundIndex;
          foundIndex = -1;
        }
      }
    } else {
      if (byteOffset + valLength &gt; arrLength)
        byteOffset = arrLength - valLength;
      for (i = byteOffset; i &gt;= 0; i--) {
        let found = true;
        for (let j = 0; j &lt; valLength; j++) {
          if (read(arr, i + j) !== read(val, j)) {
            found = false;
            break;
          }
        }
        if (found)
          return i;
      }
    }
    return -1;
  }
  Buffer2.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
  };
  Buffer2.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
  };
  Buffer2.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
  };
  function hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    const remaining = buf.length - offset;
    if (!length) {
      length = remaining;
    } else {
      length = Number(length);
      if (length &gt; remaining) {
        length = remaining;
      }
    }
    const strLen = string.length;
    if (length &gt; strLen / 2) {
      length = strLen / 2;
    }
    let i;
    for (i = 0; i &lt; length; ++i) {
      const parsed = parseInt(string.substr(i * 2, 2), 16);
      if (numberIsNaN(parsed))
        return i;
      buf[offset + i] = parsed;
    }
    return i;
  }
  function utf8Write(buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
  }
  function asciiWrite(buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length);
  }
  function base64Write(buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length);
  }
  function ucs2Write(buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
  }
  Buffer2.prototype.write = function write(string, offset, length, encoding) {
    if (offset === void 0) {
      encoding = "utf8";
      length = this.length;
      offset = 0;
    } else if (length === void 0 &amp;&amp; typeof offset === "string") {
      encoding = offset;
      length = this.length;
      offset = 0;
    } else if (isFinite(offset)) {
      offset = offset &gt;&gt;&gt; 0;
      if (isFinite(length)) {
        length = length &gt;&gt;&gt; 0;
        if (encoding === void 0)
          encoding = "utf8";
      } else {
        encoding = length;
        length = void 0;
      }
    } else {
      throw new Error(
        "Buffer.write(string, encoding, offset[, length]) is no longer supported"
      );
    }
    const remaining = this.length - offset;
    if (length === void 0 || length &gt; remaining)
      length = remaining;
    if (string.length &gt; 0 &amp;&amp; (length &lt; 0 || offset &lt; 0) || offset &gt; this.length) {
      throw new RangeError("Attempt to write outside buffer bounds");
    }
    if (!encoding)
      encoding = "utf8";
    let loweredCase = false;
    for (; ; ) {
      switch (encoding) {
        case "hex":
          return hexWrite(this, string, offset, length);
        case "utf8":
        case "utf-8":
          return utf8Write(this, string, offset, length);
        case "ascii":
        case "latin1":
        case "binary":
          return asciiWrite(this, string, offset, length);
        case "base64":
          return base64Write(this, string, offset, length);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return ucs2Write(this, string, offset, length);
        default:
          if (loweredCase)
            throw new TypeError("Unknown encoding: " + encoding);
          encoding = ("" + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  };
  Buffer2.prototype.toJSON = function toJSON() {
    return {
      type: "Buffer",
      data: Array.prototype.slice.call(this._arr || this, 0)
    };
  };
  function base64Slice(buf, start, end) {
    if (start === 0 &amp;&amp; end === buf.length) {
      return base64.fromByteArray(buf);
    } else {
      return base64.fromByteArray(buf.slice(start, end));
    }
  }
  function utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    const res = [];
    let i = start;
    while (i &lt; end) {
      const firstByte = buf[i];
      let codePoint = null;
      let bytesPerSequence = firstByte &gt; 239 ? 4 : firstByte &gt; 223 ? 3 : firstByte &gt; 191 ? 2 : 1;
      if (i + bytesPerSequence &lt;= end) {
        let secondByte, thirdByte, fourthByte, tempCodePoint;
        switch (bytesPerSequence) {
          case 1:
            if (firstByte &lt; 128) {
              codePoint = firstByte;
            }
            break;
          case 2:
            secondByte = buf[i + 1];
            if ((secondByte &amp; 192) === 128) {
              tempCodePoint = (firstByte &amp; 31) &lt;&lt; 6 | secondByte &amp; 63;
              if (tempCodePoint &gt; 127) {
                codePoint = tempCodePoint;
              }
            }
            break;
          case 3:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];
            if ((secondByte &amp; 192) === 128 &amp;&amp; (thirdByte &amp; 192) === 128) {
              tempCodePoint = (firstByte &amp; 15) &lt;&lt; 12 | (secondByte &amp; 63) &lt;&lt; 6 | thirdByte &amp; 63;
              if (tempCodePoint &gt; 2047 &amp;&amp; (tempCodePoint &lt; 55296 || tempCodePoint &gt; 57343)) {
                codePoint = tempCodePoint;
              }
            }
            break;
          case 4:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];
            fourthByte = buf[i + 3];
            if ((secondByte &amp; 192) === 128 &amp;&amp; (thirdByte &amp; 192) === 128 &amp;&amp; (fourthByte &amp; 192) === 128) {
              tempCodePoint = (firstByte &amp; 15) &lt;&lt; 18 | (secondByte &amp; 63) &lt;&lt; 12 | (thirdByte &amp; 63) &lt;&lt; 6 | fourthByte &amp; 63;
              if (tempCodePoint &gt; 65535 &amp;&amp; tempCodePoint &lt; 1114112) {
                codePoint = tempCodePoint;
              }
            }
        }
      }
      if (codePoint === null) {
        codePoint = 65533;
        bytesPerSequence = 1;
      } else if (codePoint &gt; 65535) {
        codePoint -= 65536;
        res.push(codePoint &gt;&gt;&gt; 10 &amp; 1023 | 55296);
        codePoint = 56320 | codePoint &amp; 1023;
      }
      res.push(codePoint);
      i += bytesPerSequence;
    }
    return decodeCodePointsArray(res);
  }
  const MAX_ARGUMENTS_LENGTH = 4096;
  function decodeCodePointsArray(codePoints) {
    const len = codePoints.length;
    if (len &lt;= MAX_ARGUMENTS_LENGTH) {
      return String.fromCharCode.apply(String, codePoints);
    }
    let res = "";
    let i = 0;
    while (i &lt; len) {
      res += String.fromCharCode.apply(
        String,
        codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
      );
    }
    return res;
  }
  function asciiSlice(buf, start, end) {
    let ret = "";
    end = Math.min(buf.length, end);
    for (let i = start; i &lt; end; ++i) {
      ret += String.fromCharCode(buf[i] &amp; 127);
    }
    return ret;
  }
  function latin1Slice(buf, start, end) {
    let ret = "";
    end = Math.min(buf.length, end);
    for (let i = start; i &lt; end; ++i) {
      ret += String.fromCharCode(buf[i]);
    }
    return ret;
  }
  function hexSlice(buf, start, end) {
    const len = buf.length;
    if (!start || start &lt; 0)
      start = 0;
    if (!end || end &lt; 0 || end &gt; len)
      end = len;
    let out = "";
    for (let i = start; i &lt; end; ++i) {
      out += hexSliceLookupTable[buf[i]];
    }
    return out;
  }
  function utf16leSlice(buf, start, end) {
    const bytes = buf.slice(start, end);
    let res = "";
    for (let i = 0; i &lt; bytes.length - 1; i += 2) {
      res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    }
    return res;
  }
  Buffer2.prototype.slice = function slice(start, end) {
    const len = this.length;
    start = ~~start;
    end = end === void 0 ? len : ~~end;
    if (start &lt; 0) {
      start += len;
      if (start &lt; 0)
        start = 0;
    } else if (start &gt; len) {
      start = len;
    }
    if (end &lt; 0) {
      end += len;
      if (end &lt; 0)
        end = 0;
    } else if (end &gt; len) {
      end = len;
    }
    if (end &lt; start)
      end = start;
    const newBuf = this.subarray(start, end);
    Object.setPrototypeOf(newBuf, Buffer2.prototype);
    return newBuf;
  };
  function checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset &lt; 0)
      throw new RangeError("offset is not uint");
    if (offset + ext &gt; length)
      throw new RangeError("Trying to access beyond buffer length");
  }
  Buffer2.prototype.readUintLE = Buffer2.prototype.readUIntLE = function readUIntLE(offset, byteLength3, noAssert) {
    offset = offset &gt;&gt;&gt; 0;
    byteLength3 = byteLength3 &gt;&gt;&gt; 0;
    if (!noAssert)
      checkOffset(offset, byteLength3, this.length);
    let val = this[offset];
    let mul = 1;
    let i = 0;
    while (++i &lt; byteLength3 &amp;&amp; (mul *= 256)) {
      val += this[offset + i] * mul;
    }
    return val;
  };
  Buffer2.prototype.readUintBE = Buffer2.prototype.readUIntBE = function readUIntBE(offset, byteLength3, noAssert) {
    offset = offset &gt;&gt;&gt; 0;
    byteLength3 = byteLength3 &gt;&gt;&gt; 0;
    if (!noAssert) {
      checkOffset(offset, byteLength3, this.length);
    }
    let val = this[offset + --byteLength3];
    let mul = 1;
    while (byteLength3 &gt; 0 &amp;&amp; (mul *= 256)) {
      val += this[offset + --byteLength3] * mul;
    }
    return val;
  };
  Buffer2.prototype.readUint8 = Buffer2.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    offset = offset &gt;&gt;&gt; 0;
    if (!noAssert)
      checkOffset(offset, 1, this.length);
    return this[offset];
  };
  Buffer2.prototype.readUint16LE = Buffer2.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    offset = offset &gt;&gt;&gt; 0;
    if (!noAssert)
      checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] &lt;&lt; 8;
  };
  Buffer2.prototype.readUint16BE = Buffer2.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    offset = offset &gt;&gt;&gt; 0;
    if (!noAssert)
      checkOffset(offset, 2, this.length);
    return this[offset] &lt;&lt; 8 | this[offset + 1];
  };
  Buffer2.prototype.readUint32LE = Buffer2.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    offset = offset &gt;&gt;&gt; 0;
    if (!noAssert)
      checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] &lt;&lt; 8 | this[offset + 2] &lt;&lt; 16) + this[offset + 3] * 16777216;
  };
  Buffer2.prototype.readUint32BE = Buffer2.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    offset = offset &gt;&gt;&gt; 0;
    if (!noAssert)
      checkOffset(offset, 4, this.length);
    return this[offset] * 16777216 + (this[offset + 1] &lt;&lt; 16 | this[offset + 2] &lt;&lt; 8 | this[offset + 3]);
  };
  Buffer2.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {
    offset = offset &gt;&gt;&gt; 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === void 0 || last === void 0) {
      boundsError(offset, this.length - 8);
    }
    const lo = first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;
    const hi = this[++offset] + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + last * 2 ** 24;
    return BigInt(lo) + (BigInt(hi) &lt;&lt; BigInt(32));
  });
  Buffer2.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {
    offset = offset &gt;&gt;&gt; 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === void 0 || last === void 0) {
      boundsError(offset, this.length - 8);
    }
    const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
    const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last;
    return (BigInt(hi) &lt;&lt; BigInt(32)) + BigInt(lo);
  });
  Buffer2.prototype.readIntLE = function readIntLE(offset, byteLength3, noAssert) {
    offset = offset &gt;&gt;&gt; 0;
    byteLength3 = byteLength3 &gt;&gt;&gt; 0;
    if (!noAssert)
      checkOffset(offset, byteLength3, this.length);
    let val = this[offset];
    let mul = 1;
    let i = 0;
    while (++i &lt; byteLength3 &amp;&amp; (mul *= 256)) {
      val += this[offset + i] * mul;
    }
    mul *= 128;
    if (val &gt;= mul)
      val -= Math.pow(2, 8 * byteLength3);
    return val;
  };
  Buffer2.prototype.readIntBE = function readIntBE(offset, byteLength3, noAssert) {
    offset = offset &gt;&gt;&gt; 0;
    byteLength3 = byteLength3 &gt;&gt;&gt; 0;
    if (!noAssert)
      checkOffset(offset, byteLength3, this.length);
    let i = byteLength3;
    let mul = 1;
    let val = this[offset + --i];
    while (i &gt; 0 &amp;&amp; (mul *= 256)) {
      val += this[offset + --i] * mul;
    }
    mul *= 128;
    if (val &gt;= mul)
      val -= Math.pow(2, 8 * byteLength3);
    return val;
  };
  Buffer2.prototype.readInt8 = function readInt8(offset, noAssert) {
    offset = offset &gt;&gt;&gt; 0;
    if (!noAssert)
      checkOffset(offset, 1, this.length);
    if (!(this[offset] &amp; 128))
      return this[offset];
    return (255 - this[offset] + 1) * -1;
  };
  Buffer2.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    offset = offset &gt;&gt;&gt; 0;
    if (!noAssert)
      checkOffset(offset, 2, this.length);
    const val = this[offset] | this[offset + 1] &lt;&lt; 8;
    return val &amp; 32768 ? val | 4294901760 : val;
  };
  Buffer2.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    offset = offset &gt;&gt;&gt; 0;
    if (!noAssert)
      checkOffset(offset, 2, this.length);
    const val = this[offset + 1] | this[offset] &lt;&lt; 8;
    return val &amp; 32768 ? val | 4294901760 : val;
  };
  Buffer2.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    offset = offset &gt;&gt;&gt; 0;
    if (!noAssert)
      checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] &lt;&lt; 8 | this[offset + 2] &lt;&lt; 16 | this[offset + 3] &lt;&lt; 24;
  };
  Buffer2.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    offset = offset &gt;&gt;&gt; 0;
    if (!noAssert)
      checkOffset(offset, 4, this.length);
    return this[offset] &lt;&lt; 24 | this[offset + 1] &lt;&lt; 16 | this[offset + 2] &lt;&lt; 8 | this[offset + 3];
  };
  Buffer2.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {
    offset = offset &gt;&gt;&gt; 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === void 0 || last === void 0) {
      boundsError(offset, this.length - 8);
    }
    const val = this[offset + 4] + this[offset + 5] * 2 ** 8 + this[offset + 6] * 2 ** 16 + (last &lt;&lt; 24);
    return (BigInt(val) &lt;&lt; BigInt(32)) + BigInt(first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);
  });
  Buffer2.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {
    offset = offset &gt;&gt;&gt; 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === void 0 || last === void 0) {
      boundsError(offset, this.length - 8);
    }
    const val = (first &lt;&lt; 24) + // Overflow
    this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
    return (BigInt(val) &lt;&lt; BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last);
  });
  Buffer2.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    offset = offset &gt;&gt;&gt; 0;
    if (!noAssert)
      checkOffset(offset, 4, this.length);
    return ieee754$1.read(this, offset, true, 23, 4);
  };
  Buffer2.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    offset = offset &gt;&gt;&gt; 0;
    if (!noAssert)
      checkOffset(offset, 4, this.length);
    return ieee754$1.read(this, offset, false, 23, 4);
  };
  Buffer2.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    offset = offset &gt;&gt;&gt; 0;
    if (!noAssert)
      checkOffset(offset, 8, this.length);
    return ieee754$1.read(this, offset, true, 52, 8);
  };
  Buffer2.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    offset = offset &gt;&gt;&gt; 0;
    if (!noAssert)
      checkOffset(offset, 8, this.length);
    return ieee754$1.read(this, offset, false, 52, 8);
  };
  function checkInt(buf, value, offset, ext, max, min) {
    if (!Buffer2.isBuffer(buf))
      throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value &gt; max || value &lt; min)
      throw new RangeError('"value" argument is out of bounds');
    if (offset + ext &gt; buf.length)
      throw new RangeError("Index out of range");
  }
  Buffer2.prototype.writeUintLE = Buffer2.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength3, noAssert) {
    value = +value;
    offset = offset &gt;&gt;&gt; 0;
    byteLength3 = byteLength3 &gt;&gt;&gt; 0;
    if (!noAssert) {
      const maxBytes = Math.pow(2, 8 * byteLength3) - 1;
      checkInt(this, value, offset, byteLength3, maxBytes, 0);
    }
    let mul = 1;
    let i = 0;
    this[offset] = value &amp; 255;
    while (++i &lt; byteLength3 &amp;&amp; (mul *= 256)) {
      this[offset + i] = value / mul &amp; 255;
    }
    return offset + byteLength3;
  };
  Buffer2.prototype.writeUintBE = Buffer2.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength3, noAssert) {
    value = +value;
    offset = offset &gt;&gt;&gt; 0;
    byteLength3 = byteLength3 &gt;&gt;&gt; 0;
    if (!noAssert) {
      const maxBytes = Math.pow(2, 8 * byteLength3) - 1;
      checkInt(this, value, offset, byteLength3, maxBytes, 0);
    }
    let i = byteLength3 - 1;
    let mul = 1;
    this[offset + i] = value &amp; 255;
    while (--i &gt;= 0 &amp;&amp; (mul *= 256)) {
      this[offset + i] = value / mul &amp; 255;
    }
    return offset + byteLength3;
  };
  Buffer2.prototype.writeUint8 = Buffer2.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset &gt;&gt;&gt; 0;
    if (!noAssert)
      checkInt(this, value, offset, 1, 255, 0);
    this[offset] = value &amp; 255;
    return offset + 1;
  };
  Buffer2.prototype.writeUint16LE = Buffer2.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset &gt;&gt;&gt; 0;
    if (!noAssert)
      checkInt(this, value, offset, 2, 65535, 0);
    this[offset] = value &amp; 255;
    this[offset + 1] = value &gt;&gt;&gt; 8;
    return offset + 2;
  };
  Buffer2.prototype.writeUint16BE = Buffer2.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset &gt;&gt;&gt; 0;
    if (!noAssert)
      checkInt(this, value, offset, 2, 65535, 0);
    this[offset] = value &gt;&gt;&gt; 8;
    this[offset + 1] = value &amp; 255;
    return offset + 2;
  };
  Buffer2.prototype.writeUint32LE = Buffer2.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset &gt;&gt;&gt; 0;
    if (!noAssert)
      checkInt(this, value, offset, 4, 4294967295, 0);
    this[offset + 3] = value &gt;&gt;&gt; 24;
    this[offset + 2] = value &gt;&gt;&gt; 16;
    this[offset + 1] = value &gt;&gt;&gt; 8;
    this[offset] = value &amp; 255;
    return offset + 4;
  };
  Buffer2.prototype.writeUint32BE = Buffer2.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset &gt;&gt;&gt; 0;
    if (!noAssert)
      checkInt(this, value, offset, 4, 4294967295, 0);
    this[offset] = value &gt;&gt;&gt; 24;
    this[offset + 1] = value &gt;&gt;&gt; 16;
    this[offset + 2] = value &gt;&gt;&gt; 8;
    this[offset + 3] = value &amp; 255;
    return offset + 4;
  };
  function wrtBigUInt64LE(buf, value, offset, min, max) {
    checkIntBI(value, min, max, buf, offset, 7);
    let lo = Number(value &amp; BigInt(4294967295));
    buf[offset++] = lo;
    lo = lo &gt;&gt; 8;
    buf[offset++] = lo;
    lo = lo &gt;&gt; 8;
    buf[offset++] = lo;
    lo = lo &gt;&gt; 8;
    buf[offset++] = lo;
    let hi = Number(value &gt;&gt; BigInt(32) &amp; BigInt(4294967295));
    buf[offset++] = hi;
    hi = hi &gt;&gt; 8;
    buf[offset++] = hi;
    hi = hi &gt;&gt; 8;
    buf[offset++] = hi;
    hi = hi &gt;&gt; 8;
    buf[offset++] = hi;
    return offset;
  }
  function wrtBigUInt64BE(buf, value, offset, min, max) {
    checkIntBI(value, min, max, buf, offset, 7);
    let lo = Number(value &amp; BigInt(4294967295));
    buf[offset + 7] = lo;
    lo = lo &gt;&gt; 8;
    buf[offset + 6] = lo;
    lo = lo &gt;&gt; 8;
    buf[offset + 5] = lo;
    lo = lo &gt;&gt; 8;
    buf[offset + 4] = lo;
    let hi = Number(value &gt;&gt; BigInt(32) &amp; BigInt(4294967295));
    buf[offset + 3] = hi;
    hi = hi &gt;&gt; 8;
    buf[offset + 2] = hi;
    hi = hi &gt;&gt; 8;
    buf[offset + 1] = hi;
    hi = hi &gt;&gt; 8;
    buf[offset] = hi;
    return offset + 8;
  }
  Buffer2.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {
    return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
  });
  Buffer2.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {
    return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
  });
  Buffer2.prototype.writeIntLE = function writeIntLE(value, offset, byteLength3, noAssert) {
    value = +value;
    offset = offset &gt;&gt;&gt; 0;
    if (!noAssert) {
      const limit = Math.pow(2, 8 * byteLength3 - 1);
      checkInt(this, value, offset, byteLength3, limit - 1, -limit);
    }
    let i = 0;
    let mul = 1;
    let sub = 0;
    this[offset] = value &amp; 255;
    while (++i &lt; byteLength3 &amp;&amp; (mul *= 256)) {
      if (value &lt; 0 &amp;&amp; sub === 0 &amp;&amp; this[offset + i - 1] !== 0) {
        sub = 1;
      }
      this[offset + i] = (value / mul &gt;&gt; 0) - sub &amp; 255;
    }
    return offset + byteLength3;
  };
  Buffer2.prototype.writeIntBE = function writeIntBE(value, offset, byteLength3, noAssert) {
    value = +value;
    offset = offset &gt;&gt;&gt; 0;
    if (!noAssert) {
      const limit = Math.pow(2, 8 * byteLength3 - 1);
      checkInt(this, value, offset, byteLength3, limit - 1, -limit);
    }
    let i = byteLength3 - 1;
    let mul = 1;
    let sub = 0;
    this[offset + i] = value &amp; 255;
    while (--i &gt;= 0 &amp;&amp; (mul *= 256)) {
      if (value &lt; 0 &amp;&amp; sub === 0 &amp;&amp; this[offset + i + 1] !== 0) {
        sub = 1;
      }
      this[offset + i] = (value / mul &gt;&gt; 0) - sub &amp; 255;
    }
    return offset + byteLength3;
  };
  Buffer2.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset &gt;&gt;&gt; 0;
    if (!noAssert)
      checkInt(this, value, offset, 1, 127, -128);
    if (value &lt; 0)
      value = 255 + value + 1;
    this[offset] = value &amp; 255;
    return offset + 1;
  };
  Buffer2.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset &gt;&gt;&gt; 0;
    if (!noAssert)
      checkInt(this, value, offset, 2, 32767, -32768);
    this[offset] = value &amp; 255;
    this[offset + 1] = value &gt;&gt;&gt; 8;
    return offset + 2;
  };
  Buffer2.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset &gt;&gt;&gt; 0;
    if (!noAssert)
      checkInt(this, value, offset, 2, 32767, -32768);
    this[offset] = value &gt;&gt;&gt; 8;
    this[offset + 1] = value &amp; 255;
    return offset + 2;
  };
  Buffer2.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset &gt;&gt;&gt; 0;
    if (!noAssert)
      checkInt(this, value, offset, 4, 2147483647, -2147483648);
    this[offset] = value &amp; 255;
    this[offset + 1] = value &gt;&gt;&gt; 8;
    this[offset + 2] = value &gt;&gt;&gt; 16;
    this[offset + 3] = value &gt;&gt;&gt; 24;
    return offset + 4;
  };
  Buffer2.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset &gt;&gt;&gt; 0;
    if (!noAssert)
      checkInt(this, value, offset, 4, 2147483647, -2147483648);
    if (value &lt; 0)
      value = 4294967295 + value + 1;
    this[offset] = value &gt;&gt;&gt; 24;
    this[offset + 1] = value &gt;&gt;&gt; 16;
    this[offset + 2] = value &gt;&gt;&gt; 8;
    this[offset + 3] = value &amp; 255;
    return offset + 4;
  };
  Buffer2.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {
    return wrtBigUInt64LE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
  });
  Buffer2.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {
    return wrtBigUInt64BE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
  });
  function checkIEEE754(buf, value, offset, ext, max, min) {
    if (offset + ext &gt; buf.length)
      throw new RangeError("Index out of range");
    if (offset &lt; 0)
      throw new RangeError("Index out of range");
  }
  function writeFloat(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset &gt;&gt;&gt; 0;
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 4);
    }
    ieee754$1.write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
  }
  Buffer2.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert);
  };
  Buffer2.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert);
  };
  function writeDouble(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset &gt;&gt;&gt; 0;
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 8);
    }
    ieee754$1.write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
  }
  Buffer2.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert);
  };
  Buffer2.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert);
  };
  Buffer2.prototype.copy = function copy(target, targetStart, start, end) {
    if (!Buffer2.isBuffer(target))
      throw new TypeError("argument should be a Buffer");
    if (!start)
      start = 0;
    if (!end &amp;&amp; end !== 0)
      end = this.length;
    if (targetStart &gt;= target.length)
      targetStart = target.length;
    if (!targetStart)
      targetStart = 0;
    if (end &gt; 0 &amp;&amp; end &lt; start)
      end = start;
    if (end === start)
      return 0;
    if (target.length === 0 || this.length === 0)
      return 0;
    if (targetStart &lt; 0) {
      throw new RangeError("targetStart out of bounds");
    }
    if (start &lt; 0 || start &gt;= this.length)
      throw new RangeError("Index out of range");
    if (end &lt; 0)
      throw new RangeError("sourceEnd out of bounds");
    if (end &gt; this.length)
      end = this.length;
    if (target.length - targetStart &lt; end - start) {
      end = target.length - targetStart + start;
    }
    const len = end - start;
    if (this === target &amp;&amp; typeof Uint8Array.prototype.copyWithin === "function") {
      this.copyWithin(targetStart, start, end);
    } else {
      Uint8Array.prototype.set.call(
        target,
        this.subarray(start, end),
        targetStart
      );
    }
    return len;
  };
  Buffer2.prototype.fill = function fill(val, start, end, encoding) {
    if (typeof val === "string") {
      if (typeof start === "string") {
        encoding = start;
        start = 0;
        end = this.length;
      } else if (typeof end === "string") {
        encoding = end;
        end = this.length;
      }
      if (encoding !== void 0 &amp;&amp; typeof encoding !== "string") {
        throw new TypeError("encoding must be a string");
      }
      if (typeof encoding === "string" &amp;&amp; !Buffer2.isEncoding(encoding)) {
        throw new TypeError("Unknown encoding: " + encoding);
      }
      if (val.length === 1) {
        const code2 = val.charCodeAt(0);
        if (encoding === "utf8" &amp;&amp; code2 &lt; 128 || encoding === "latin1") {
          val = code2;
        }
      }
    } else if (typeof val === "number") {
      val = val &amp; 255;
    } else if (typeof val === "boolean") {
      val = Number(val);
    }
    if (start &lt; 0 || this.length &lt; start || this.length &lt; end) {
      throw new RangeError("Out of range index");
    }
    if (end &lt;= start) {
      return this;
    }
    start = start &gt;&gt;&gt; 0;
    end = end === void 0 ? this.length : end &gt;&gt;&gt; 0;
    if (!val)
      val = 0;
    let i;
    if (typeof val === "number") {
      for (i = start; i &lt; end; ++i) {
        this[i] = val;
      }
    } else {
      const bytes = Buffer2.isBuffer(val) ? val : Buffer2.from(val, encoding);
      const len = bytes.length;
      if (len === 0) {
        throw new TypeError('The value "' + val + '" is invalid for argument "value"');
      }
      for (i = 0; i &lt; end - start; ++i) {
        this[i + start] = bytes[i % len];
      }
    }
    return this;
  };
  const errors2 = {};
  function E(sym, getMessage, Base) {
    errors2[sym] = class NodeError extends Base {
      constructor() {
        super();
        Object.defineProperty(this, "message", {
          value: getMessage.apply(this, arguments),
          writable: true,
          configurable: true
        });
        this.name = `${this.name} [${sym}]`;
        this.stack;
        delete this.name;
      }
      get code() {
        return sym;
      }
      set code(value) {
        Object.defineProperty(this, "code", {
          configurable: true,
          enumerable: true,
          value,
          writable: true
        });
      }
      toString() {
        return `${this.name} [${sym}]: ${this.message}`;
      }
    };
  }
  E(
    "ERR_BUFFER_OUT_OF_BOUNDS",
    function(name) {
      if (name) {
        return `${name} is outside of buffer bounds`;
      }
      return "Attempt to access memory outside buffer bounds";
    },
    RangeError
  );
  E(
    "ERR_INVALID_ARG_TYPE",
    function(name, actual) {
      return `The "${name}" argument must be of type number. Received type ${typeof actual}`;
    },
    TypeError
  );
  E(
    "ERR_OUT_OF_RANGE",
    function(str, range, input) {
      let msg = `The value of "${str}" is out of range.`;
      let received = input;
      if (Number.isInteger(input) &amp;&amp; Math.abs(input) &gt; 2 ** 32) {
        received = addNumericalSeparator(String(input));
      } else if (typeof input === "bigint") {
        received = String(input);
        if (input &gt; BigInt(2) ** BigInt(32) || input &lt; -(BigInt(2) ** BigInt(32))) {
          received = addNumericalSeparator(received);
        }
        received += "n";
      }
      msg += ` It must be ${range}. Received ${received}`;
      return msg;
    },
    RangeError
  );
  function addNumericalSeparator(val) {
    let res = "";
    let i = val.length;
    const start = val[0] === "-" ? 1 : 0;
    for (; i &gt;= start + 4; i -= 3) {
      res = `_${val.slice(i - 3, i)}${res}`;
    }
    return `${val.slice(0, i)}${res}`;
  }
  function checkBounds(buf, offset, byteLength3) {
    validateNumber(offset, "offset");
    if (buf[offset] === void 0 || buf[offset + byteLength3] === void 0) {
      boundsError(offset, buf.length - (byteLength3 + 1));
    }
  }
  function checkIntBI(value, min, max, buf, offset, byteLength3) {
    if (value &gt; max || value &lt; min) {
      const n = typeof min === "bigint" ? "n" : "";
      let range;
      if (byteLength3 &gt; 3) {
        if (min === 0 || min === BigInt(0)) {
          range = `&gt;= 0${n} and &lt; 2${n} ** ${(byteLength3 + 1) * 8}${n}`;
        } else {
          range = `&gt;= -(2${n} ** ${(byteLength3 + 1) * 8 - 1}${n}) and &lt; 2 ** ${(byteLength3 + 1) * 8 - 1}${n}`;
        }
      } else {
        range = `&gt;= ${min}${n} and &lt;= ${max}${n}`;
      }
      throw new errors2.ERR_OUT_OF_RANGE("value", range, value);
    }
    checkBounds(buf, offset, byteLength3);
  }
  function validateNumber(value, name) {
    if (typeof value !== "number") {
      throw new errors2.ERR_INVALID_ARG_TYPE(name, "number", value);
    }
  }
  function boundsError(value, length, type) {
    if (Math.floor(value) !== value) {
      validateNumber(value, type);
      throw new errors2.ERR_OUT_OF_RANGE(type || "offset", "an integer", value);
    }
    if (length &lt; 0) {
      throw new errors2.ERR_BUFFER_OUT_OF_BOUNDS();
    }
    throw new errors2.ERR_OUT_OF_RANGE(
      type || "offset",
      `&gt;= ${type ? 1 : 0} and &lt;= ${length}`,
      value
    );
  }
  const INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
  function base64clean(str) {
    str = str.split("=")[0];
    str = str.trim().replace(INVALID_BASE64_RE, "");
    if (str.length &lt; 2)
      return "";
    while (str.length % 4 !== 0) {
      str = str + "=";
    }
    return str;
  }
  function utf8ToBytes(string, units) {
    units = units || Infinity;
    let codePoint;
    const length = string.length;
    let leadSurrogate = null;
    const bytes = [];
    for (let i = 0; i &lt; length; ++i) {
      codePoint = string.charCodeAt(i);
      if (codePoint &gt; 55295 &amp;&amp; codePoint &lt; 57344) {
        if (!leadSurrogate) {
          if (codePoint &gt; 56319) {
            if ((units -= 3) &gt; -1)
              bytes.push(239, 191, 189);
            continue;
          } else if (i + 1 === length) {
            if ((units -= 3) &gt; -1)
              bytes.push(239, 191, 189);
            continue;
          }
          leadSurrogate = codePoint;
          continue;
        }
        if (codePoint &lt; 56320) {
          if ((units -= 3) &gt; -1)
            bytes.push(239, 191, 189);
          leadSurrogate = codePoint;
          continue;
        }
        codePoint = (leadSurrogate - 55296 &lt;&lt; 10 | codePoint - 56320) + 65536;
      } else if (leadSurrogate) {
        if ((units -= 3) &gt; -1)
          bytes.push(239, 191, 189);
      }
      leadSurrogate = null;
      if (codePoint &lt; 128) {
        if ((units -= 1) &lt; 0)
          break;
        bytes.push(codePoint);
      } else if (codePoint &lt; 2048) {
        if ((units -= 2) &lt; 0)
          break;
        bytes.push(
          codePoint &gt;&gt; 6 | 192,
          codePoint &amp; 63 | 128
        );
      } else if (codePoint &lt; 65536) {
        if ((units -= 3) &lt; 0)
          break;
        bytes.push(
          codePoint &gt;&gt; 12 | 224,
          codePoint &gt;&gt; 6 &amp; 63 | 128,
          codePoint &amp; 63 | 128
        );
      } else if (codePoint &lt; 1114112) {
        if ((units -= 4) &lt; 0)
          break;
        bytes.push(
          codePoint &gt;&gt; 18 | 240,
          codePoint &gt;&gt; 12 &amp; 63 | 128,
          codePoint &gt;&gt; 6 &amp; 63 | 128,
          codePoint &amp; 63 | 128
        );
      } else {
        throw new Error("Invalid code point");
      }
    }
    return bytes;
  }
  function asciiToBytes(str) {
    const byteArray = [];
    for (let i = 0; i &lt; str.length; ++i) {
      byteArray.push(str.charCodeAt(i) &amp; 255);
    }
    return byteArray;
  }
  function utf16leToBytes(str, units) {
    let c, hi, lo;
    const byteArray = [];
    for (let i = 0; i &lt; str.length; ++i) {
      if ((units -= 2) &lt; 0)
        break;
      c = str.charCodeAt(i);
      hi = c &gt;&gt; 8;
      lo = c % 256;
      byteArray.push(lo);
      byteArray.push(hi);
    }
    return byteArray;
  }
  function base64ToBytes(str) {
    return base64.toByteArray(base64clean(str));
  }
  function blitBuffer(src, dst, offset, length) {
    let i;
    for (i = 0; i &lt; length; ++i) {
      if (i + offset &gt;= dst.length || i &gt;= src.length)
        break;
      dst[i + offset] = src[i];
    }
    return i;
  }
  function isInstance(obj, type) {
    return obj instanceof type || obj != null &amp;&amp; obj.constructor != null &amp;&amp; obj.constructor.name != null &amp;&amp; obj.constructor.name === type.name;
  }
  function numberIsNaN(obj) {
    return obj !== obj;
  }
  const hexSliceLookupTable = function() {
    const alphabet = "0123456789abcdef";
    const table = new Array(256);
    for (let i = 0; i &lt; 16; ++i) {
      const i16 = i * 16;
      for (let j = 0; j &lt; 16; ++j) {
        table[i16 + j] = alphabet[i] + alphabet[j];
      }
    }
    return table;
  }();
  function defineBigIntMethod(fn) {
    return typeof BigInt === "undefined" ? BufferBigIntNotDefined : fn;
  }
  function BufferBigIntNotDefined() {
    throw new Error("BigInt not supported");
  }
})(buffer);
var dist = { exports: {} };
const maxInt = 2147483647;
const base = 36;
const tMin = 1;
const tMax = 26;
const skew = 38;
const damp = 700;
const initialBias = 72;
const initialN = 128;
const delimiter = "-";
const regexPunycode = /^xn--/;
const regexNonASCII = /[^\0-\x7F]/;
const regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g;
const errors = {
  "overflow": "Overflow: input needs wider integers to process",
  "not-basic": "Illegal input &gt;= 0x80 (not a basic code point)",
  "invalid-input": "Invalid input"
};
const baseMinusTMin = base - tMin;
const floor = Math.floor;
const stringFromCharCode = String.fromCharCode;
function error(type) {
  throw new RangeError(errors[type]);
}
function map(array, callback) {
  const result = [];
  let length = array.length;
  while (length--) {
    result[length] = callback(array[length]);
  }
  return result;
}
function mapDomain(domain, callback) {
  const parts = domain.split("@");
  let result = "";
  if (parts.length &gt; 1) {
    result = parts[0] + "@";
    domain = parts[1];
  }
  domain = domain.replace(regexSeparators, ".");
  const labels = domain.split(".");
  const encoded = map(labels, callback).join(".");
  return result + encoded;
}
function ucs2decode(string) {
  const output = [];
  let counter = 0;
  const length = string.length;
  while (counter &lt; length) {
    const value = string.charCodeAt(counter++);
    if (value &gt;= 55296 &amp;&amp; value &lt;= 56319 &amp;&amp; counter &lt; length) {
      const extra = string.charCodeAt(counter++);
      if ((extra &amp; 64512) == 56320) {
        output.push(((value &amp; 1023) &lt;&lt; 10) + (extra &amp; 1023) + 65536);
      } else {
        output.push(value);
        counter--;
      }
    } else {
      output.push(value);
    }
  }
  return output;
}
const ucs2encode = (codePoints) =&gt; String.fromCodePoint(...codePoints);
const basicToDigit = function(codePoint) {
  if (codePoint &gt;= 48 &amp;&amp; codePoint &lt; 58) {
    return 26 + (codePoint - 48);
  }
  if (codePoint &gt;= 65 &amp;&amp; codePoint &lt; 91) {
    return codePoint - 65;
  }
  if (codePoint &gt;= 97 &amp;&amp; codePoint &lt; 123) {
    return codePoint - 97;
  }
  return base;
};
const digitToBasic = function(digit, flag) {
  return digit + 22 + 75 * (digit &lt; 26) - ((flag != 0) &lt;&lt; 5);
};
const adapt = function(delta, numPoints, firstTime) {
  let k = 0;
  delta = firstTime ? floor(delta / damp) : delta &gt;&gt; 1;
  delta += floor(delta / numPoints);
  for (; delta &gt; baseMinusTMin * tMax &gt;&gt; 1; k += base) {
    delta = floor(delta / baseMinusTMin);
  }
  return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
};
const decode = function(input) {
  const output = [];
  const inputLength = input.length;
  let i = 0;
  let n = initialN;
  let bias = initialBias;
  let basic = input.lastIndexOf(delimiter);
  if (basic &lt; 0) {
    basic = 0;
  }
  for (let j = 0; j &lt; basic; ++j) {
    if (input.charCodeAt(j) &gt;= 128) {
      error("not-basic");
    }
    output.push(input.charCodeAt(j));
  }
  for (let index = basic &gt; 0 ? basic + 1 : 0; index &lt; inputLength; ) {
    const oldi = i;
    for (let w = 1, k = base; ; k += base) {
      if (index &gt;= inputLength) {
        error("invalid-input");
      }
      const digit = basicToDigit(input.charCodeAt(index++));
      if (digit &gt;= base) {
        error("invalid-input");
      }
      if (digit &gt; floor((maxInt - i) / w)) {
        error("overflow");
      }
      i += digit * w;
      const t = k &lt;= bias ? tMin : k &gt;= bias + tMax ? tMax : k - bias;
      if (digit &lt; t) {
        break;
      }
      const baseMinusT = base - t;
      if (w &gt; floor(maxInt / baseMinusT)) {
        error("overflow");
      }
      w *= baseMinusT;
    }
    const out = output.length + 1;
    bias = adapt(i - oldi, out, oldi == 0);
    if (floor(i / out) &gt; maxInt - n) {
      error("overflow");
    }
    n += floor(i / out);
    i %= out;
    output.splice(i++, 0, n);
  }
  return String.fromCodePoint(...output);
};
const encode = function(input) {
  const output = [];
  input = ucs2decode(input);
  const inputLength = input.length;
  let n = initialN;
  let delta = 0;
  let bias = initialBias;
  for (const currentValue of input) {
    if (currentValue &lt; 128) {
      output.push(stringFromCharCode(currentValue));
    }
  }
  const basicLength = output.length;
  let handledCPCount = basicLength;
  if (basicLength) {
    output.push(delimiter);
  }
  while (handledCPCount &lt; inputLength) {
    let m = maxInt;
    for (const currentValue of input) {
      if (currentValue &gt;= n &amp;&amp; currentValue &lt; m) {
        m = currentValue;
      }
    }
    const handledCPCountPlusOne = handledCPCount + 1;
    if (m - n &gt; floor((maxInt - delta) / handledCPCountPlusOne)) {
      error("overflow");
    }
    delta += (m - n) * handledCPCountPlusOne;
    n = m;
    for (const currentValue of input) {
      if (currentValue &lt; n &amp;&amp; ++delta &gt; maxInt) {
        error("overflow");
      }
      if (currentValue === n) {
        let q = delta;
        for (let k = base; ; k += base) {
          const t = k &lt;= bias ? tMin : k &gt;= bias + tMax ? tMax : k - bias;
          if (q &lt; t) {
            break;
          }
          const qMinusT = q - t;
          const baseMinusT = base - t;
          output.push(
            stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
          );
          q = floor(qMinusT / baseMinusT);
        }
        output.push(stringFromCharCode(digitToBasic(q, 0)));
        bias = adapt(delta, handledCPCountPlusOne, handledCPCount === basicLength);
        delta = 0;
        ++handledCPCount;
      }
    }
    ++delta;
    ++n;
  }
  return output.join("");
};
const toUnicode = function(input) {
  return mapDomain(input, function(string) {
    return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
  });
};
const toASCII = function(input) {
  return mapDomain(input, function(string) {
    return regexNonASCII.test(string) ? "xn--" + encode(string) : string;
  });
};
const punycode = {
  /**
   * A string representing the current Punycode.js version number.
   * @memberOf punycode
   * @type String
   */
  "version": "2.3.1",
  /**
   * An object of methods to convert from JavaScript's internal character
   * representation (UCS-2) to Unicode code points, and back.
   * @see &lt;https://mathiasbynens.be/notes/javascript-encoding&gt;
   * @memberOf punycode
   * @type Object
   */
  "ucs2": {
    "decode": ucs2decode,
    "encode": ucs2encode
  },
  "decode": decode,
  "encode": encode,
  "toASCII": toASCII,
  "toUnicode": toUnicode
};
const punycode_es6 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  decode,
  default: punycode,
  encode,
  toASCII,
  toUnicode,
  ucs2decode,
  ucs2encode
}, Symbol.toStringTag, { value: "Module" }));
const require$$0 = /* @__PURE__ */ getAugmentedNamespace(punycode_es6);
(function(module, exports) {
  (function(global2, factory) {
    module.exports = factory(require$$0);
  })(commonjsGlobal, function(require$$02) {
    function _interopDefaultLegacy(e) {
      return e &amp;&amp; typeof e === "object" &amp;&amp; "default" in e ? e : { "default": e };
    }
    var require$$0__default = /* @__PURE__ */ _interopDefaultLegacy(require$$02);
    var commonjsGlobal$1 = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof commonjsGlobal !== "undefined" ? commonjsGlobal : typeof self !== "undefined" ? self : {};
    var sha3$1 = { exports: {} };
    /**
     * [js-sha3]{@link https://github.com/emn178/js-sha3}
     *
     * @version 0.5.7
     * @author Chen, Yi-Cyuan [emn178@gmail.com]
     * @copyright Chen, Yi-Cyuan 2015-2016
     * @license MIT
     */
    (function(module2) {
      (function() {
        var root = typeof window === "object" ? window : {};
        var NODE_JS = !root.JS_SHA3_NO_NODE_JS &amp;&amp; typeof process === "object" &amp;&amp; process.versions &amp;&amp; process.versions.node;
        if (NODE_JS) {
          root = commonjsGlobal$1;
        }
        var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS &amp;&amp; true &amp;&amp; module2.exports;
        var HEX_CHARS = "0123456789abcdef".split("");
        var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
        var KECCAK_PADDING = [1, 256, 65536, 16777216];
        var PADDING = [6, 1536, 393216, 100663296];
        var SHIFT = [0, 8, 16, 24];
        var RC = [
          1,
          0,
          32898,
          0,
          32906,
          2147483648,
          2147516416,
          2147483648,
          32907,
          0,
          2147483649,
          0,
          2147516545,
          2147483648,
          32777,
          2147483648,
          138,
          0,
          136,
          0,
          2147516425,
          0,
          2147483658,
          0,
          2147516555,
          0,
          139,
          2147483648,
          32905,
          2147483648,
          32771,
          2147483648,
          32770,
          2147483648,
          128,
          2147483648,
          32778,
          0,
          2147483658,
          2147483648,
          2147516545,
          2147483648,
          32896,
          2147483648,
          2147483649,
          0,
          2147516424,
          2147483648
        ];
        var BITS = [224, 256, 384, 512];
        var SHAKE_BITS = [128, 256];
        var OUTPUT_TYPES = ["hex", "buffer", "arrayBuffer", "array"];
        var createOutputMethod = function(bits2, padding, outputType) {
          return function(message) {
            return new Keccak(bits2, padding, bits2).update(message)[outputType]();
          };
        };
        var createShakeOutputMethod = function(bits2, padding, outputType) {
          return function(message, outputBits) {
            return new Keccak(bits2, padding, outputBits).update(message)[outputType]();
          };
        };
        var createMethod = function(bits2, padding) {
          var method = createOutputMethod(bits2, padding, "hex");
          method.create = function() {
            return new Keccak(bits2, padding, bits2);
          };
          method.update = function(message) {
            return method.create().update(message);
          };
          for (var i2 = 0; i2 &lt; OUTPUT_TYPES.length; ++i2) {
            var type = OUTPUT_TYPES[i2];
            method[type] = createOutputMethod(bits2, padding, type);
          }
          return method;
        };
        var createShakeMethod = function(bits2, padding) {
          var method = createShakeOutputMethod(bits2, padding, "hex");
          method.create = function(outputBits) {
            return new Keccak(bits2, padding, outputBits);
          };
          method.update = function(message, outputBits) {
            return method.create(outputBits).update(message);
          };
          for (var i2 = 0; i2 &lt; OUTPUT_TYPES.length; ++i2) {
            var type = OUTPUT_TYPES[i2];
            method[type] = createShakeOutputMethod(bits2, padding, type);
          }
          return method;
        };
        var algorithms = [
          { name: "keccak", padding: KECCAK_PADDING, bits: BITS, createMethod },
          { name: "sha3", padding: PADDING, bits: BITS, createMethod },
          { name: "shake", padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod }
        ];
        var methods = {}, methodNames = [];
        for (var i = 0; i &lt; algorithms.length; ++i) {
          var algorithm = algorithms[i];
          var bits = algorithm.bits;
          for (var j = 0; j &lt; bits.length; ++j) {
            var methodName = algorithm.name + "_" + bits[j];
            methodNames.push(methodName);
            methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);
          }
        }
        function Keccak(bits2, padding, outputBits) {
          this.blocks = [];
          this.s = [];
          this.padding = padding;
          this.outputBits = outputBits;
          this.reset = true;
          this.block = 0;
          this.start = 0;
          this.blockCount = 1600 - (bits2 &lt;&lt; 1) &gt;&gt; 5;
          this.byteCount = this.blockCount &lt;&lt; 2;
          this.outputBlocks = outputBits &gt;&gt; 5;
          this.extraBytes = (outputBits &amp; 31) &gt;&gt; 3;
          for (var i2 = 0; i2 &lt; 50; ++i2) {
            this.s[i2] = 0;
          }
        }
        Keccak.prototype.update = function(message) {
          var notString = typeof message !== "string";
          if (notString &amp;&amp; message.constructor === ArrayBuffer) {
            message = new Uint8Array(message);
          }
          var length = message.length, blocks = this.blocks, byteCount = this.byteCount, blockCount = this.blockCount, index = 0, s = this.s, i2, code2;
          while (index &lt; length) {
            if (this.reset) {
              this.reset = false;
              blocks[0] = this.block;
              for (i2 = 1; i2 &lt; blockCount + 1; ++i2) {
                blocks[i2] = 0;
              }
            }
            if (notString) {
              for (i2 = this.start; index &lt; length &amp;&amp; i2 &lt; byteCount; ++index) {
                blocks[i2 &gt;&gt; 2] |= message[index] &lt;&lt; SHIFT[i2++ &amp; 3];
              }
            } else {
              for (i2 = this.start; index &lt; length &amp;&amp; i2 &lt; byteCount; ++index) {
                code2 = message.charCodeAt(index);
                if (code2 &lt; 128) {
                  blocks[i2 &gt;&gt; 2] |= code2 &lt;&lt; SHIFT[i2++ &amp; 3];
                } else if (code2 &lt; 2048) {
                  blocks[i2 &gt;&gt; 2] |= (192 | code2 &gt;&gt; 6) &lt;&lt; SHIFT[i2++ &amp; 3];
                  blocks[i2 &gt;&gt; 2] |= (128 | code2 &amp; 63) &lt;&lt; SHIFT[i2++ &amp; 3];
                } else if (code2 &lt; 55296 || code2 &gt;= 57344) {
                  blocks[i2 &gt;&gt; 2] |= (224 | code2 &gt;&gt; 12) &lt;&lt; SHIFT[i2++ &amp; 3];
                  blocks[i2 &gt;&gt; 2] |= (128 | code2 &gt;&gt; 6 &amp; 63) &lt;&lt; SHIFT[i2++ &amp; 3];
                  blocks[i2 &gt;&gt; 2] |= (128 | code2 &amp; 63) &lt;&lt; SHIFT[i2++ &amp; 3];
                } else {
                  code2 = 65536 + ((code2 &amp; 1023) &lt;&lt; 10 | message.charCodeAt(++index) &amp; 1023);
                  blocks[i2 &gt;&gt; 2] |= (240 | code2 &gt;&gt; 18) &lt;&lt; SHIFT[i2++ &amp; 3];
                  blocks[i2 &gt;&gt; 2] |= (128 | code2 &gt;&gt; 12 &amp; 63) &lt;&lt; SHIFT[i2++ &amp; 3];
                  blocks[i2 &gt;&gt; 2] |= (128 | code2 &gt;&gt; 6 &amp; 63) &lt;&lt; SHIFT[i2++ &amp; 3];
                  blocks[i2 &gt;&gt; 2] |= (128 | code2 &amp; 63) &lt;&lt; SHIFT[i2++ &amp; 3];
                }
              }
            }
            this.lastByteIndex = i2;
            if (i2 &gt;= byteCount) {
              this.start = i2 - byteCount;
              this.block = blocks[blockCount];
              for (i2 = 0; i2 &lt; blockCount; ++i2) {
                s[i2] ^= blocks[i2];
              }
              f(s);
              this.reset = true;
            } else {
              this.start = i2;
            }
          }
          return this;
        };
        Keccak.prototype.finalize = function() {
          var blocks = this.blocks, i2 = this.lastByteIndex, blockCount = this.blockCount, s = this.s;
          blocks[i2 &gt;&gt; 2] |= this.padding[i2 &amp; 3];
          if (this.lastByteIndex === this.byteCount) {
            blocks[0] = blocks[blockCount];
            for (i2 = 1; i2 &lt; blockCount + 1; ++i2) {
              blocks[i2] = 0;
            }
          }
          blocks[blockCount - 1] |= 2147483648;
          for (i2 = 0; i2 &lt; blockCount; ++i2) {
            s[i2] ^= blocks[i2];
          }
          f(s);
        };
        Keccak.prototype.toString = Keccak.prototype.hex = function() {
          this.finalize();
          var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i2 = 0, j2 = 0;
          var hex = "", block;
          while (j2 &lt; outputBlocks) {
            for (i2 = 0; i2 &lt; blockCount &amp;&amp; j2 &lt; outputBlocks; ++i2, ++j2) {
              block = s[i2];
              hex += HEX_CHARS[block &gt;&gt; 4 &amp; 15] + HEX_CHARS[block &amp; 15] + HEX_CHARS[block &gt;&gt; 12 &amp; 15] + HEX_CHARS[block &gt;&gt; 8 &amp; 15] + HEX_CHARS[block &gt;&gt; 20 &amp; 15] + HEX_CHARS[block &gt;&gt; 16 &amp; 15] + HEX_CHARS[block &gt;&gt; 28 &amp; 15] + HEX_CHARS[block &gt;&gt; 24 &amp; 15];
            }
            if (j2 % blockCount === 0) {
              f(s);
              i2 = 0;
            }
          }
          if (extraBytes) {
            block = s[i2];
            if (extraBytes &gt; 0) {
              hex += HEX_CHARS[block &gt;&gt; 4 &amp; 15] + HEX_CHARS[block &amp; 15];
            }
            if (extraBytes &gt; 1) {
              hex += HEX_CHARS[block &gt;&gt; 12 &amp; 15] + HEX_CHARS[block &gt;&gt; 8 &amp; 15];
            }
            if (extraBytes &gt; 2) {
              hex += HEX_CHARS[block &gt;&gt; 20 &amp; 15] + HEX_CHARS[block &gt;&gt; 16 &amp; 15];
            }
          }
          return hex;
        };
        Keccak.prototype.arrayBuffer = function() {
          this.finalize();
          var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i2 = 0, j2 = 0;
          var bytes = this.outputBits &gt;&gt; 3;
          var buffer2;
          if (extraBytes) {
            buffer2 = new ArrayBuffer(outputBlocks + 1 &lt;&lt; 2);
          } else {
            buffer2 = new ArrayBuffer(bytes);
          }
          var array = new Uint32Array(buffer2);
          while (j2 &lt; outputBlocks) {
            for (i2 = 0; i2 &lt; blockCount &amp;&amp; j2 &lt; outputBlocks; ++i2, ++j2) {
              array[j2] = s[i2];
            }
            if (j2 % blockCount === 0) {
              f(s);
            }
          }
          if (extraBytes) {
            array[i2] = s[i2];
            buffer2 = buffer2.slice(0, bytes);
          }
          return buffer2;
        };
        Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;
        Keccak.prototype.digest = Keccak.prototype.array = function() {
          this.finalize();
          var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i2 = 0, j2 = 0;
          var array = [], offset, block;
          while (j2 &lt; outputBlocks) {
            for (i2 = 0; i2 &lt; blockCount &amp;&amp; j2 &lt; outputBlocks; ++i2, ++j2) {
              offset = j2 &lt;&lt; 2;
              block = s[i2];
              array[offset] = block &amp; 255;
              array[offset + 1] = block &gt;&gt; 8 &amp; 255;
              array[offset + 2] = block &gt;&gt; 16 &amp; 255;
              array[offset + 3] = block &gt;&gt; 24 &amp; 255;
            }
            if (j2 % blockCount === 0) {
              f(s);
            }
          }
          if (extraBytes) {
            offset = j2 &lt;&lt; 2;
            block = s[i2];
            if (extraBytes &gt; 0) {
              array[offset] = block &amp; 255;
            }
            if (extraBytes &gt; 1) {
              array[offset + 1] = block &gt;&gt; 8 &amp; 255;
            }
            if (extraBytes &gt; 2) {
              array[offset + 2] = block &gt;&gt; 16 &amp; 255;
            }
          }
          return array;
        };
        var f = function(s) {
          var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
          for (n = 0; n &lt; 48; n += 2) {
            c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
            c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
            c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
            c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
            c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
            c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
            c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
            c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
            c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
            c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];
            h = c8 ^ (c2 &lt;&lt; 1 | c3 &gt;&gt;&gt; 31);
            l = c9 ^ (c3 &lt;&lt; 1 | c2 &gt;&gt;&gt; 31);
            s[0] ^= h;
            s[1] ^= l;
            s[10] ^= h;
            s[11] ^= l;
            s[20] ^= h;
            s[21] ^= l;
            s[30] ^= h;
            s[31] ^= l;
            s[40] ^= h;
            s[41] ^= l;
            h = c0 ^ (c4 &lt;&lt; 1 | c5 &gt;&gt;&gt; 31);
            l = c1 ^ (c5 &lt;&lt; 1 | c4 &gt;&gt;&gt; 31);
            s[2] ^= h;
            s[3] ^= l;
            s[12] ^= h;
            s[13] ^= l;
            s[22] ^= h;
            s[23] ^= l;
            s[32] ^= h;
            s[33] ^= l;
            s[42] ^= h;
            s[43] ^= l;
            h = c2 ^ (c6 &lt;&lt; 1 | c7 &gt;&gt;&gt; 31);
            l = c3 ^ (c7 &lt;&lt; 1 | c6 &gt;&gt;&gt; 31);
            s[4] ^= h;
            s[5] ^= l;
            s[14] ^= h;
            s[15] ^= l;
            s[24] ^= h;
            s[25] ^= l;
            s[34] ^= h;
            s[35] ^= l;
            s[44] ^= h;
            s[45] ^= l;
            h = c4 ^ (c8 &lt;&lt; 1 | c9 &gt;&gt;&gt; 31);
            l = c5 ^ (c9 &lt;&lt; 1 | c8 &gt;&gt;&gt; 31);
            s[6] ^= h;
            s[7] ^= l;
            s[16] ^= h;
            s[17] ^= l;
            s[26] ^= h;
            s[27] ^= l;
            s[36] ^= h;
            s[37] ^= l;
            s[46] ^= h;
            s[47] ^= l;
            h = c6 ^ (c0 &lt;&lt; 1 | c1 &gt;&gt;&gt; 31);
            l = c7 ^ (c1 &lt;&lt; 1 | c0 &gt;&gt;&gt; 31);
            s[8] ^= h;
            s[9] ^= l;
            s[18] ^= h;
            s[19] ^= l;
            s[28] ^= h;
            s[29] ^= l;
            s[38] ^= h;
            s[39] ^= l;
            s[48] ^= h;
            s[49] ^= l;
            b0 = s[0];
            b1 = s[1];
            b32 = s[11] &lt;&lt; 4 | s[10] &gt;&gt;&gt; 28;
            b33 = s[10] &lt;&lt; 4 | s[11] &gt;&gt;&gt; 28;
            b14 = s[20] &lt;&lt; 3 | s[21] &gt;&gt;&gt; 29;
            b15 = s[21] &lt;&lt; 3 | s[20] &gt;&gt;&gt; 29;
            b46 = s[31] &lt;&lt; 9 | s[30] &gt;&gt;&gt; 23;
            b47 = s[30] &lt;&lt; 9 | s[31] &gt;&gt;&gt; 23;
            b28 = s[40] &lt;&lt; 18 | s[41] &gt;&gt;&gt; 14;
            b29 = s[41] &lt;&lt; 18 | s[40] &gt;&gt;&gt; 14;
            b20 = s[2] &lt;&lt; 1 | s[3] &gt;&gt;&gt; 31;
            b21 = s[3] &lt;&lt; 1 | s[2] &gt;&gt;&gt; 31;
            b2 = s[13] &lt;&lt; 12 | s[12] &gt;&gt;&gt; 20;
            b3 = s[12] &lt;&lt; 12 | s[13] &gt;&gt;&gt; 20;
            b34 = s[22] &lt;&lt; 10 | s[23] &gt;&gt;&gt; 22;
            b35 = s[23] &lt;&lt; 10 | s[22] &gt;&gt;&gt; 22;
            b16 = s[33] &lt;&lt; 13 | s[32] &gt;&gt;&gt; 19;
            b17 = s[32] &lt;&lt; 13 | s[33] &gt;&gt;&gt; 19;
            b48 = s[42] &lt;&lt; 2 | s[43] &gt;&gt;&gt; 30;
            b49 = s[43] &lt;&lt; 2 | s[42] &gt;&gt;&gt; 30;
            b40 = s[5] &lt;&lt; 30 | s[4] &gt;&gt;&gt; 2;
            b41 = s[4] &lt;&lt; 30 | s[5] &gt;&gt;&gt; 2;
            b22 = s[14] &lt;&lt; 6 | s[15] &gt;&gt;&gt; 26;
            b23 = s[15] &lt;&lt; 6 | s[14] &gt;&gt;&gt; 26;
            b4 = s[25] &lt;&lt; 11 | s[24] &gt;&gt;&gt; 21;
            b5 = s[24] &lt;&lt; 11 | s[25] &gt;&gt;&gt; 21;
            b36 = s[34] &lt;&lt; 15 | s[35] &gt;&gt;&gt; 17;
            b37 = s[35] &lt;&lt; 15 | s[34] &gt;&gt;&gt; 17;
            b18 = s[45] &lt;&lt; 29 | s[44] &gt;&gt;&gt; 3;
            b19 = s[44] &lt;&lt; 29 | s[45] &gt;&gt;&gt; 3;
            b10 = s[6] &lt;&lt; 28 | s[7] &gt;&gt;&gt; 4;
            b11 = s[7] &lt;&lt; 28 | s[6] &gt;&gt;&gt; 4;
            b42 = s[17] &lt;&lt; 23 | s[16] &gt;&gt;&gt; 9;
            b43 = s[16] &lt;&lt; 23 | s[17] &gt;&gt;&gt; 9;
            b24 = s[26] &lt;&lt; 25 | s[27] &gt;&gt;&gt; 7;
            b25 = s[27] &lt;&lt; 25 | s[26] &gt;&gt;&gt; 7;
            b6 = s[36] &lt;&lt; 21 | s[37] &gt;&gt;&gt; 11;
            b7 = s[37] &lt;&lt; 21 | s[36] &gt;&gt;&gt; 11;
            b38 = s[47] &lt;&lt; 24 | s[46] &gt;&gt;&gt; 8;
            b39 = s[46] &lt;&lt; 24 | s[47] &gt;&gt;&gt; 8;
            b30 = s[8] &lt;&lt; 27 | s[9] &gt;&gt;&gt; 5;
            b31 = s[9] &lt;&lt; 27 | s[8] &gt;&gt;&gt; 5;
            b12 = s[18] &lt;&lt; 20 | s[19] &gt;&gt;&gt; 12;
            b13 = s[19] &lt;&lt; 20 | s[18] &gt;&gt;&gt; 12;
            b44 = s[29] &lt;&lt; 7 | s[28] &gt;&gt;&gt; 25;
            b45 = s[28] &lt;&lt; 7 | s[29] &gt;&gt;&gt; 25;
            b26 = s[38] &lt;&lt; 8 | s[39] &gt;&gt;&gt; 24;
            b27 = s[39] &lt;&lt; 8 | s[38] &gt;&gt;&gt; 24;
            b8 = s[48] &lt;&lt; 14 | s[49] &gt;&gt;&gt; 18;
            b9 = s[49] &lt;&lt; 14 | s[48] &gt;&gt;&gt; 18;
            s[0] = b0 ^ ~b2 &amp; b4;
            s[1] = b1 ^ ~b3 &amp; b5;
            s[10] = b10 ^ ~b12 &amp; b14;
            s[11] = b11 ^ ~b13 &amp; b15;
            s[20] = b20 ^ ~b22 &amp; b24;
            s[21] = b21 ^ ~b23 &amp; b25;
            s[30] = b30 ^ ~b32 &amp; b34;
            s[31] = b31 ^ ~b33 &amp; b35;
            s[40] = b40 ^ ~b42 &amp; b44;
            s[41] = b41 ^ ~b43 &amp; b45;
            s[2] = b2 ^ ~b4 &amp; b6;
            s[3] = b3 ^ ~b5 &amp; b7;
            s[12] = b12 ^ ~b14 &amp; b16;
            s[13] = b13 ^ ~b15 &amp; b17;
            s[22] = b22 ^ ~b24 &amp; b26;
            s[23] = b23 ^ ~b25 &amp; b27;
            s[32] = b32 ^ ~b34 &amp; b36;
            s[33] = b33 ^ ~b35 &amp; b37;
            s[42] = b42 ^ ~b44 &amp; b46;
            s[43] = b43 ^ ~b45 &amp; b47;
            s[4] = b4 ^ ~b6 &amp; b8;
            s[5] = b5 ^ ~b7 &amp; b9;
            s[14] = b14 ^ ~b16 &amp; b18;
            s[15] = b15 ^ ~b17 &amp; b19;
            s[24] = b24 ^ ~b26 &amp; b28;
            s[25] = b25 ^ ~b27 &amp; b29;
            s[34] = b34 ^ ~b36 &amp; b38;
            s[35] = b35 ^ ~b37 &amp; b39;
            s[44] = b44 ^ ~b46 &amp; b48;
            s[45] = b45 ^ ~b47 &amp; b49;
            s[6] = b6 ^ ~b8 &amp; b0;
            s[7] = b7 ^ ~b9 &amp; b1;
            s[16] = b16 ^ ~b18 &amp; b10;
            s[17] = b17 ^ ~b19 &amp; b11;
            s[26] = b26 ^ ~b28 &amp; b20;
            s[27] = b27 ^ ~b29 &amp; b21;
            s[36] = b36 ^ ~b38 &amp; b30;
            s[37] = b37 ^ ~b39 &amp; b31;
            s[46] = b46 ^ ~b48 &amp; b40;
            s[47] = b47 ^ ~b49 &amp; b41;
            s[8] = b8 ^ ~b0 &amp; b2;
            s[9] = b9 ^ ~b1 &amp; b3;
            s[18] = b18 ^ ~b10 &amp; b12;
            s[19] = b19 ^ ~b11 &amp; b13;
            s[28] = b28 ^ ~b20 &amp; b22;
            s[29] = b29 ^ ~b21 &amp; b23;
            s[38] = b38 ^ ~b30 &amp; b32;
            s[39] = b39 ^ ~b31 &amp; b33;
            s[48] = b48 ^ ~b40 &amp; b42;
            s[49] = b49 ^ ~b41 &amp; b43;
            s[0] ^= RC[n];
            s[1] ^= RC[n + 1];
          }
        };
        if (COMMON_JS) {
          module2.exports = methods;
        } else {
          for (var i = 0; i &lt; methodNames.length; ++i) {
            root[methodNames[i]] = methods[methodNames[i]];
          }
        }
      })();
    })(sha3$1);
    var uts46$1 = { exports: {} };
    var idnaMap = { exports: {} };
    (function(module2, exports2) {
      (function(root, factory) {
        {
          module2.exports = factory();
        }
      })(commonjsGlobal$1, function() {
        var blocks = [
          new Uint32Array([2101761, 2100961, 2123873, 2223617, 2098113, 2123393, 2104929, 2223649, 2105761, 2123713, 2123809, 2124257, 2101377, 2101697, 2124865, 2101857]),
          new Uint32Array([2098374, 2098566, 2098758, 2098950, 2099142, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 14680064, 14680064, 14680064, 14680064, 14680064]),
          new Uint32Array([2250401, 2250433, 2250465, 2239073, 2183298, 2250497, 2250529, 2250561, 2241121, 2250561, 2250593, 2239137, 2250625, 2250657, 2250689, 2250721]),
          new Uint32Array([2191233, 6291456, 2191265, 6291456, 2191297, 6291456, 2191329, 6291456, 2191361, 2191393, 6291456, 2191425, 6291456, 2143457, 6291456, 2098305]),
          new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 0, 0, 0, 0]),
          new Uint32Array([2236225, 2118849, 2236257, 2236289, 2236321, 2236353, 2236385, 2236417, 2236449, 2236481, 2236513, 2232929, 2236545, 2236577, 2236609, 2236641]),
          new Uint32Array([14680064, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([2216481, 2216513, 2216545, 2216577, 2216609, 2216641, 2216673, 2216705, 2216737, 2216769, 2216801, 2216833, 2216865, 2216897, 2216929, 2216961]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 6291456, 0, 0, 0, 0, 0]),
          new Uint32Array([2246849, 2246881, 2246913, 2182082, 2246945, 2238689, 2246977, 2247009, 2247041, 2247073, 2238721, 2247105, 2247137, 2182146, 2238753, 2247169]),
          new Uint32Array([2220641, 2115969, 2116065, 2220673, 2220705, 2116161, 2220737, 2116257, 2116353, 2220769, 2116449, 2116545, 2116641, 2116737, 2116833, 2220801]),
          new Uint32Array([2184194, 2184258, 2252993, 2253025, 2241505, 2253057, 2253089, 2253121, 2253153, 2253185, 2253217, 2184322, 2253249, 2184386, 2253281, 0]),
          new Uint32Array([6291456, 2148609, 2195105, 2195137, 2195169, 2195201, 2195233, 2148929, 2195265, 2144097, 2195297, 2195329, 2153665, 2195361, 2195393, 2195425]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([6291456, 6291456, 6291456, 0, 6291456, 6291456, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([2229537, 2229569, 2229601, 2229633, 2229665, 2229697, 2229729, 2229761, 2229793, 2229825, 2229857, 2229889, 2229921, 2229953, 2229985, 2230017]),
          new Uint32Array([2247809, 2247841, 2247841, 2247841, 2182402, 2247873, 2247905, 2247937, 2182466, 2247969, 2248001, 2248033, 2248065, 2248097, 2248129, 2248161]),
          new Uint32Array([0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0]),
          new Uint32Array([2218465, 2218497, 2218529, 2218561, 2218593, 2218625, 2119713, 2218657, 2218689, 2218721, 2218753, 2218785, 2218817, 2218849, 2218881, 2218913]),
          new Uint32Array([2115009, 2110337, 2115201, 2115297, 2098209, 2112993, 2107233, 2098241, 2110209, 2110273, 2107553, 2113569, 2102625, 2113761, 2107201, 2107297]),
          new Uint32Array([2148034, 2148098, 2148162, 2148226, 2148290, 2148354, 2148418, 2148482, 2148034, 2148098, 2148162, 2148226, 2148290, 2148354, 2148418, 2148482]),
          new Uint32Array([2098305, 2110177, 2110145, 2102593, 2115009, 2110337, 2115201, 2115297, 2098209, 2112993, 0, 2098241, 2110209, 2110273, 2107553, 0]),
          new Uint32Array([2230049, 2230081, 2218401, 2230113, 2230145, 2230177, 2230209, 2220097, 2220097, 2230241, 2119713, 2230273, 2230305, 2230337, 2230369, 2230401]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 0, 6291456]),
          new Uint32Array([2228001, 2228033, 2228065, 2228097, 2228129, 2228161, 2228193, 2228225, 2228257, 2228289, 2228321, 2228353, 2228385, 2228417, 2228449, 2228481]),
          new Uint32Array([2141282, 2161474, 2161538, 2161602, 2136098, 2161666, 2161730, 2161794, 2161858, 2161922, 2161986, 2162050, 2140514, 2162114, 2162178, 2136578]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2146242, 6291456, 6291456, 6291456, 0, 0, 0]),
          new Uint32Array([2212993, 6291456, 2213025, 6291456, 2213057, 6291456, 2213089, 6291456, 2213121, 6291456, 2213153, 6291456, 2213185, 6291456, 2213217, 6291456]),
          new Uint32Array([6291456, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 23068672, 6291456, 6291456]),
          new Uint32Array([2179650, 2179714, 2179778, 2179842, 2179906, 2179970, 2180034, 2180098, 2180162, 2180226, 2180290, 2180354, 2180418, 2180482, 2180546, 2180610]),
          new Uint32Array([2191777, 2191809, 6291456, 2191841, 2191873, 6291456, 2191905, 2191937, 2191969, 6291456, 6291456, 6291456, 2192001, 2192033, 6291456, 2192065]),
          new Uint32Array([2240897, 2240929, 2240961, 2240993, 2241025, 2241057, 2241089, 2241121, 2241153, 2239137, 2241185, 2239169, 2241217, 2241249, 2241281, 2241313]),
          new Uint32Array([2204097, 6291456, 2211841, 6291456, 6291456, 2211873, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2113761, 2102593, 2211905, 2211937]),
          new Uint32Array([2113569, 2194625, 2113761, 2098177, 2194657, 2194689, 2194721, 2115009, 2115201, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([2255265, 2255297, 2255329, 2255361, 2255393, 2255425, 2255457, 2186626, 2233505, 2255489, 2255521, 2255553, 2255585, 2255617, 2255649, 2240033]),
          new Uint32Array([23068672, 23068672, 0, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]),
          new Uint32Array([6291456, 6291456, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]),
          new Uint32Array([0, 0, 2149122, 2149186, 2149250, 0, 6291456, 2149314, 2209889, 2195041, 2149121, 2149249, 2149186, 10531586, 10497922, 0]),
          new Uint32Array([2239169, 2239201, 2239233, 2239265, 2239297, 2239329, 2239361, 2239393, 2239425, 2239457, 2239489, 2239521, 2107169, 2239553, 2239585, 2239617]),
          new Uint32Array([2097729, 2107745, 2107745, 2107745, 2107745, 2133153, 2133153, 2133153, 2133153, 2107809, 2107809, 2162689, 2162689, 2107681, 2107681, 2162977]),
          new Uint32Array([2203393, 2203425, 2203457, 2203489, 2203521, 2203553, 2203585, 2203617, 2203649, 2203681, 2203713, 0, 0, 2203745, 2203777, 2203809]),
          new Uint32Array([2247201, 2247233, 2182210, 2247265, 2247297, 2246145, 2182274, 2247329, 2247361, 2247393, 2247425, 2240481, 2182338, 2214177, 2247457, 2247489]),
          new Uint32Array([2226913, 2226945, 2204321, 2226977, 2227009, 6291456, 2227041, 6291456, 2227073, 6291456, 2227105, 6291456, 2227137, 6291456, 2227169, 6291456]),
          new Uint32Array([23068672, 6291456, 6291456, 6291456, 23068672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
          new Uint32Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([14680064, 2098209, 2112993, 2107233, 2098241, 2110209, 2110273, 2107553, 2113569, 2102625, 2113761, 2107201, 2107297, 2107329, 2114145, 2110049]),
          new Uint32Array([6291456, 6291456, 6291456, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 0, 0]),
          new Uint32Array([2172290, 2172354, 2172418, 2172482, 2172546, 2172610, 2172674, 2172738, 2172802, 2172866, 2172930, 2172994, 2173058, 2173122, 2173186, 2173250]),
          new Uint32Array([10501859, 10501955, 10502051, 10502147, 10502243, 10502339, 10502435, 10502531, 10502627, 10502723, 10502819, 10502915, 10503011, 10503107, 10503203, 10503299]),
          new Uint32Array([6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]),
          new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 23068672, 23068672, 0, 0, 23068672, 23068672, 23068672, 6291456, 0]),
          new Uint32Array([2216993, 2217025, 2217057, 2217089, 2217121, 2217153, 2217185, 2217217, 2217249, 2217281, 2217313, 2217345, 2217377, 2217409, 2217441, 2217473]),
          new Uint32Array([2256385, 2256417, 2256449, 2256481, 2217953, 2187138, 2256513, 2256545, 2256577, 2256609, 2256641, 2187202, 2187266, 2256673, 2256705, 2256737]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2150530]),
          new Uint32Array([2241921, 2254113, 2185346, 2239649, 2185410, 2185474, 2238273, 2254145, 2254177, 2239745, 2254209, 2254241, 2185538, 2185602, 2185602, 0]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2148033, 2148097, 2148161, 2148225, 2148289, 2148353, 2148417, 2148481]),
          new Uint32Array([10569441, 2243905, 0, 10503969, 10583521, 10538049, 10538177, 2243937, 2243969, 0, 0, 0, 0, 0, 0, 0]),
          new Uint32Array([0, 0, 0, 2243777, 2243777, 2243777, 2243777, 2144321, 2144321, 2159841, 2159841, 2159905, 2159905, 2144322, 2243809, 2243809]),
          new Uint32Array([2251521, 2251553, 2251585, 2251617, 2251649, 2251681, 2251713, 2251745, 2231233, 2241377, 2251777, 2251809, 2251841, 2183554, 2251873, 2251905]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 23068672, 23068672]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 0, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([2117121, 2117217, 2117313, 2117409, 2117505, 2117601, 2117697, 2117793, 2117889, 2117985, 2118081, 2118177, 2150786, 2150850, 2223169, 6291456]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 0, 6291456]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([2188290, 2258113, 2188354, 2188418, 2188482, 2219681, 2258145, 2219809, 2258177, 2258209, 2258241, 2258273, 2219969, 2188546, 0, 0]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 0, 0]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456]),
          new Uint32Array([2107233, 2098241, 2110209, 2110273, 2107553, 0, 2102625, 2113761, 2107201, 2107297, 2107329, 2114145, 2110049, 2114337, 2114433, 2098177]),
          new Uint32Array([6291456, 6291456, 6291456, 2145922, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 2145986, 6291456, 6291456]),
          new Uint32Array([2195105, 2195265, 2195585, 2195073, 2195745, 2195617, 2195457, 6291456, 2195809, 6291456, 2195841, 6291456, 2195873, 6291456, 2195905, 6291456]),
          new Uint32Array([2107201, 2107297, 2107329, 2114145, 2110049, 2114337, 2114433, 2098177, 2098305, 2110177, 2110145, 2102593, 2115009, 2110337, 2115201, 2115297]),
          new Uint32Array([2171010, 2171074, 2171138, 2171202, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([2142051, 2142147, 2142243, 2142339, 2142435, 2142531, 2142627, 2142723, 2142819, 0, 0, 0, 0, 0, 0, 0]),
          new Uint32Array([10510019, 10510115, 10510211, 10510307, 2223073, 2223105, 2215681, 2223137, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]),
          new Uint32Array([2163202, 2163266, 2133218, 2163330, 2160578, 2160642, 2163394, 2163458, 2160770, 2163522, 2160834, 2160898, 2161474, 2161538, 2161666, 2161730]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([2211137, 2211169, 2211201, 2211233, 2211265, 2211297, 2211329, 2211361, 2211393, 2211425, 2211457, 2211489, 2211521, 2211553, 2211585, 0]),
          new Uint32Array([2243457, 2243457, 2243489, 2243489, 2243489, 2243489, 2243521, 2243521, 2243521, 2243521, 2243553, 2243553, 2243553, 2243553, 2243585, 2243585]),
          new Uint32Array([2137026, 2097506, 2132547, 2132643, 2132739, 2164610, 2164674, 2164738, 2164802, 2164866, 2164930, 2164994, 2165058, 2165122, 2165186, 2134978]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 23068672]),
          new Uint32Array([2195329, 2153665, 2195361, 2195393, 2195425, 2195457, 2195489, 2195521, 2195521, 2195553, 2195585, 2195617, 2195649, 2195681, 2149185, 2245729]),
          new Uint32Array([2154754, 2154818, 2154882, 2154946, 2141986, 2155010, 2155074, 2129154, 2155138, 2129154, 2155202, 2155266, 2155330, 2155394, 2155458, 2155394]),
          new Uint32Array([2158722, 2158786, 0, 2158850, 2158914, 0, 2158978, 2159042, 2159106, 2131778, 2159170, 2159234, 2159298, 2159362, 2159426, 2159490]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2197281, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([2181890, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([2230433, 2230465, 2230497, 2230529, 2230561, 2230593, 2230625, 2230657, 2230689, 2230721, 2230753, 2230785, 2230817, 2230849, 2230881, 2230913]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456]),
          new Uint32Array([0, 0, 0, 0, 0, 23068672, 23068672, 23068672, 0, 0, 0, 0, 2145538, 2145602, 0, 6291456]),
          new Uint32Array([2110049, 2114337, 2114433, 2098177, 2098305, 2110177, 2110145, 2102593, 2115009, 2110337, 2115201, 2115297, 2098209, 2112993, 2107233, 2098241]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672]),
          new Uint32Array([2160066, 2160130, 2160194, 2160002, 2160258, 2160322, 2141378, 2138306, 2160386, 2160450, 2160514, 2132834, 2132930, 2133122, 2133218, 2160578]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 23068672, 23068672, 6291456, 0, 0]),
          new Uint32Array([2210017, 6291456, 6291456, 6291456, 6291456, 2098241, 2098241, 2110209, 2102625, 2113761, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([2195489, 2195457, 2148609, 2195105, 2195137, 2195169, 2195201, 2195233, 2148929, 2195265, 2144097, 2195297, 2195329, 2153665, 2195361, 2195393]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456]),
          new Uint32Array([2107201, 2107297, 2107329, 2114145, 0, 2114337, 2114433, 2098177, 2098305, 2110177, 2110145, 2102593, 2115009, 2110337, 2115201, 2115297]),
          new Uint32Array([2147522, 2147586, 2147650, 2147714, 2147778, 2147842, 2147906, 2147970, 2147522, 2147586, 2147650, 2147714, 2147778, 2147842, 2147906, 2147970]),
          new Uint32Array([6291456, 6291456, 6291456, 2209569, 0, 0, 6291456, 6291456, 2209601, 2209633, 2209665, 2195009, 0, 10497923, 10498019, 10498115]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 6291456, 0, 0, 0, 0, 0, 0, 0, 0]),
          new Uint32Array([2238017, 6291456, 2238049, 6291456, 6291456, 2238081, 2238113, 2238145, 2238177, 2238209, 2238241, 2238273, 2238305, 2238337, 2217345, 6291456]),
          new Uint32Array([2122018, 2122114, 2151746, 2151810, 2151874, 2151938, 2152002, 2152066, 2152130, 2121891, 2121987, 2122083, 2152194, 2122179, 2152258, 2122275]),
          new Uint32Array([0, 23068672, 0, 0, 0, 0, 0, 0, 0, 2145282, 2145346, 2145410, 6291456, 0, 2145474, 0]),
          new Uint32Array([2152386, 2123139, 2105412, 2105540, 2097986, 2100261, 2097990, 2100421, 2100323, 2100581, 2100741, 2105668, 2123235, 2123331, 2123427, 2105796]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2225057, 2227393, 2211649, 2227425]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 23068672, 23068672, 10538946, 10539010, 6291456, 6291456, 2150466]),
          new Uint32Array([6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 0, 0]),
          new Uint32Array([2099910, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([2201857, 2201889, 2144161, 2201921, 2201953, 2201985, 2202017, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 2209345, 0, 2209377, 0, 2209409, 0, 2209441]),
          new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 10538178, 10538242, 10538306, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([2195425, 2195457, 2195489, 2195521, 2195521, 2195553, 2195585, 2195617, 2195649, 2195681, 2149185, 2245729, 2195201, 2195265, 2195297, 2195617]),
          new Uint32Array([6291456, 6291456, 23068672, 23068672, 0, 0, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0]),
          new Uint32Array([2192097, 6291456, 2192129, 6291456, 2192161, 6291456, 2192193, 2192225, 6291456, 2192257, 6291456, 6291456, 2192289, 6291456, 2192321, 2192353]),
          new Uint32Array([6291456, 0, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 23068672, 6291456, 23068672, 23068672]),
          new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 23068672, 6291456, 6291456]),
          new Uint32Array([2249345, 2182786, 2249377, 2249409, 0, 2214913, 2249441, 2249473, 2214977, 2249505, 2249537, 2182850, 2249569, 2182914, 2249601, 2249633]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2144130, 6291456, 6291456, 6291456, 0, 0, 6291456, 6291456, 6291456]),
          new Uint32Array([2199041, 6291456, 2199073, 6291456, 2199105, 6291456, 2199137, 6291456, 2199169, 6291456, 2199201, 6291456, 2199233, 6291456, 2199265, 6291456]),
          new Uint32Array([2186306, 2254945, 2254977, 2255009, 2255041, 2255073, 2255105, 2186370, 2186434, 2186498, 2186562, 2250081, 2255137, 2255169, 2255201, 2255233]),
          new Uint32Array([23068672, 23068672, 23068672, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]),
          new Uint32Array([6291456, 0, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 6291456, 6291456, 0, 6291456, 0, 6291456, 6291456]),
          new Uint32Array([2101249, 2100833, 2122561, 2100097, 2122657, 2105089, 2097985, 2100161, 2123233, 2123329, 2100897, 2101601, 2100129, 2101121, 2152801, 2101761]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([2136418, 2134018, 2134690, 2138722, 2138338, 2165250, 2165314, 2165378, 2165442, 2134658, 2134562, 2165506, 2134754, 2165570, 2165634, 2165698]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2104130, 2104131, 6291456, 2111906]),
          new Uint32Array([6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([23068672, 23068672, 2213633, 6291456, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([2232417, 2232449, 2232481, 2232513, 2232545, 2232577, 2232609, 2232641, 2232673, 2232705, 2232737, 2232769, 2230561, 2232801, 2232833, 2232865]),
          new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 23068672]),
          new Uint32Array([6291456, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([2238689, 2238721, 2238753, 2238785, 2238817, 2238849, 2238881, 2238913, 2238945, 2238977, 2239009, 2239041, 2214977, 2239073, 2239105, 2239137]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
          new Uint32Array([2134083, 2134179, 2134275, 2134275, 2134371, 2134371, 2134467, 2134563, 2134563, 2134659, 2134755, 2134755, 2134851, 2134851, 2134947, 2135043]),
          new Uint32Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10501475, 10501571, 10501667, 10501763]),
          new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 23068672, 23068672, 23068672, 23068672, 23068672]),
          new Uint32Array([2217953, 2217985, 2218017, 2218049, 2218081, 2218113, 2218145, 2218177, 2218209, 2218241, 2218273, 2218305, 2218337, 2218369, 2218401, 2218433]),
          new Uint32Array([2136001, 2097153, 2136097, 2107681, 2134561, 2132833, 2160705, 2133153, 2162689, 2134945, 2161217, 2135713, 0, 0, 0, 0]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 10503971, 10504034, 10504067, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([2121795, 2126786, 2126882, 2108514, 2127074, 2130818, 2130914, 2131010, 2131106, 2131202, 2131298, 2110722, 2110626, 2150594, 2150658, 2150722]),
          new Uint32Array([2234529, 2242049, 2239937, 2242081, 2242113, 2242145, 2242177, 2242209, 2240097, 2242241, 2238401, 2242273, 2240129, 2232801, 2242305, 2240161]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 0, 0, 0, 6291456, 0, 0, 6291456]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0]),
          new Uint32Array([2245089, 2220161, 2244289, 2244321, 2243905, 2245121, 2223809, 2101409, 2106209, 2245153, 2101633, 2122593, 2245185, 2105441, 2101953, 2100513]),
          new Uint32Array([23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0]),
          new Uint32Array([2102465, 2098337, 2103169, 2103297, 2103425, 2103553, 2103681, 2103809, 2103937, 2102530, 2102882, 2103010, 2103138, 2103266, 2103394, 2103522]),
          new Uint32Array([2233409, 2218465, 2233441, 2233473, 2233505, 2233537, 2233569, 2233601, 2233633, 2233665, 2233697, 2233729, 2233761, 2233793, 2233825, 2233857]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456]),
          new Uint32Array([2107329, 2190625, 2110049, 2191553, 2203969, 2204001, 2114337, 2110177, 2110145, 2204033, 2192001, 2102593, 2204065, 2195105, 2195137, 2195169]),
          new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 0, 23068672, 23068672, 23068672, 0, 23068672, 23068672, 23068672, 23068672, 0, 0]),
          new Uint32Array([2198401, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 2198433, 6291456, 2198465, 6291456, 2198497, 6291456]),
          new Uint32Array([2194145, 6291456, 2194177, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2194209, 2194241, 6291456, 2194273, 2194305, 6291456]),
          new Uint32Array([2235745, 2235777, 2235809, 2235841, 2220065, 2235873, 2235905, 2235937, 2235969, 2236001, 2236033, 2236065, 2236097, 2236129, 2236161, 2236193]),
          new Uint32Array([23068672, 6291456, 6291456, 6291456, 6291456, 2144194, 2144258, 2144322, 2144386, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([2195329, 2153665, 2195361, 2195393, 2195425, 2195457, 2195489, 2195265, 2195521, 2195553, 2195585, 2195617, 2195649, 2195681, 2149185, 2245697]),
          new Uint32Array([10491716, 10491844, 10491972, 10492100, 10492228, 10492356, 10492484, 10492612, 0, 0, 0, 0, 0, 0, 0, 0]),
          new Uint32Array([2225953, 6291456, 2225985, 6291456, 2226017, 6291456, 2226049, 6291456, 2226081, 6291456, 2226113, 6291456, 2226145, 6291456, 2226177, 6291456]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 0, 0, 6291456, 0]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2227457, 6291456, 6291456, 0, 0, 0, 0]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]),
          new Uint32Array([2198785, 6291456, 2198817, 6291456, 2198849, 6291456, 2198881, 6291456, 2198913, 6291456, 2198945, 6291456, 2198977, 6291456, 2199009, 6291456]),
          new Uint32Array([2243105, 2243105, 2243137, 2243137, 2243137, 2243137, 2243169, 2243169, 2243169, 2243169, 2243201, 2243201, 2243201, 2243201, 2243233, 2243233]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 6291456, 23068672]),
          new Uint32Array([2190977, 6291456, 2191009, 6291456, 2191041, 6291456, 2191073, 6291456, 2191105, 6291456, 2191137, 6291456, 2191169, 6291456, 2191201, 6291456]),
          new Uint32Array([2207073, 6291456, 2207105, 6291456, 2207137, 6291456, 6291456, 6291456, 6291456, 6291456, 2146946, 2206305, 6291456, 6291456, 2143106, 6291456]),
          new Uint32Array([23068672, 23068672, 23068672, 0, 0, 0, 0, 23068672, 23068672, 0, 0, 23068672, 23068672, 23068672, 0, 0]),
          new Uint32Array([2149185, 2245697, 2148609, 2195105, 2195137, 2195169, 2195201, 2195233, 2148929, 2195265, 2144097, 2195297, 2195329, 2153665, 2195361, 2195393]),
          new Uint32Array([2195489, 2195265, 2195521, 2195553, 2195585, 2195617, 2195649, 2195681, 2149185, 2245697, 2148609, 2195105, 2195137, 2195169, 2195201, 2195233]),
          new Uint32Array([6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 6291456, 23068672, 23068672]),
          new Uint32Array([6291456, 6291456, 23068672, 23068672, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([6291456, 6291456, 2146050, 6291456, 6291456, 6291456, 6291456, 2146114, 6291456, 6291456, 6291456, 6291456, 2146178, 6291456, 6291456, 6291456]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2102340, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 10485857]),
          new Uint32Array([2118369, 2213761, 2213793, 2213825, 2213857, 2213889, 2118465, 2213921, 2213953, 2213985, 2214017, 2119041, 2214049, 2214081, 2214113, 2214145]),
          new Uint32Array([23068672, 23068672, 23068672, 23068672, 6291456, 23068672, 23068672, 23068672, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0]),
          new Uint32Array([2115009, 2110337, 2115201, 2115297, 2245633, 2245665, 0, 0, 2148609, 2195105, 2195137, 2195169, 2195201, 2195233, 2148929, 2195265]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 0, 0, 0, 0]),
          new Uint32Array([2102561, 2102625, 0, 0, 2103297, 2103425, 2103553, 2103681, 2103809, 2103937, 10598561, 2209985, 10504033, 10491329, 10491425, 2114145]),
          new Uint32Array([2195937, 6291456, 2195969, 6291456, 2196001, 6291456, 2196033, 6291456, 2196065, 6291456, 2196097, 6291456, 2196129, 6291456, 2196161, 6291456]),
          new Uint32Array([2243841, 2243841, 2243873, 2243873, 2159969, 2159969, 2159969, 2159969, 2097217, 2097217, 2159554, 2159554, 2159618, 2159618, 2159682, 2159682]),
          new Uint32Array([2254273, 2185666, 2254305, 2254337, 2254369, 2185730, 2254401, 2254433, 2254465, 2254497, 2254529, 2185794, 2254561, 2254593, 2254625, 2254657]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 2213697]),
          new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]),
          new Uint32Array([2102561, 2102465, 2098337, 2103169, 2103297, 2103425, 2103553, 2103681, 2103809, 2103937, 10503969, 10583521, 10633217, 10504033, 10633249, 10538177]),
          new Uint32Array([2118369, 2118465, 2118561, 2118657, 2118753, 2118849, 2118945, 2119041, 2119137, 2119233, 2119329, 2119425, 2119521, 2119617, 2119713, 2119809]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2220193, 6291456, 2119233, 2220225, 2220257, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([6291456, 23068672, 23068672, 23068672, 0, 23068672, 23068672, 0, 0, 0, 0, 0, 23068672, 23068672, 23068672, 23068672]),
          new Uint32Array([0, 0, 23068672, 23068672, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
          new Uint32Array([2097281, 2107649, 2097729, 2107809, 0, 2097601, 2162977, 2107745, 2135137, 2097505, 2107617, 2097185, 2097697, 2137633, 2097633, 2097441]),
          new Uint32Array([0, 23068672, 23068672, 18923522, 23068672, 18923586, 18923650, 18885955, 18923714, 18886051, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]),
          new Uint32Array([2232897, 2232929, 2232961, 2232993, 2233025, 2233057, 2233089, 2233121, 2233153, 2233185, 2233217, 2233249, 2233281, 2233313, 2233345, 2233377]),
          new Uint32Array([2114337, 2114433, 2098177, 2098305, 2110177, 2110145, 2102593, 2115009, 2110337, 2115201, 2115297, 14680064, 14680064, 14680064, 14680064, 14680064]),
          new Uint32Array([2226337, 6291456, 2226369, 6291456, 2226401, 6291456, 2226433, 6291456, 6291456, 6291456, 6291456, 2226465, 6291456, 2204225, 6291456, 6291456]),
          new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0]),
          new Uint32Array([2242305, 2242337, 2218177, 2187330, 2256769, 2256801, 2256833, 2256865, 2187394, 2187458, 2256897, 2256929, 2256961, 2187522, 2256993, 2242369]),
          new Uint32Array([2110371, 2110467, 2102468, 2110563, 2110659, 2110755, 2110851, 2110947, 2111043, 2111139, 2111235, 2111331, 2111427, 2111523, 2111619, 2102466]),
          new Uint32Array([2103297, 2103425, 2103553, 2103681, 2103809, 2103937, 2102561, 2102465, 2098337, 2103169, 2103297, 2103425, 2103553, 2103681, 2103809, 2103937]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2149762, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
          new Uint32Array([2192897, 6291456, 2192929, 6291456, 2192961, 6291456, 2192993, 6291456, 2193025, 6291456, 2193057, 6291456, 2193089, 6291456, 2193121, 6291456]),
          new Uint32Array([6291456, 6291456, 23068672, 23068672, 23068672, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
          new Uint32Array([2207681, 6291456, 2207713, 6291456, 2207745, 6291456, 2207777, 6291456, 2207809, 6291456, 2207841, 6291456, 2207873, 6291456, 2207905, 6291456]),
          new Uint32Array([2161794, 2162050, 2140514, 2162114, 2162178, 2097666, 2097186, 2097474, 2163586, 2134306, 2163650, 2163714, 2138018, 2163778, 2162306, 2162370]),
          new Uint32Array([2237153, 2237185, 2237217, 2237249, 2237281, 2237313, 2237345, 2217121, 2237377, 2237409, 2237441, 2237473, 2237505, 2237537, 2237569, 2237601]),
          new Uint32Array([2249665, 2249697, 2249729, 2249761, 2249793, 2249825, 2249857, 2249889, 2249921, 2182978, 2249953, 2249985, 2250017, 2250049, 2231201, 2183042]),
          new Uint32Array([6291456, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([6291456, 6291456, 2148546, 2148610, 2148674, 0, 6291456, 2148738, 2209473, 2209505, 2148545, 2148673, 2148610, 10497634, 2144097, 10497634]),
          new Uint32Array([2208193, 6291456, 2208225, 6291456, 2208257, 6291456, 2208289, 6291456, 2208321, 6291456, 2208353, 6291456, 2208385, 6291456, 2208417, 6291456]),
          new Uint32Array([2155522, 2155586, 0, 2155650, 2155714, 2155778, 2107460, 0, 2155842, 2155906, 2155970, 2127170, 2156034, 2156098, 2128130, 2156162]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0]),
          new Uint32Array([23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([0, 23068672, 23068672, 23068672, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456]),
          new Uint32Array([2103809, 2103937, 2102561, 2102465, 2098337, 2103169, 2103297, 2103425, 2103553, 2103681, 2103809, 2103937, 2102561, 2102465, 2098337, 2103169]),
          new Uint32Array([23068672, 23068672, 0, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 0, 0, 0, 0, 0, 0, 0]),
          new Uint32Array([2102625, 2102626, 2102627, 2150146, 2102593, 2102594, 2102595, 2102596, 2150210, 2110337, 2111714, 2111715, 2107297, 2107233, 2098241, 2107329]),
          new Uint32Array([2241825, 2185026, 2185090, 2185154, 2185218, 2253921, 2253953, 2253953, 2241857, 2242689, 2253985, 2254017, 2254049, 2185282, 2254081, 2231777]),
          new Uint32Array([0, 0, 0, 0, 10531586, 10497251, 2148673, 2143329, 2194977, 2148993, 2195009, 0, 2195041, 0, 2195073, 2149249]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([2196929, 2196993, 2197313, 2197409, 2197441, 2197441, 2197697, 2197921, 2202369, 0, 0, 0, 0, 0, 0, 0]),
          new Uint32Array([2183746, 2252321, 2252353, 2252385, 2252417, 2233409, 2252449, 2183810, 2183874, 2183938, 2252481, 2184002, 2252513, 2252545, 2252577, 2252609]),
          new Uint32Array([6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 23068672, 23068672, 23068672, 23068672, 6291456]),
          new Uint32Array([2102625, 2102625, 2107297, 2107297, 6291456, 2114145, 2149954, 6291456, 6291456, 2114337, 2114433, 2098177, 2098177, 2098177, 6291456, 6291456]),
          new Uint32Array([2107233, 2098241, 2110209, 2110273, 2107553, 2113569, 2102625, 2113761, 2107201, 2107297, 2107329, 2114145, 2110049, 2114337, 2114433, 2098177]),
          new Uint32Array([2164098, 2132834, 2132930, 2133122, 2133218, 2164162, 2160770, 2133922, 2132866, 2132962, 2107746, 2133474, 2133154, 2133890, 2133794, 2139266]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 0]),
          new Uint32Array([6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 0, 0, 0]),
          new Uint32Array([2107553, 2113569, 2102625, 2113761, 2107201, 2107297, 2107329, 2114145, 2110049, 2114337, 2114433, 2098177, 2098305, 2110177, 2110145, 2102593]),
          new Uint32Array([2196353, 2196385, 2196417, 2196449, 2196481, 2196513, 2196545, 2196577, 2196609, 2196641, 2196673, 2196705, 2196737, 2196769, 2196801, 2196833]),
          new Uint32Array([2160642, 2160706, 2160770, 2160834, 2160898, 2133922, 2132866, 2132962, 2107746, 2133474, 2160962, 2133154, 2133890, 2133794, 2139266, 2134082]),
          new Uint32Array([2102561, 2102465, 2098337, 2103169, 2103297, 2103425, 2103553, 2103681, 2103809, 2103937, 10598561, 2209985, 10504033, 10491329, 10491425, 0]),
          new Uint32Array([0, 0, 0, 0, 0, 2227361, 6291456, 6291456, 2190177, 2190753, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([6291456, 6291456, 4292673, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2195777]),
          new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]),
          new Uint32Array([10598465, 2098209, 2112993, 2107233, 2098241, 2110209, 2110273, 2107553, 2113569, 2102625, 2113761, 2107201, 2107297, 2107329, 2114145, 2110049]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 23068672, 6291456, 23068672, 23068672]),
          new Uint32Array([2204545, 2192065, 2204577, 2204609, 2192257, 2204641, 2194401, 2192385, 2204673, 2192417, 2194433, 2115297, 2204705, 2204737, 2192513, 2195265]),
          new Uint32Array([2244801, 2166241, 2166241, 2166305, 2166305, 2244833, 2244833, 2166369, 2166369, 2159553, 2159553, 2159553, 2159553, 2097281, 2097281, 2107649]),
          new Uint32Array([0, 0, 0, 0, 6291456, 6291456, 6291456, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([2227489, 2227521, 2227553, 2227585, 2227617, 2227649, 2227681, 2227713, 2227745, 2227777, 2227809, 2227841, 2227873, 2227905, 2227937, 2227969]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 23068672, 0, 0, 0, 0, 23068672]),
          new Uint32Array([2148929, 2195265, 2144097, 2195297, 2195329, 2153665, 2195361, 2195393, 2195425, 2195457, 2195489, 2195521, 2195521, 2195553, 2195585, 2195617]),
          new Uint32Array([2220641, 2115969, 2116065, 2220673, 2220705, 2116161, 2220737, 2116257, 2116353, 2220769, 2116449, 2116545, 2116641, 2116737, 2116833, 0]),
          new Uint32Array([2214177, 2214209, 2214241, 2214273, 2214305, 2214337, 2214369, 2119233, 2214401, 2214433, 2214465, 2214497, 2214529, 2214561, 2214593, 2119809]),
          new Uint32Array([2238113, 2241633, 2241665, 2241697, 2241729, 2241761, 2238145, 2241793, 2241825, 2241857, 2241889, 2241921, 2241953, 2239809, 2241985, 2242017]),
          new Uint32Array([2110049, 2114337, 2114433, 2098177, 2098305, 2110177, 2110145, 2102593, 2115009, 2110337, 2115201, 2115297, 2098209, 0, 2107233, 2098241]),
          new Uint32Array([2162370, 2162434, 2137442, 2162498, 2162562, 2139042, 2133666, 2160930, 2137026, 2162626, 2139810, 2162690, 2162754, 2162818, 10520579, 10520675]),
          new Uint32Array([6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2147009, 2147073, 2147137, 2147201, 2147265, 2147329, 2147393, 2147457]),
          new Uint32Array([6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 2144450, 2144514, 2144578, 2144642, 2144706, 2144770, 2144834, 2144898]),
          new Uint32Array([23068672, 23068672, 0, 23068672, 23068672, 0, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 16777216, 16777216, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]),
          new Uint32Array([23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([6291456, 6291456, 6291456, 2102338, 2102339, 6291456, 2109698, 2109699, 6291456, 6291456, 6291456, 6291456, 10538050, 6291456, 10538114, 6291456]),
          new Uint32Array([6291456, 2192673, 6291456, 2192705, 6291456, 2192737, 6291456, 2192769, 6291456, 2192801, 6291456, 2192833, 6291456, 6291456, 2192865, 6291456]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([2195585, 2195617, 2195649, 2195681, 2149185, 2245697, 2148609, 2195105, 2195137, 2195169, 2195201, 2195233, 2148929, 2195265, 2144097, 2195297]),
          new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 18924098, 23068672, 23068672, 23068672, 0, 6291456, 6291456]),
          new Uint32Array([2210113, 2210145, 2210177, 2210209, 2210241, 2210273, 2210305, 2210337, 2210369, 2210401, 2210433, 2210465, 2210497, 2210529, 2210561, 2210593]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 23068672]),
          new Uint32Array([0, 0, 0, 0, 0, 0, 0, 2202081, 0, 0, 0, 0, 0, 2202113, 0, 0]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([2165762, 2164610, 2164674, 2164738, 2164802, 2164866, 2164930, 2164994, 2165058, 2165122, 2165186, 2134978, 2136418, 2134018, 2134690, 2138722]),
          new Uint32Array([2208449, 6291456, 2208481, 6291456, 2208513, 6291456, 2208545, 6291456, 2208577, 6291456, 2208609, 6291456, 2208641, 6291456, 2208673, 6291456]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([2174338, 2174402, 2174466, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
          new Uint32Array([2218305, 2142561, 2246529, 2246561, 2246593, 2246625, 2120097, 2119329, 2246657, 2246689, 2246721, 2246753, 0, 0, 0, 0]),
          new Uint32Array([2200289, 6291456, 2200321, 6291456, 2200353, 6291456, 2200385, 6291456, 2200417, 6291456, 2200449, 6291456, 2200481, 6291456, 2200513, 6291456]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 2143426, 2143426, 2143426, 2143490, 2143490, 2143490, 2143554, 2143554, 2143554, 2192609, 6291456, 2192641]),
          new Uint32Array([23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([10633377, 2098209, 2112993, 2107233, 2098241, 2110209, 2110273, 2107553, 2113569, 2102625, 2113761, 2107201, 2107297, 2107329, 2114145, 2110049]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 6291456, 6291456]),
          new Uint32Array([6291456, 6291456, 6291456, 2213729, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
          new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2208897, 2208929, 2208961, 2208993, 2209025, 2209057, 2209089, 2209121]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([23068672, 23068672, 23068672, 0, 0, 0, 23068672, 23068672, 23068672, 0, 23068672, 23068672, 23068672, 23068672, 0, 0]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 23068672, 6291456]),
          new Uint32Array([2200033, 6291456, 2200065, 6291456, 2200097, 6291456, 2200129, 6291456, 2200161, 6291456, 2200193, 6291456, 2200225, 6291456, 2200257, 6291456]),
          new Uint32Array([23068672, 23068672, 23068672, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456]),
          new Uint32Array([6291456, 6291456, 23068672, 6291456, 6291456, 6291456, 23068672, 6291456, 6291456, 6291456, 6291456, 23068672, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([23068672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
          new Uint32Array([2219457, 2219489, 2219521, 2219553, 2219585, 2219617, 2219649, 2219681, 2219713, 2219745, 2219777, 2219809, 2219841, 2219873, 2219905, 2219937]),
          new Uint32Array([6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([2097185, 2097697, 2097697, 2097697, 2097697, 2137633, 2137633, 2137633, 2137633, 2097377, 2097377, 2097377, 2097377, 2097601, 2097601, 2097217]),
          new Uint32Array([2246209, 2246241, 2216577, 2246273, 2246305, 2246337, 2246369, 2246401, 2246433, 2118369, 2118561, 2246465, 2223457, 2222849, 2223489, 2246497]),
          new Uint32Array([2097217, 2097505, 2097505, 2097505, 2097505, 2166210, 2166210, 2166274, 2166274, 2166338, 2166338, 2097858, 2097858, 0, 0, 2097152]),
          new Uint32Array([23068672, 6291456, 23068672, 23068672, 23068672, 6291456, 6291456, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 0]),
          new Uint32Array([2229025, 2229057, 2229089, 2229121, 2229153, 2229185, 2229217, 2229249, 2229281, 2229313, 2229345, 2229377, 2229409, 2229441, 2229473, 2229505]),
          new Uint32Array([2100901, 2105924, 2123523, 2101123, 2123619, 2152450, 2152514, 2100674, 2152578, 2123715, 2123811, 2101061, 2123907, 2106052, 2101221, 2124003]),
          new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]),
          new Uint32Array([2098241, 2110209, 2191713, 2107553, 2113569, 2102625, 2113761, 2107201, 2107297, 2107329, 2114145, 6291456, 2110049, 2193921, 2114337, 2098177]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]),
          new Uint32Array([2166402, 2166466, 2166530, 2166594, 2166658, 2166722, 2166786, 2166850, 2166914, 2166978, 2167042, 2167106, 2167170, 2167234, 2167298, 2167362]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 23068672, 23068672, 23068672]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0]),
          new Uint32Array([2230945, 2230977, 2231009, 2231041, 2231073, 2231105, 2231137, 2231169, 2231201, 2231233, 2231265, 2231297, 2231329, 2231361, 2231393, 2231425]),
          new Uint32Array([2189569, 6291456, 2189601, 6291456, 2189633, 6291456, 2189665, 6291456, 2189697, 6291456, 2189729, 6291456, 2189761, 6291456, 2189793, 6291456]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456, 23068672, 23068672, 6291456]),
          new Uint32Array([2110145, 2102593, 2115009, 2110337, 2115201, 2115297, 2098209, 2112993, 2107233, 2098241, 2110209, 2110273, 2107553, 2113569, 2102625, 2113761]),
          new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 23068672, 23068672, 23068672, 0, 23068672, 23068672, 23068672, 0, 0]),
          new Uint32Array([2098209, 2110209, 2110049, 2110337, 2191745, 2113569, 2107201, 2107297, 2107329, 2114145, 2114337, 2098305, 2110177, 0, 0, 0]),
          new Uint32Array([2202401, 2202433, 2202465, 2202497, 2202529, 2202561, 2202593, 2202625, 2202657, 2202689, 2202721, 2202753, 2202145, 2202785, 2202817, 2202849]),
          new Uint32Array([2110209, 2110273, 0, 2107329, 2110049, 2157761, 2157953, 2158017, 2158081, 2102625, 6291456, 2110275, 2195457, 2195137, 2195137, 2195457]),
          new Uint32Array([2205793, 6291456, 2205825, 6291456, 2205857, 6291456, 2205889, 6291456, 2205921, 6291456, 2205953, 6291456, 2205985, 6291456, 2206017, 6291456]),
          new Uint32Array([23068672, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
          new Uint32Array([6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6291456]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 18874368, 18874368, 18874368, 0, 0]),
          new Uint32Array([2167426, 2167490, 2167554, 2167618, 2167682, 2167746, 2167810, 2167874, 2167938, 2168002, 2168066, 2168130, 2168194, 2168258, 2168322, 2168386]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([2136001, 2097153, 2136097, 0, 2134561, 2132833, 2160705, 2133153, 0, 2134945, 0, 2135713, 0, 0, 0, 0]),
          new Uint32Array([0, 2199297, 6291456, 2199329, 6291456, 2199361, 6291456, 2199393, 6291456, 2199425, 6291456, 2199457, 6291456, 2199489, 6291456, 6291456]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([2128035, 2127394, 2128131, 2128227, 2128323, 2127490, 2128419, 2107331, 2107332, 2127202, 2128515, 2128611, 2128707, 2098179, 2098181, 2098182]),
          new Uint32Array([23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
          new Uint32Array([6291456, 23068672, 6291456, 2145730, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 0, 0]),
          new Uint32Array([10498403, 10498499, 2107233, 2149826, 6291456, 10498595, 10498691, 2191777, 6291456, 2149890, 2107553, 2113569, 2113569, 2113569, 2113569, 2190177]),
          new Uint32Array([2222337, 2222369, 2222401, 2222433, 2222465, 2222497, 2222529, 2222561, 2222593, 2222625, 2222657, 2222689, 2222721, 2222753, 2222785, 0]),
          new Uint32Array([2242977, 2242977, 2243009, 2243009, 2243009, 2243009, 2243041, 2243041, 2243041, 2243041, 2243073, 2243073, 2243073, 2243073, 2243105, 2243105]),
          new Uint32Array([6291456, 6291456, 2098337, 2103169, 10531586, 2153665, 6291456, 6291456, 10531650, 2102465, 2110049, 6291456, 2108355, 2108451, 2108547, 6291456]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0]),
          new Uint32Array([2215617, 2215649, 2215681, 2215713, 2215745, 2215777, 2215809, 2119905, 2215841, 2119329, 2119617, 2215873, 2215905, 2215937, 2215969, 2216001]),
          new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 23068672, 23068672, 0, 0, 23068672, 23068672, 23068672, 23068672, 6291456]),
          new Uint32Array([2223393, 2121537, 2223425, 2153505, 2222817, 2222849, 2222881, 2223457, 2223489, 2223521, 2223553, 2120961, 2121057, 2121153, 2121249, 2121345]),
          new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672]),
          new Uint32Array([0, 10538049, 10633505, 10633089, 10633313, 10633345, 10633121, 10633537, 10491329, 10491425, 10633153, 10598561, 10569441, 2244577, 2220161, 10498433]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]),
          new Uint32Array([2195649, 2195681, 2149185, 2245729, 2195201, 2195265, 2195297, 2195617, 2195489, 2195457, 2195873, 2195873, 0, 0, 2102561, 2102465]),
          new Uint32Array([2212737, 6291456, 2212769, 6291456, 2212801, 6291456, 2212833, 6291456, 2212865, 6291456, 2212897, 6291456, 2212929, 6291456, 2212961, 6291456]),
          new Uint32Array([0, 6291456, 6291456, 0, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([2223585, 2150914, 2150978, 2151042, 2151106, 2151170, 2108418, 2151234, 2150690, 2151298, 2151362, 2151426, 2151490, 2151554, 2151618, 2151682]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0]),
          new Uint32Array([2237633, 2237665, 2237697, 2237729, 2237761, 2237793, 2237825, 2237857, 2217921, 2237889, 2218017, 2237921, 2237953, 2237985, 6291456, 6291456]),
          new Uint32Array([2115201, 0, 2098209, 2112993, 2107233, 2098241, 2110209, 2110273, 2107553, 2113569, 2102625, 2113761, 2107201, 2107297, 2107329, 2114145]),
          new Uint32Array([2221825, 2221857, 2221889, 2221921, 2221953, 2221985, 2222017, 2222049, 2222081, 2222113, 2222145, 2222177, 2222209, 2222241, 2222273, 2222305]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6291456]),
          new Uint32Array([0, 2107649, 2097729, 0, 2097377, 0, 0, 2107745, 0, 2097505, 2107617, 2097185, 2097697, 2137633, 2097633, 2097441]),
          new Uint32Array([10554498, 2165954, 10520578, 6291456, 10520674, 0, 10520770, 2132546, 10520866, 2132642, 10520962, 2132738, 10521058, 2166018, 10554690, 2166146]),
          new Uint32Array([2129506, 2129602, 2129698, 2129794, 2129890, 2129986, 2130082, 2130178, 2130274, 2129379, 2129475, 2129571, 2129667, 2129763, 2129859, 2129955]),
          new Uint32Array([10503011, 10503107, 10503203, 10503299, 10503395, 10503491, 10503587, 10503683, 10503779, 10503875, 2141859, 2107233, 2098177, 2155778, 2181442, 6291456]),
          new Uint32Array([2144097, 2195297, 2195329, 2153665, 2195361, 2195393, 2195425, 2195457, 2195489, 2195265, 2195521, 2195553, 2195585, 2195617, 2195649, 2195681]),
          new Uint32Array([2221345, 2221377, 2221409, 2221441, 0, 2221473, 2221505, 2221537, 2221569, 2221601, 2221633, 2221665, 2221697, 2221729, 2221761, 2221793]),
          new Uint32Array([10485857, 6291456, 2220161, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([2217505, 2217537, 2217569, 2121633, 2121729, 2217601, 2217633, 2217665, 2217697, 2217729, 2217761, 2217793, 2217825, 2217857, 2217889, 2217921]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 10532290, 10532354, 10532418, 10532482, 10532546, 10532610, 6291456, 6291456]),
          new Uint32Array([6291456, 2148673, 6291456, 2194977, 6291456, 2148993, 6291456, 2195009, 6291456, 2195041, 6291456, 2195073, 6291456, 2149249, 0, 0]),
          new Uint32Array([23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 6291456, 23068672, 23068672]),
          new Uint32Array([14680064, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 14680064, 14680064]),
          new Uint32Array([2177602, 2177666, 2177730, 2177794, 2177858, 2177922, 2177986, 2178050, 2178114, 2178178, 2178242, 2178306, 2178370, 2178434, 2178498, 2178562]),
          new Uint32Array([2233889, 2214753, 2233921, 2233953, 2233985, 2234017, 2234049, 2234081, 2234113, 2234145, 2214241, 2234177, 2234209, 2234241, 2234273, 2234305]),
          new Uint32Array([2187586, 2187650, 2257025, 2257057, 2257089, 2187714, 2257121, 2257153, 2257185, 2257217, 2257249, 2257281, 2257313, 2187778, 2257345, 2257377]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 0, 0]),
          new Uint32Array([6291456, 6291456, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
          new Uint32Array([2132835, 2132931, 2132931, 2133027, 2133123, 2133219, 2133315, 2133411, 2133507, 2133507, 2133603, 2133699, 2133795, 2133891, 2133987, 2134083]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672]),
          new Uint32Array([0, 10569410, 10569474, 10569538, 10569602, 10569666, 10569730, 10569794, 10569858, 10569922, 10569986, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([6291456, 6291456, 2224993, 6291456, 2225025, 6291456, 2225057, 6291456, 2225089, 6291456, 2225121, 6291456, 2225153, 6291456, 2225185, 6291456]),
          new Uint32Array([2215297, 2183106, 2183106, 2250081, 2250113, 2250113, 2250145, 2183170, 2183234, 2250177, 2250209, 2250241, 2250273, 2250305, 2250337, 2250369]),
          new Uint32Array([6291456, 2143618, 2143618, 2143618, 2193153, 6291456, 2193185, 2193217, 2193249, 6291456, 2193281, 6291456, 2193313, 6291456, 2193345, 6291456]),
          new Uint32Array([2201441, 2201473, 2201505, 2201537, 2157185, 2201569, 2157217, 2201601, 2201633, 2201665, 2201697, 2201729, 2201761, 2201793, 2157377, 2201825]),
          new Uint32Array([0, 0, 2137347, 2137443, 2137539, 2137635, 2137731, 2137827, 2137827, 2137923, 2138019, 2138115, 2138211, 2138211, 2138307, 2138403]),
          new Uint32Array([2195201, 2195265, 2195297, 2195617, 2195489, 2195457, 2148609, 2195105, 2195137, 2195169, 2195201, 2195233, 2148929, 2195265, 2144097, 2195297]),
          new Uint32Array([23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([2190081, 6291456, 2190113, 6291456, 2190145, 6291456, 2190177, 6291456, 2190209, 6291456, 2190241, 6291456, 2190273, 6291456, 2190305, 6291456]),
          new Uint32Array([0, 0, 0, 2157186, 2157250, 2157314, 2157378, 2157442, 0, 0, 0, 0, 0, 2157506, 23068672, 2157570]),
          new Uint32Array([10485857, 10485857, 10485857, 10485857, 10485857, 10485857, 10485857, 10485857, 10485857, 10485857, 10485857, 2097152, 4194304, 4194304, 0, 0]),
          new Uint32Array([0, 23068672, 23068672, 23068672, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456]),
          new Uint32Array([6291456, 6291456, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([2104516, 2104644, 2104772, 2122371, 2104900, 2122467, 2122563, 2100101, 2105028, 2122659, 2122755, 2122851, 2105156, 2105284, 2122947, 2123043]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2210049, 2210081, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 23068672, 23068672, 23068672, 23068672, 23068672]),
          new Uint32Array([2242849, 2242849, 2242881, 2242881, 2242881, 2242881, 2242913, 2242913, 2242913, 2242913, 2242945, 2242945, 2242945, 2242945, 2242977, 2242977]),
          new Uint32Array([6291456, 0, 6291456, 2145154, 0, 6291456, 2145218, 0, 6291456, 6291456, 0, 0, 23068672, 0, 23068672, 23068672]),
          new Uint32Array([2188609, 2188641, 2188673, 2188705, 2188737, 2188769, 2188801, 2188833, 2188865, 2188897, 2188929, 2188961, 2188993, 2189025, 2189057, 2189089]),
          new Uint32Array([2241633, 2253665, 2253697, 2253729, 2253761, 2184642, 2253793, 2184706, 2232961, 2184770, 2253825, 2184834, 2184898, 2184962, 2253857, 2253889]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456]),
          new Uint32Array([2241345, 2238049, 2231233, 2241377, 2241409, 2215937, 2233409, 2236033, 2241441, 2241473, 2239393, 2241505, 2239425, 2241537, 2241569, 2241601]),
          new Uint32Array([2197377, 2197409, 2197441, 2197473, 2197505, 2197537, 2197569, 2197601, 2197633, 2197665, 2197697, 2197729, 2197761, 2197793, 2197825, 2197857]),
          new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 0, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0]),
          new Uint32Array([2175554, 2175618, 2175682, 2175746, 2175810, 2175874, 2175938, 2176002, 2176066, 2176130, 2176194, 2176258, 2176322, 2176386, 2176450, 2176514]),
          new Uint32Array([2098337, 2103169, 2103297, 2103425, 2103553, 2103681, 2103809, 2103937, 2102561, 2102465, 2098337, 2103169, 2103297, 2103425, 2103553, 2103681]),
          new Uint32Array([2114433, 2098177, 2098305, 2110177, 2110145, 2102593, 2115009, 2110337, 2115201, 2115297, 2102561, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([10537410, 10497539, 2148866, 2148930, 2148994, 0, 6291456, 2149058, 2209537, 2194977, 2148865, 2148993, 2148930, 10497635, 10497731, 10497827]),
          new Uint32Array([2162977, 2097633, 2097633, 2097633, 2097633, 2134561, 2134561, 2134561, 2134561, 2097153, 2097153, 2097153, 2097153, 2134945, 2134945, 2134945]),
          new Uint32Array([0, 2244001, 2244033, 10632673, 10632673, 10491329, 10491425, 10632705, 10632737, 2141857, 2141921, 2244161, 2244193, 2244225, 2244257, 2210049]),
          new Uint32Array([6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]),
          new Uint32Array([0, 23068672, 23068672, 23068672, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([2102017, 2100385, 2098049, 2223681, 2125345, 2125537, 2223713, 2100353, 2102049, 2098145, 2102177, 2098017, 2100481, 2100705, 2150369, 2150433]),
          new Uint32Array([6291456, 0, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0]),
          new Uint32Array([2162818, 2163842, 2163906, 2137026, 2138082, 2162626, 2139810, 2160066, 2160130, 2163970, 2160194, 2164034, 2160322, 2141378, 2138306, 2160386]),
          new Uint32Array([2124771, 2124867, 2124963, 2106436, 2125059, 2125155, 2125251, 2101861, 2106564, 2102018, 2102021, 2106690, 2106692, 2098052, 2125347, 2125443]),
          new Uint32Array([2212225, 6291456, 2212257, 6291456, 2212289, 6291456, 2212321, 6291456, 2212353, 6291456, 2212385, 6291456, 2212417, 6291456, 2212449, 6291456]),
          new Uint32Array([2164034, 2160386, 2164098, 2133218, 2164162, 2160770, 2164418, 2134082, 2164482, 2134754, 2164546, 2162050, 2140514, 2097666, 2138018, 2164290]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2150274, 6291456, 6291456, 6291456]),
          new Uint32Array([6291456, 23068672, 23068672, 6291456, 23068672, 23068672, 6291456, 23068672, 0, 0, 0, 0, 0, 0, 0, 0]),
          new Uint32Array([2223841, 6291456, 2223873, 6291456, 2223905, 6291456, 2223937, 6291456, 2223969, 6291456, 2202369, 6291456, 2224001, 6291456, 2224033, 6291456]),
          new Uint32Array([10506947, 10507043, 10507139, 10507235, 10507331, 10507427, 10507523, 10507619, 10507715, 10507811, 10507907, 10508003, 10508099, 10508195, 10508291, 10508387]),
          new Uint32Array([6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([2147010, 2147074, 2147138, 2147202, 2147266, 2147330, 2147394, 2147458, 2147010, 2147074, 2147138, 2147202, 2147266, 2147330, 2147394, 2147458]),
          new Uint32Array([2204769, 6291456, 2204801, 6291456, 2204833, 6291456, 2204865, 6291456, 2204897, 6291456, 2204929, 6291456, 2204961, 6291456, 2204993, 6291456]),
          new Uint32Array([2136291, 2136387, 2136483, 2136579, 2136579, 2136675, 2136675, 2136771, 2136771, 2136867, 2107715, 2136963, 2137059, 2137155, 2133443, 2137251]),
          new Uint32Array([2200801, 6291456, 2200833, 6291456, 2200865, 6291456, 2200897, 6291456, 2200929, 6291456, 2200961, 6291456, 2200993, 6291456, 2201025, 6291456]),
          new Uint32Array([23068672, 18885986, 23068672, 23068672, 23068672, 6291456, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672]),
          new Uint32Array([2127202, 2153602, 2153666, 2129250, 2153730, 2153794, 2153858, 2153922, 2107235, 2107204, 2153986, 2154050, 2154114, 2154178, 2154242, 2107522]),
          new Uint32Array([2254689, 2254721, 2185858, 2185922, 2254753, 2185986, 2254785, 2186050, 2254817, 2254849, 2239937, 2186114, 2186178, 2254881, 2186242, 2254913]),
          new Uint32Array([2243745, 2243745, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 0, 0]),
          new Uint32Array([2195201, 2195233, 2148929, 2195265, 2144097, 2195297, 2195329, 2153665, 2195361, 2195393, 2195425, 2195457, 2195489, 2195265, 2195521, 2195553]),
          new Uint32Array([0, 2107649, 2097729, 2107809, 0, 2097601, 2162977, 2107745, 2135137, 2097505, 0, 2097185, 2097697, 2137633, 2097633, 2097441]),
          new Uint32Array([6291456, 0, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
          new Uint32Array([6291456, 0, 0, 0, 0, 0, 0, 23068672, 0, 0, 0, 0, 0, 0, 0, 0]),
          new Uint32Array([2141667, 2141763, 2097284, 2107588, 2107716, 2107844, 2107972, 2097444, 2097604, 2097155, 10485778, 10486344, 2108100, 6291456, 0, 0]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 6291456, 23068672, 6291456, 23068672, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 23068672, 6291456, 6291456, 23068672, 23068672, 23068672, 6291456, 0, 0, 0, 0, 0]),
          new Uint32Array([2098081, 2101249, 2100833, 2122561, 2100097, 2122657, 2105089, 2097985, 2100161, 2123233, 2123329, 2100897, 2101601, 2100129, 2101121, 2152801]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 6291456]),
          new Uint32Array([2107298, 2156226, 2128803, 2156290, 2153858, 2128899, 2128995, 2156354, 0, 2129091, 2156418, 2156482, 2156546, 2156610, 2129187, 2129283]),
          new Uint32Array([6291456, 2192385, 2192417, 2192449, 6291456, 2192481, 6291456, 2192513, 2192545, 6291456, 6291456, 6291456, 2192577, 6291456, 6291456, 6291456]),
          new Uint32Array([2195585, 2195617, 2195649, 2195681, 2149185, 2245729, 2195201, 2195265, 2195297, 2195617, 2195489, 2195457, 2148609, 2195105, 2195137, 2195169]),
          new Uint32Array([2248193, 2248225, 2248257, 2248289, 2248321, 2248353, 2248353, 2240737, 2248385, 2248417, 2248449, 2248481, 2238913, 2248513, 2248545, 2248577]),
          new Uint32Array([23068672, 6291456, 23068672, 23068672, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
          new Uint32Array([2180674, 2180738, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456]),
          new Uint32Array([6291456, 6291456, 6291456, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([6291456, 23068672, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
          new Uint32Array([2107329, 2114145, 2110049, 2114337, 2114433, 2098177, 2098305, 2110177, 2110145, 2102593, 2115009, 2110337, 2115201, 2115297, 2098209, 2112993]),
          new Uint32Array([0, 0, 0, 0, 0, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 6291456, 0]),
          new Uint32Array([2141187, 2141283, 2141379, 2140899, 2135427, 2134467, 2141475, 2141571, 0, 0, 0, 0, 0, 0, 0, 0]),
          new Uint32Array([2235265, 2235297, 2235329, 2235361, 2235393, 2235425, 2235457, 2235489, 2235521, 2235553, 2235585, 2235617, 2235649, 2235681, 2235713, 2230561]),
          new Uint32Array([0, 0, 23068672, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 6291456, 6291456]),
          new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2108228, 2098372]),
          new Uint32Array([10504163, 10504259, 10504355, 10504451, 10504547, 10504643, 10504739, 10504835, 10504931, 10505027, 10505123, 10505219, 10505315, 10505411, 10505507, 10505603]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2099332, 2099524, 2099334, 2099526, 2099718]),
          new Uint32Array([10505699, 10505795, 10505891, 10505987, 10506083, 10506179, 10506275, 10506371, 10506467, 10506563, 10506659, 10506755, 10506851, 10492868, 10492996, 0]),
          new Uint32Array([2231457, 2231489, 2231521, 2231553, 2217377, 2231585, 2231617, 2231649, 2231681, 2231713, 2231745, 2231777, 2231809, 2231841, 2231873, 2231905]),
          new Uint32Array([0, 0, 0, 0, 0, 23068672, 23068672, 0, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0]),
          new Uint32Array([2243233, 2243233, 2243265, 2243265, 2243297, 2243297, 2243329, 2243329, 2243361, 2243361, 2243393, 2243393, 2243425, 2243425, 2243457, 2243457]),
          new Uint32Array([2195297, 2195489, 2195521, 6291456, 2195265, 2195201, 6291456, 2196193, 6291456, 2195521, 2196225, 6291456, 6291456, 2196257, 2196289, 2196321]),
          new Uint32Array([2216033, 2216065, 2216097, 2216129, 2119521, 2119425, 2216161, 2216193, 2216225, 2216257, 2216289, 2216321, 2216353, 2216385, 2216417, 2216449]),
          new Uint32Array([2247521, 2247553, 2246689, 2247585, 2247617, 2240641, 2238785, 2238817, 2240673, 2247649, 2247681, 2232993, 2247713, 2238849, 2247745, 2247777]),
          new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 23068672, 23068672, 0, 0, 23068672, 23068672, 23068672, 0, 0]),
          new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456]),
          new Uint32Array([0, 0, 2097729, 0, 0, 0, 0, 2107745, 0, 2097505, 0, 2097185, 0, 2137633, 2097633, 2097441]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 2208705, 2208737, 2208769, 2208801, 2208833, 2208865, 0, 0]),
          new Uint32Array([6291456, 23068672, 23068672, 23068672, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456]),
          new Uint32Array([6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 2111811, 6291456, 6291456, 0, 0, 0, 0]),
          new Uint32Array([2191873, 2107297, 2098305, 2110337, 2194753, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([2219969, 2220001, 2220033, 2220065, 2220097, 2220129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
          new Uint32Array([2239169, 2230337, 2153377, 2250753, 2250785, 2250817, 2250849, 2250881, 2183362, 2250913, 2250945, 2250977, 2251009, 2251041, 2183426, 2251073]),
          new Uint32Array([2148609, 2195105, 2195137, 2195169, 2195201, 2195233, 2148929, 2195265, 2144097, 2195297, 2195329, 2153665, 2195361, 2195393, 2195425, 2195457]),
          new Uint32Array([2193889, 6291456, 2193921, 6291456, 2193953, 6291456, 2193985, 6291456, 2194017, 6291456, 2194049, 6291456, 2194081, 6291456, 2194113, 6291456]),
          new Uint32Array([2182594, 2182658, 2249025, 2249057, 2249089, 2249121, 2249153, 2249185, 0, 2249217, 2249249, 2249249, 2182722, 2249281, 2249313, 2232865]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2098209, 2188801, 2112993, 6291456]),
          new Uint32Array([2140035, 2140131, 2140227, 2140323, 2136099, 2136291, 2140419, 2140515, 2140611, 2140707, 2140803, 2140899, 2140803, 2140611, 2140995, 2141091]),
          new Uint32Array([6291456, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([6291456, 6291456, 6291456, 23068672, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
          new Uint32Array([6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0, 23068672, 0, 23068672, 23068672, 0, 23068672]),
          new Uint32Array([2115201, 2115297, 2098209, 2112993, 2107233, 2098241, 2110209, 2110273, 2107553, 2113569, 2102625, 2113761, 2107201, 2107297, 2107329, 2114145]),
          new Uint32Array([2195457, 2195489, 0, 2195521, 2195553, 2195585, 2195617, 2195649, 2195681, 2149185, 2195713, 2195745, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([6291456, 2194337, 6291456, 2194369, 2194401, 2194433, 2194465, 6291456, 2194497, 6291456, 2194529, 6291456, 2194561, 6291456, 2194593, 6291456]),
          new Uint32Array([2126530, 2126626, 2125731, 2125827, 2125923, 2126019, 2126115, 2126211, 2126307, 2126403, 2126499, 2126595, 2126691, 2126787, 2126883, 2126979]),
          new Uint32Array([2100385, 2098049, 2223681, 2125345, 2125537, 2223713, 2100353, 2102049, 2098145, 2102177, 2098017, 2100481, 2223745, 2223777, 2223809, 2152322]),
          new Uint32Array([2097281, 2107649, 2097729, 2107809, 2097377, 2097601, 2162977, 2107745, 2135137, 2097505, 0, 2097185, 2097697, 2137633, 2097633, 2097441]),
          new Uint32Array([23068672, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
          new Uint32Array([2206049, 6291456, 2206081, 6291456, 2206113, 6291456, 2206145, 6291456, 2206177, 6291456, 2206209, 6291456, 2206241, 6291456, 2206273, 6291456]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456]),
          new Uint32Array([2196865, 2196897, 2196929, 2196961, 2196993, 2197025, 2197057, 2197089, 2197121, 2197153, 2197185, 2197217, 2197249, 2197281, 2197313, 2197345]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456]),
          new Uint32Array([6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 23068672, 0, 0, 0]),
          new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 23068672, 0, 0, 0, 0, 0, 0, 0, 0]),
          new Uint32Array([2226497, 6291456, 2226529, 6291456, 6291456, 6291456, 2226561, 6291456, 2226593, 6291456, 2226625, 6291456, 2226657, 6291456, 2226689, 6291456]),
          new Uint32Array([2198529, 6291456, 2198561, 6291456, 2198593, 6291456, 2198625, 6291456, 2198657, 6291456, 2198689, 6291456, 2198721, 6291456, 2198753, 6291456]),
          new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
          new Uint32Array([23068672, 6291456, 23068672, 23068672, 23068672, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0]),
          new Uint32Array([2178626, 2178690, 2178754, 2178818, 2178882, 2178946, 2179010, 2179074, 2179138, 2179202, 2179266, 2179330, 2179394, 2179458, 2179522, 2179586]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 6291456, 6291456]),
          new Uint32Array([2195489, 2195521, 2195521, 2195553, 2195585, 2195617, 2195649, 2195681, 2149185, 2245729, 2195201, 2195265, 2195297, 2195617, 2195489, 2195457]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([2226177, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2226209, 6291456, 2226241, 6291456, 2226273, 2226305, 6291456]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 2213665]),
          new Uint32Array([2224801, 6291456, 2224833, 6291456, 2224865, 6291456, 2224897, 6291456, 2224929, 6291456, 2224961, 6291456, 2197697, 2197761, 23068672, 23068672]),
          new Uint32Array([6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
          new Uint32Array([6291456, 0, 6291456, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 0, 0, 23068672, 6291456, 23068672, 23068672]),
          new Uint32Array([10508483, 10508579, 10508675, 10508771, 10508867, 10508963, 10509059, 10509155, 10509251, 10509347, 10509443, 10509539, 10509635, 10509731, 10509827, 10509923]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2104132, 6291456, 6291456, 6291456]),
          new Uint32Array([2110273, 2204161, 2204193, 2204225, 2191937, 2191905, 2204257, 2204289, 2204321, 2204353, 2204385, 2204417, 2204449, 2204481, 2192033, 2204513]),
          new Uint32Array([2234849, 2233377, 2234881, 2234913, 2234945, 2234977, 2235009, 2235041, 2152321, 2235073, 2232865, 2235105, 2235137, 2235169, 2235201, 2235233]),
          new Uint32Array([0, 0, 2107553, 0, 0, 2113761, 2107201, 0, 0, 2114145, 2110049, 2114337, 2114433, 0, 2098305, 2110177]),
          new Uint32Array([2119905, 2107073, 2120097, 2107169, 2120289, 2120385, 2120481, 2120577, 2120673, 2223201, 2223233, 2214753, 2223265, 2223297, 2223329, 2223361]),
          new Uint32Array([2114337, 2114433, 2098177, 2098305, 2110177, 2110145, 2102593, 2115009, 2110337, 2115201, 2115297, 10633025, 10633281, 10633057, 10633569, 10632673]),
          new Uint32Array([0, 2201057, 2201089, 2201121, 2201153, 2144129, 2201185, 2201217, 2201249, 2201281, 2201313, 2157345, 2201345, 2157473, 2201377, 2201409]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 6291456, 6291456, 6291456]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 0, 0, 0, 0, 0, 6291456, 0, 0]),
          new Uint32Array([2138338, 2165250, 2165314, 2165378, 2165442, 2134658, 2134562, 2165506, 2134754, 2165570, 2165634, 2165698, 2165762, 2134658, 2134562, 2165506]),
          new Uint32Array([2168962, 2169026, 2169090, 2169154, 2169218, 2169282, 2169346, 2169410, 2169474, 2169538, 2169602, 2169666, 2169730, 2169794, 2169858, 2169922]),
          new Uint32Array([2240449, 2240481, 2240513, 2240545, 2240577, 2240609, 2240641, 2240673, 2238881, 2240705, 2240737, 2240769, 2238017, 2240801, 2240833, 2240865]),
          new Uint32Array([0, 0, 2221185, 2221217, 2221249, 2221281, 2221313, 2221345, 0, 0, 2221377, 2221409, 2221441, 0, 0, 0]),
          new Uint32Array([6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]),
          new Uint32Array([2134082, 2134370, 2164226, 2134466, 2161026, 2134946, 2135042, 2161090, 2161154, 2161218, 2135426, 2107906, 2161282, 2135714, 2161346, 2161410]),
          new Uint32Array([2214625, 2214657, 2214689, 2214721, 2153473, 2214753, 2214785, 2214817, 2214849, 2214881, 2214913, 2214945, 2214977, 2215009, 2215041, 2215073]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2202145, 6291456, 6291456, 6291456]),
          new Uint32Array([23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6291456]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 2209153, 2209185, 2209217, 2209249, 2209281, 2209313, 0, 0]),
          new Uint32Array([2125539, 2106820, 2152898, 2125635, 2106948, 2152962, 2102181, 2100483, 2125762, 2125858, 2125954, 2126050, 2126146, 2126242, 2126338, 2126434]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 0, 0, 0, 6291456, 0, 0, 0, 0, 0, 0, 0, 10485857]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]),
          new Uint32Array([6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6291456]),
          new Uint32Array([2257409, 2187842, 2257441, 2257473, 2257505, 2257537, 2187906, 2187970, 2257569, 2257601, 2257633, 2188034, 2257665, 2188098, 2242561, 2242561]),
          new Uint32Array([2237633, 2248609, 2248641, 2248673, 2248705, 2248737, 2248769, 2248801, 2248833, 2182530, 2248865, 2248897, 2248929, 2245921, 2248961, 2248993]),
          new Uint32Array([6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 23068672]),
          new Uint32Array([2245217, 2245249, 2245281, 10531522, 2245313, 2245345, 2245377, 0, 2245409, 2245441, 2245473, 2245505, 2245537, 2245569, 2245601, 0]),
          new Uint32Array([2207169, 6291456, 2207201, 6291456, 2207233, 6291456, 2207265, 6291456, 2207297, 6291456, 2207329, 6291456, 2207361, 6291456, 2207393, 6291456]),
          new Uint32Array([23068672, 23068672, 23068672, 18923778, 23068672, 23068672, 23068672, 23068672, 0, 23068672, 23068672, 23068672, 23068672, 18923842, 23068672, 23068672]),
          new Uint32Array([6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([10520771, 10520867, 10520963, 10521059, 2162882, 2162946, 2160194, 2163010, 2160002, 2160258, 2107650, 2163074, 2160386, 2163138, 2160450, 2160514]),
          new Uint32Array([2224321, 6291456, 2224353, 6291456, 2224385, 6291456, 2224417, 6291456, 2224449, 6291456, 2224481, 6291456, 2224513, 6291456, 6291456, 23068672]),
          new Uint32Array([2206305, 6291456, 2206337, 6291456, 2206369, 6291456, 2206401, 6291456, 2206433, 6291456, 2206465, 6291456, 2206497, 6291456, 2206529, 6291456]),
          new Uint32Array([2218945, 2218977, 2219009, 2219041, 2219073, 2219105, 2219137, 2219169, 2219201, 2219233, 2219265, 2219297, 2219329, 2219361, 2219393, 2219425]),
          new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 0, 23068672, 0, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([2133442, 2134306, 2137826, 2137634, 2162242, 2138018, 2164290, 2162434, 2137442, 2164354, 2139042, 2133666, 2160930, 2137026, 2097506, 2160194]),
          new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 0, 0, 0, 0, 0, 0, 0]),
          new Uint32Array([2102561, 2102465, 2098337, 2103169, 2103297, 2103425, 2103553, 2103681, 2103809, 2103937, 0, 0, 0, 0, 0, 0]),
          new Uint32Array([2135713, 2136001, 2136001, 2136001, 2136001, 2136097, 2136097, 2136097, 2136097, 2107617, 2107617, 2107617, 2107617, 2097185, 2097185, 2097185]),
          new Uint32Array([2168450, 2168514, 2168578, 2168642, 2168706, 2168770, 2168834, 2168898, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([2187010, 2187074, 2256033, 2256065, 2231617, 2256097, 2256129, 2256161, 2256193, 2256225, 2256257, 2242145, 2256289, 2256321, 2256353, 0]),
          new Uint32Array([6291456, 0, 0, 0, 0, 0, 0, 23068672, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456]),
          new Uint32Array([23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0]),
          new Uint32Array([0, 0, 2220801, 2220833, 2220865, 2220897, 2220929, 2220961, 0, 0, 2220993, 2221025, 2221057, 2221089, 2221121, 2221153]),
          new Uint32Array([0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([2189825, 6291456, 2189857, 6291456, 2189889, 6291456, 2189921, 6291456, 2189953, 6291456, 2189985, 6291456, 2190017, 6291456, 2190049, 6291456]),
          new Uint32Array([2098209, 2112993, 2107233, 2098241, 2110209, 2110273, 2107553, 2113569, 2102625, 2113761, 2107201, 2107297, 2107329, 2114145, 2110049, 2114337]),
          new Uint32Array([0, 0, 0, 0, 0, 0, 0, 23068672, 0, 0, 0, 0, 2144962, 2145026, 0, 2145090]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 0, 0]),
          new Uint32Array([23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([2134370, 2134466, 2161026, 2134946, 2135042, 2161090, 2161154, 2135138, 2161218, 2135426, 2107906, 2161282, 2135714, 2161346, 2161410, 2136002]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2202049, 6291456, 6291456, 6291456]),
          new Uint32Array([2102625, 2113761, 2107201, 2107297, 2107329, 2114145, 2110049, 2114337, 2114433, 2098177, 2098305, 2110177, 2110145, 2102593, 2115009, 2110337]),
          new Uint32Array([2199521, 6291456, 2199553, 6291456, 2199585, 6291456, 2199617, 6291456, 2199649, 6291456, 2199681, 6291456, 2199713, 6291456, 2199745, 6291456]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 6291456, 6291456]),
          new Uint32Array([2251937, 2251969, 2239297, 2183618, 2252001, 2252033, 2252065, 2242625, 2252097, 2252129, 2252161, 2252193, 2183682, 2252225, 2252257, 2252289]),
          new Uint32Array([2205281, 6291456, 2205313, 6291456, 2205345, 6291456, 2205377, 6291456, 2205409, 6291456, 2205441, 6291456, 2205473, 6291456, 2205505, 6291456]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
          new Uint32Array([2207425, 6291456, 2207457, 6291456, 2207489, 6291456, 2207521, 6291456, 2207553, 6291456, 2207585, 6291456, 2207617, 6291456, 2207649, 6291456]),
          new Uint32Array([2210081, 2244289, 2244321, 2244353, 2244385, 6291456, 6291456, 10633025, 10633057, 10538114, 10538114, 10538114, 10538114, 10632673, 10632673, 10632673]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 2202177, 2202209, 2202241, 2202273, 2202305, 2202337, 0, 0]),
          new Uint32Array([2195617, 2195649, 2102625, 2098177, 2110145, 2102593, 2195105, 2195137, 2195489, 2195617, 2195649, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([6291456, 0, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 23068672, 23068672, 6291456, 23068672, 23068672]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 2145794, 2145858, 6291456, 6291456]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 6291456, 23068672, 23068672]),
          new Uint32Array([2157890, 2157954, 2158018, 2158082, 2158146, 2158210, 2158274, 0, 2158338, 2158402, 2158466, 2158530, 2158594, 0, 2158658, 0]),
          new Uint32Array([2243617, 2243617, 2243617, 2243617, 2243649, 2243649, 2243681, 2243681, 2243681, 2243681, 2243713, 2243713, 2243713, 2243713, 2141729, 2141729]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0]),
          new Uint32Array([2114433, 2098177, 2098305, 2110177, 2110145, 2102593, 2115009, 2110337, 2115201, 2115297, 2098209, 2112993, 2107233, 2098241, 2110209, 2110273]),
          new Uint32Array([2236673, 2236705, 2236737, 2236769, 2236801, 2236833, 2236865, 2236897, 2236929, 2218625, 2236961, 2236993, 2237025, 2237057, 2237089, 2237121]),
          new Uint32Array([2234337, 2234369, 2234401, 2234433, 2234465, 2234497, 2234529, 2234561, 2234593, 2234625, 2234657, 2234689, 2234721, 2234753, 2234785, 2234817]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([2213249, 6291456, 2213281, 6291456, 2213313, 6291456, 2213345, 6291456, 2213377, 6291456, 2213409, 6291456, 2213441, 6291456, 2213473, 6291456]),
          new Uint32Array([2225697, 6291456, 2225729, 6291456, 2225761, 6291456, 2225793, 6291456, 2225825, 6291456, 2225857, 6291456, 2225889, 6291456, 2225921, 6291456]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 6291456, 6291456]),
          new Uint32Array([2207937, 6291456, 2207969, 6291456, 2208001, 6291456, 2208033, 6291456, 2208065, 6291456, 2208097, 6291456, 2208129, 6291456, 2208161, 6291456]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([2110145, 2102593, 2115009, 2110337, 2115201, 2115297, 2098209, 2112993, 2107233, 2098241, 0, 2110273, 0, 2113569, 2102625, 2113761]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
          new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 0, 6291456, 6291456]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0]),
          new Uint32Array([2195201, 2195233, 2148929, 2195265, 2144097, 2195297, 2195329, 2153665, 2195361, 2195393, 2195425, 2195457, 2195489, 2195521, 2195521, 2195553]),
          new Uint32Array([6291456, 6291456, 2118369, 2118465, 2118561, 2118657, 2222817, 2222849, 2222881, 2222913, 2213857, 2222945, 2222977, 2223009, 2223041, 2213953]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
          new Uint32Array([0, 2115585, 2220289, 2220321, 2115681, 2220353, 2220385, 2115777, 2220417, 2115873, 2220449, 2220481, 2220513, 2220545, 2220577, 2220609]),
          new Uint32Array([2115009, 2110337, 2115201, 2115297, 2098209, 2112993, 0, 2098241, 2110209, 2110273, 2107553, 0, 0, 2113761, 2107201, 2107297]),
          new Uint32Array([23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 0, 0]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 0]),
          new Uint32Array([0, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
          new Uint32Array([2152642, 2152706, 2101381, 2106180, 2101541, 2124099, 2101701, 2152770, 2124195, 2124291, 2124387, 2124483, 2124579, 2106308, 2124675, 2152834]),
          new Uint32Array([0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 6291456, 6291456, 14680064]),
          new Uint32Array([6291456, 2209921, 6291456, 6291456, 6291456, 6291456, 6291456, 10537986, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0]),
          new Uint32Array([2200545, 6291456, 2200577, 6291456, 2200609, 6291456, 2200641, 6291456, 2200673, 6291456, 2200705, 6291456, 2200737, 6291456, 2200769, 6291456]),
          new Uint32Array([2127586, 2127555, 2127651, 2127747, 2127843, 2154306, 2154370, 2154434, 2154498, 2154562, 2154626, 2154690, 2127938, 2128034, 2128130, 2127939]),
          new Uint32Array([2097152, 0, 0, 0, 2097152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
          new Uint32Array([0, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]),
          new Uint32Array([2198145, 6291456, 2198177, 6291456, 2198209, 6291456, 2198241, 6291456, 2198273, 6291456, 2198305, 6291456, 2198337, 6291456, 2198369, 6291456]),
          new Uint32Array([6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23068672]),
          new Uint32Array([2110177, 2110145, 2115009, 2098209, 2203841, 2203873, 2203905, 2112993, 2098241, 2110209, 2191745, 2191777, 2203937, 2107553, 6291456, 2107201]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([2224545, 6291456, 2224577, 6291456, 2224609, 6291456, 2224641, 6291456, 2224673, 6291456, 2224705, 6291456, 2224737, 6291456, 2224769, 6291456]),
          new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456]),
          new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 0, 23068672, 23068672, 23068672, 0, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456]),
          new Uint32Array([0, 0, 0, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]),
          new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([2174530, 2174594, 2174658, 2174722, 2174786, 2174850, 2174914, 2174978, 2175042, 2175106, 2175170, 2175234, 2175298, 2175362, 2175426, 2175490]),
          new Uint32Array([6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 23068672, 23068672, 0, 0]),
          new Uint32Array([23068672, 23068672, 23068672, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([2238369, 6291456, 2238401, 6291456, 6291456, 2238433, 2238465, 6291456, 6291456, 6291456, 2238497, 2238529, 2238561, 2238593, 2238625, 2238657]),
          new Uint32Array([10501475, 10501571, 10501667, 10501763, 10501859, 10501955, 10502051, 10502147, 10502243, 10502339, 10502435, 10502531, 10502627, 10502723, 10502819, 10502915]),
          new Uint32Array([10633121, 10633153, 10598561, 2244577, 10633217, 10633249, 10504033, 0, 10633281, 10633313, 10633345, 10633377, 0, 0, 0, 0]),
          new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0]),
          new Uint32Array([2242785, 2157761, 2158081, 2158145, 2158529, 2158593, 2242817, 2159105, 2159169, 10598561, 2157634, 2157698, 2131779, 2131875, 2157762, 2157826]),
          new Uint32Array([6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([18886305, 18885921, 23068672, 18886273, 18885890, 18921313, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 18874368]),
          new Uint32Array([23068672, 23068672, 6291456, 6291456, 6291456, 23068672, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
          new Uint32Array([2211617, 6291456, 2211649, 2211681, 2211713, 6291456, 6291456, 2211745, 6291456, 2211777, 6291456, 2211809, 6291456, 2203873, 2204449, 2203841]),
          new Uint32Array([0, 2097153, 2136097, 0, 2134561, 0, 0, 2133153, 0, 2134945, 0, 2135713, 0, 2243585, 0, 2245825]),
          new Uint32Array([2176578, 2176642, 2176706, 2176770, 2176834, 2176898, 2176962, 2177026, 2177090, 2177154, 2177218, 2177282, 2177346, 2177410, 2177474, 2177538]),
          new Uint32Array([2127075, 2127171, 2153026, 2153090, 2127267, 2153154, 2153218, 2127362, 2127363, 2127459, 2153282, 2153346, 2153410, 2153474, 2153538, 2107076]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2147521, 2147585, 2147649, 2147713, 2147777, 2147841, 2147905, 2147969]),
          new Uint32Array([2131586, 2131618, 2131714, 2131587, 2131683, 2157122, 2157122, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
          new Uint32Array([0, 0, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([2143298, 2190497, 6291456, 2190529, 6291456, 2190561, 6291456, 2190593, 6291456, 2143362, 2190625, 6291456, 2190657, 6291456, 2190689, 6291456]),
          new Uint32Array([0, 0, 2227201, 6291456, 2227233, 2204609, 2227265, 2227297, 6291456, 2227329, 6291456, 0, 0, 0, 0, 0]),
          new Uint32Array([2169986, 2170050, 2170114, 2170178, 2170242, 2170306, 2170370, 2170434, 2170498, 2170562, 2170626, 2170690, 2170754, 2170818, 2170882, 2170946]),
          new Uint32Array([2210625, 2210657, 2210689, 2210721, 2210753, 2210785, 2210817, 2210849, 2210881, 2210913, 2210945, 2210977, 2211009, 2211041, 2211073, 2211105]),
          new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 0, 0, 6291456, 6291456]),
          new Uint32Array([2213505, 6291456, 2213537, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2213569, 6291456, 2213601, 6291456, 23068672]),
          new Uint32Array([2215585, 2245857, 2245889, 2152449, 2118465, 2245921, 2245953, 2223009, 2245985, 2246017, 2246049, 2235713, 2246081, 2246113, 2246145, 2246177]),
          new Uint32Array([2136290, 2136674, 2097666, 2097186, 2097474, 2097698, 2107714, 2133442, 2134306, 2133730, 2133634, 2137826, 2137634, 2162242, 2138018, 2162306]),
          new Uint32Array([2114433, 2098177, 2098305, 2110177, 2110145, 2102593, 2115009, 2110337, 2115201, 2115297, 2181506, 2129154, 2181570, 2143106, 2141955, 2181634]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 6291456]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 23068672, 23068672, 23068672, 0, 0, 0, 0, 23068672]),
          new Uint32Array([2228513, 2228545, 2228577, 2228609, 2228641, 2228673, 2228705, 2228737, 2228769, 2228801, 2228833, 2228865, 2228897, 2228929, 2228961, 2228993]),
          new Uint32Array([2219617, 2231937, 2231969, 2232001, 2232033, 2232065, 2232097, 2232129, 2232161, 2232193, 2232225, 2232257, 2232289, 2232321, 2232353, 2232385]),
          new Uint32Array([2107649, 2107649, 2107649, 2244865, 2244865, 2132833, 2132833, 2132833, 2132833, 2160705, 2160705, 2160705, 2160705, 2097729, 2097729, 2097729]),
          new Uint32Array([2246785, 2246817, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
          new Uint32Array([14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064]),
          new Uint32Array([2138499, 2138595, 2138691, 2138787, 2138883, 2138979, 2139075, 2139171, 2139267, 2139363, 2139459, 2139555, 2139651, 2139747, 2139843, 2139939]),
          new Uint32Array([2202881, 2202913, 2202945, 2202977, 2203009, 2203041, 2203073, 2203105, 2203137, 2203169, 2203201, 2203233, 2203265, 2203297, 2203329, 2203361]),
          new Uint32Array([2252641, 2239329, 2236033, 2252673, 2252705, 2252737, 2184066, 2252769, 2252801, 2252833, 2252865, 2241473, 2252897, 2184130, 2252929, 2252961]),
          new Uint32Array([10569441, 2243905, 0, 0, 10583521, 10503969, 10538177, 10538049, 2244001, 10491329, 10491425, 10632705, 10632737, 2141857, 2141921, 10633089]),
          new Uint32Array([2150018, 2110179, 2150082, 6291456, 2115297, 6291456, 2149185, 6291456, 2115297, 6291456, 2107201, 2188769, 2112993, 2107233, 6291456, 2110209]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 23068672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
          new Uint32Array([2097152, 2097152, 2097152, 2097152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
          new Uint32Array([2171266, 2171330, 2171394, 2171458, 2171522, 2171586, 2171650, 2171714, 2171778, 2171842, 2171906, 2171970, 2172034, 2172098, 2172162, 2172226]),
          new Uint32Array([2212481, 6291456, 2212513, 6291456, 2212545, 6291456, 2212577, 6291456, 2212609, 6291456, 2212641, 6291456, 2212673, 6291456, 2212705, 6291456]),
          new Uint32Array([10485857, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 10497250, 6291456, 2098209, 6291456, 6291456, 2097152, 6291456, 10531522]),
          new Uint32Array([2193633, 6291456, 2193665, 6291456, 2193697, 6291456, 2193729, 6291456, 2193761, 6291456, 2193793, 6291456, 2193825, 6291456, 2193857, 6291456]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([0, 0, 0, 6291456, 6291456, 0, 0, 0, 6291456, 6291456, 6291456, 0, 0, 0, 6291456, 6291456]),
          new Uint32Array([2100961, 2123873, 2223617, 2098113, 2123393, 2104929, 2223649, 2105761, 2123713, 2123809, 2124257, 2101377, 2101697, 2124865, 2101857, 2102017]),
          new Uint32Array([2239649, 2120577, 2239681, 2239713, 2239745, 2239777, 2239809, 2234529, 2239841, 2239873, 2239905, 2239937, 2239969, 2240001, 2240001, 2240033]),
          new Uint32Array([2143170, 6291456, 2143234, 2143234, 2190337, 6291456, 2190369, 6291456, 6291456, 2190401, 6291456, 2190433, 6291456, 2190465, 6291456, 2143298]),
          new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 23068672]),
          new Uint32Array([23068672, 23068672, 23068672, 23068672, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456]),
          new Uint32Array([2206561, 6291456, 2206593, 6291456, 2206625, 6291456, 2206657, 6291456, 2206689, 6291456, 2206721, 6291456, 2206753, 6291456, 2206785, 6291456]),
          new Uint32Array([23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456, 0, 0, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 6291456, 6291456, 6291456]),
          new Uint32Array([6291456, 2191457, 2191489, 6291456, 2191521, 6291456, 2191553, 2191585, 6291456, 2191617, 2191649, 2191681, 6291456, 6291456, 2191713, 2191745]),
          new Uint32Array([0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2204097, 2107233, 2204129, 2189121, 2203937]),
          new Uint32Array([2136001, 2097153, 2136097, 2107681, 2134561, 2132833, 2160705, 2133153, 2162689, 2134945, 2161217, 2135713, 2245761, 2243585, 2245793, 2245825]),
          new Uint32Array([0, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([2102625, 2113761, 2107201, 2107297, 2107329, 0, 2110049, 0, 0, 0, 2098305, 2110177, 2110145, 2102593, 2115009, 2110337]),
          new Uint32Array([2255681, 2255713, 2255745, 2255777, 2186690, 2186754, 2186818, 2255809, 2255841, 2255873, 2255905, 2186882, 2255937, 2186946, 2255969, 2256001]),
          new Uint32Array([2226721, 6291456, 2226753, 6291456, 2226785, 6291456, 2226817, 6291456, 2226849, 6291456, 2194625, 2203937, 2204193, 2226881, 2204257, 6291456]),
          new Uint32Array([2242337, 2240225, 2242369, 2242401, 2242433, 2242465, 2242497, 2240289, 2238305, 2242529, 2240321, 2242561, 2240353, 2242593, 2220097, 2156738]),
          new Uint32Array([0, 0, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]),
          new Uint32Array([2253313, 2241569, 2253345, 2184450, 2253377, 2253409, 2184514, 2184578, 2253441, 2253473, 2253505, 2253537, 2253569, 2253569, 2253601, 2253633]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 6291456]),
          new Uint32Array([2240065, 2240097, 2240129, 2240161, 2240193, 2240225, 2240257, 2238433, 2240289, 2240321, 2240353, 2240385, 2156674, 2240417, 0, 0]),
          new Uint32Array([2173314, 2173378, 2173442, 2173506, 2173570, 2173634, 2173698, 2173762, 2173826, 2173890, 2173954, 2174018, 2174082, 2174146, 2174210, 2174274]),
          new Uint32Array([2115585, 2115681, 2115777, 2115873, 2115969, 2116065, 2116161, 2116257, 2116353, 2116449, 2116545, 2116641, 2116737, 2116833, 2116929, 2117025]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]),
          new Uint32Array([0, 23068672, 23068672, 23068672, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 6291456]),
          new Uint32Array([2189121, 2189153, 2189185, 2189217, 2189249, 2189281, 2189313, 6291456, 2189345, 2189377, 2189409, 2189441, 2189473, 2189505, 2189537, 4240258]),
          new Uint32Array([2098305, 2110177, 2110145, 2102593, 2115009, 2110337, 2115201, 2115297, 2098209, 2112993, 2107233, 2098241, 2110209, 2110273, 2107553, 2113569]),
          new Uint32Array([2135043, 2135139, 2135139, 2135235, 2135331, 2135427, 2135523, 2135523, 2135619, 2135715, 2135811, 2135907, 2136003, 2136003, 2136099, 2136195]),
          new Uint32Array([10503395, 10503491, 10503587, 10503683, 10503779, 10503875, 2098209, 2112993, 2107233, 2098241, 2110209, 2110273, 2107553, 2113569, 2102625, 2113761]),
          new Uint32Array([6291456, 6291456, 2225217, 6291456, 2225249, 6291456, 2225281, 6291456, 2225313, 6291456, 2225345, 6291456, 2225377, 6291456, 2225409, 6291456]),
          new Uint32Array([18874368, 18874368, 18874368, 18874368, 18874368, 18874368, 18874368, 18874368, 18874368, 18874368, 18874368, 18874368, 18874368, 18874368, 18874368, 18874368]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2181698, 2181762, 2181826, 6291456, 6291456, 6291456]),
          new Uint32Array([2103650, 2103778, 2103906, 2104034, 10500611, 10500707, 10500803, 10500899, 10500995, 10501091, 10501187, 10501283, 10501379, 10491332, 10491460, 10491588]),
          new Uint32Array([23068672, 23068672, 18923906, 23068672, 23068672, 23068672, 23068672, 18923970, 23068672, 23068672, 23068672, 23068672, 18924034, 23068672, 23068672, 23068672]),
          new Uint32Array([0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([2251105, 2251137, 2251169, 2251201, 2251233, 2251265, 2251297, 2251329, 2239201, 2251361, 2183490, 2251393, 2251425, 2251457, 2251489, 2239265]),
          new Uint32Array([2194785, 6291456, 2194817, 6291456, 2194849, 6291456, 2194881, 6291456, 0, 0, 10532674, 6291456, 6291456, 6291456, 10583521, 2194945]),
          new Uint32Array([6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]),
          new Uint32Array([6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
          new Uint32Array([2136002, 2141282, 2161602, 2136098, 2161858, 2161922, 2161986, 2162050, 2140514, 2136578, 2136290, 2136674, 2097666, 2097346, 2097698, 2107714]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0]),
          new Uint32Array([2193377, 6291456, 2193409, 6291456, 2193441, 6291456, 2193473, 6291456, 2193505, 6291456, 2193537, 6291456, 2193569, 6291456, 2193601, 6291456]),
          new Uint32Array([2130051, 2130147, 2130243, 2130339, 2130435, 2130531, 2130627, 2130723, 2130819, 2130915, 2131011, 2131107, 2131203, 2131299, 2131395, 2131491]),
          new Uint32Array([0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([2205025, 6291456, 2205057, 6291456, 2205089, 6291456, 2205121, 6291456, 2205153, 6291456, 2205185, 6291456, 2205217, 6291456, 2205249, 6291456]),
          new Uint32Array([2197889, 6291456, 2197921, 6291456, 2197953, 6291456, 2197985, 6291456, 2198017, 6291456, 2198049, 6291456, 2198081, 6291456, 2198113, 6291456]),
          new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0]),
          new Uint32Array([2111907, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([2159746, 2159746, 2159810, 2159810, 2159874, 2159874, 2159938, 2159938, 2159938, 2160002, 2160002, 2160002, 2108129, 2108129, 2108129, 2108129]),
          new Uint32Array([2134945, 2135137, 2135137, 2135137, 2135137, 2161217, 2161217, 2161217, 2161217, 2097441, 2097441, 2097441, 2097441, 2135713, 2135713, 2135713]),
          new Uint32Array([6291456, 0, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([6291456, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([2225441, 6291456, 2225473, 6291456, 2225505, 6291456, 2225537, 6291456, 2225569, 6291456, 2225601, 6291456, 2225633, 6291456, 2225665, 6291456]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([2224065, 6291456, 2224097, 6291456, 2224129, 6291456, 2224161, 6291456, 2224193, 6291456, 2224225, 6291456, 2224257, 6291456, 2224289, 6291456]),
          new Uint32Array([2199777, 6291456, 2199809, 6291456, 2199841, 6291456, 2199873, 6291456, 2199905, 6291456, 2199937, 6291456, 2199969, 6291456, 2200001, 6291456]),
          new Uint32Array([2107329, 2114145, 2110049, 2114337, 2114433, 0, 2098305, 2110177, 2110145, 2102593, 2115009, 2110337, 2115201, 0, 2098209, 2112993]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 0, 0, 0, 0, 0, 0, 0, 0]),
          new Uint32Array([2205537, 6291456, 2205569, 6291456, 2205601, 6291456, 2205633, 6291456, 2205665, 6291456, 2205697, 6291456, 2205729, 6291456, 2205761, 6291456]),
          new Uint32Array([2156802, 2156866, 2242625, 2242657, 2242689, 2156930, 2156994, 2157058, 2242721, 2242753, 0, 0, 0, 0, 0, 0]),
          new Uint32Array([2211969, 6291456, 2212001, 6291456, 2212033, 6291456, 2212065, 6291456, 2212097, 6291456, 2212129, 6291456, 2212161, 6291456, 2212193, 6291456]),
          new Uint32Array([2110209, 2110273, 2107553, 2113569, 2102625, 2113761, 2107201, 2107297, 2107329, 2114145, 2110049, 2114337, 2114433, 2098177, 2098305, 2110177]),
          new Uint32Array([2136001, 2097153, 2136097, 0, 2134561, 2132833, 2160705, 2133153, 0, 2134945, 2161217, 2135713, 2245761, 0, 2245793, 0]),
          new Uint32Array([2181954, 2182018, 2100897, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 6291456, 23068672, 23068672]),
          new Uint32Array([6291456, 6291456, 6291456, 2209697, 6291456, 6291456, 6291456, 6291456, 2209729, 2209761, 2209793, 2195073, 2209825, 10498211, 10497251, 10598465]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0]),
          new Uint32Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23068672, 23068672, 23068672, 23068672, 23068672]),
          new Uint32Array([6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([2220833, 2220865, 2220897, 2220929, 2220961, 2220993, 2221025, 2221057, 2221089, 2221121, 2221153, 2221185, 2221217, 2221249, 2221281, 2221313]),
          new Uint32Array([6291456, 23068672, 6291456, 2145666, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 6291456]),
          new Uint32Array([2190721, 6291456, 2190753, 6291456, 2190785, 6291456, 2190817, 6291456, 2190849, 6291456, 2190881, 6291456, 2190913, 6291456, 2190945, 6291456]),
          new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 0]),
          new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 0, 6291456, 6291456]),
          new Uint32Array([2215105, 2215137, 2215169, 2215201, 2215233, 2215265, 2215297, 2215329, 2215361, 2215393, 2215425, 2215457, 2215489, 2215521, 2215553, 2215585]),
          new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
          new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 23068672, 23068672, 6291456, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0]),
          new Uint32Array([0, 2107649, 2097729, 0, 2097377, 0, 0, 2107745, 2135137, 2097505, 2107617, 0, 2097697, 2137633, 2097633, 2097441]),
          new Uint32Array([2206817, 6291456, 2206849, 6291456, 2206881, 6291456, 2206913, 6291456, 2206945, 6291456, 2206977, 6291456, 2207009, 6291456, 2207041, 6291456]),
          new Uint32Array([23068672, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 0, 23068672, 23068672, 23068672, 23068672, 23068672]),
          new Uint32Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23068672]),
          new Uint32Array([2134754, 2164482, 2164546, 2135138, 2133890, 2133794, 2139266, 2134658, 2134562, 2165506, 2135138, 2161218, 2165826, 2165826, 6291456, 6291456]),
          new Uint32Array([2257697, 2188162, 2257729, 2257761, 2257793, 2257825, 2257857, 2257889, 2257921, 2188226, 2242593, 2257953, 2257985, 2258017, 2258049, 2258081]),
          new Uint32Array([6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
          new Uint32Array([2114337, 2114433, 2098177, 2098305, 2110177, 2110145, 2102593, 2115009, 2110337, 2115201, 2115297, 10632705, 10633601, 10632737, 10633633, 2245057]),
          new Uint32Array([6291456, 6291456, 23068672, 23068672, 23068672, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
          new Uint32Array([2195425, 2195457, 2195489, 2195265, 2195521, 2195553, 2195585, 2195617, 2195649, 2195681, 2149185, 2245697, 2148609, 2195105, 2195137, 2195169]),
          new Uint32Array([6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456])
        ];
        var blockIdxes = new Uint16Array([656, 656, 605, 162, 48, 207, 7, 2, 147, 147, 666, 339, 396, 696, 98, 98, 317, 557, 386, 672, 641, 744, 179, 4, 679, 32, 124, 441, 285, 270, 215, 380, 713, 667, 475, 167, 484, 98, 98, 98, 98, 98, 98, 35, 98, 366, 471, 98, 249, 249, 249, 249, 630, 249, 249, 708, 233, 13, 483, 98, 248, 73, 194, 462, 244, 491, 400, 98, 98, 98, 717, 612, 166, 496, 176, 129, 331, 565, 727, 295, 284, 608, 425, 516, 381, 117, 98, 98, 128, 611, 249, 86, 418, 98, 439, 571, 683, 645, 98, 98, 340, 249, 98, 169, 98, 98, 98, 98, 98, 178, 749, 98, 499, 29, 98, 249, 678, 98, 98, 98, 98, 98, 79, 488, 98, 98, 340, 30, 98, 69, 190, 712, 98, 173, 134, 147, 147, 147, 98, 292, 738, 619, 37, 249, 286, 98, 98, 736, 249, 265, 390, 98, 469, 479, 85, 508, 53, 559, 186, 305, 695, 479, 85, 395, 181, 111, 683, 631, 389, 421, 85, 125, 320, 710, 186, 523, 227, 479, 85, 125, 465, 96, 186, 738, 453, 132, 669, 62, 293, 434, 683, 134, 466, 139, 85, 578, 165, 460, 186, 638, 143, 139, 85, 251, 165, 450, 186, 602, 676, 139, 98, 185, 618, 254, 186, 98, 410, 146, 98, 115, 256, 545, 683, 203, 604, 98, 98, 743, 163, 581, 147, 147, 350, 98, 63, 335, 402, 577, 147, 147, 563, 277, 98, 436, 72, 187, 27, 205, 426, 538, 704, 273, 104, 134, 147, 147, 98, 98, 340, 446, 98, 312, 498, 221, 535, 398, 147, 147, 276, 98, 98, 526, 98, 98, 98, 98, 98, 712, 604, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 373, 430, 98, 98, 373, 98, 98, 412, 722, 81, 98, 98, 98, 722, 98, 98, 98, 313, 98, 341, 98, 750, 98, 98, 98, 98, 98, 574, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 604, 341, 98, 98, 98, 98, 98, 123, 490, 374, 98, 759, 98, 38, 490, 433, 98, 98, 98, 267, 249, 600, 750, 750, 327, 750, 98, 98, 98, 98, 98, 123, 234, 98, 9, 98, 98, 98, 98, 592, 98, 712, 627, 627, 723, 98, 499, 571, 98, 98, 581, 98, 750, 588, 98, 98, 98, 568, 98, 98, 98, 157, 249, 142, 750, 750, 499, 249, 298, 147, 147, 147, 544, 98, 98, 531, 290, 98, 340, 554, 561, 98, 761, 98, 98, 98, 79, 226, 98, 98, 531, 620, 517, 98, 98, 98, 235, 322, 658, 43, 738, 131, 126, 437, 98, 98, 477, 309, 614, 164, 575, 90, 98, 681, 511, 252, 249, 249, 249, 150, 423, 716, 570, 730, 324, 489, 542, 675, 752, 180, 537, 572, 217, 589, 223, 279, 264, 468, 636, 291, 528, 118, 58, 367, 422, 106, 21, 222, 406, 107, 737, 40, 388, 606, 530, 269, 120, 188, 610, 193, 246, 321, 213, 98, 147, 249, 249, 298, 336, 238, 661, 323, 102, 211, 231, 231, 470, 98, 98, 98, 98, 98, 98, 98, 98, 98, 138, 719, 98, 98, 369, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 392, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 597, 147, 134, 147, 160, 703, 171, 149, 51, 699, 74, 558, 405, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 510, 98, 98, 98, 98, 98, 98, 153, 98, 98, 98, 98, 98, 417, 98, 98, 98, 98, 98, 98, 98, 98, 98, 640, 98, 546, 98, 98, 98, 98, 98, 98, 274, 644, 82, 98, 98, 712, 632, 34, 732, 415, 665, 349, 28, 586, 646, 140, 98, 98, 518, 98, 98, 98, 505, 613, 98, 597, 225, 225, 225, 225, 249, 249, 98, 98, 98, 98, 98, 184, 147, 147, 98, 197, 98, 98, 98, 98, 98, 289, 189, 259, 525, 747, 342, 463, 8, 54, 365, 151, 19, 543, 299, 472, 147, 147, 363, 98, 347, 201, 604, 98, 98, 98, 98, 114, 98, 98, 98, 98, 98, 56, 556, 98, 98, 598, 11, 742, 362, 355, 337, 596, 98, 98, 98, 98, 757, 98, 456, 458, 420, 509, 77, 154, 693, 64, 200, 514, 344, 351, 110, 133, 670, 486, 391, 112, 307, 603, 414, 529, 485, 635, 427, 609, 333, 88, 224, 440, 359, 714, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 341, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 341, 98, 98, 98, 597, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 581, 147, 419, 726, 541, 296, 616, 506, 98, 98, 98, 98, 98, 607, 98, 98, 378, 700, 724, 587, 172, 504, 208, 495, 686, 45, 642, 147, 147, 247, 297, 98, 493, 750, 98, 98, 98, 738, 741, 98, 98, 531, 746, 750, 249, 384, 98, 98, 137, 98, 175, 527, 98, 341, 286, 98, 98, 709, 639, 501, 668, 712, 98, 98, 310, 497, 49, 135, 98, 288, 98, 98, 98, 304, 448, 281, 340, 314, 705, 680, 225, 98, 98, 113, 174, 255, 25, 652, 306, 16, 98, 98, 622, 750, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 757, 98, 566, 98, 98, 581, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 23, 92, 316, 459, 653, 141, 206, 161, 371, 584, 512, 452, 168, 6, 583, 219, 353, 109, 624, 145, 41, 671, 691, 521, 33, 399, 260, 155, 687, 731, 147, 147, 637, 387, 628, 579, 89, 394, 338, 177, 461, 83, 580, 429, 507, 60, 195, 720, 100, 245, 562, 26, 648, 262, 540, 80, 218, 413, 240, 524, 711, 547, 416, 84, 136, 278, 519, 755, 147, 375, 148, 698, 424, 382, 657, 478, 451, 147, 147, 435, 701, 59, 249, 408, 573, 660, 626, 358, 253, 654, 42, 407, 721, 550, 301, 303, 346, 199, 287, 515, 250, 758, 158, 438, 0, 411, 598, 258, 555, 522, 536, 147, 492, 98, 81, 24, 499, 499, 147, 147, 98, 98, 98, 98, 98, 98, 98, 134, 447, 98, 98, 590, 98, 98, 98, 98, 712, 341, 710, 147, 147, 98, 98, 68, 147, 147, 147, 147, 147, 147, 147, 147, 98, 341, 98, 98, 98, 710, 268, 581, 98, 98, 228, 98, 134, 98, 98, 352, 98, 70, 98, 98, 615, 592, 147, 147, 311, 328, 551, 98, 98, 98, 98, 98, 98, 499, 750, 520, 643, 75, 98, 581, 98, 98, 738, 98, 98, 98, 356, 147, 147, 147, 147, 147, 147, 147, 147, 147, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 597, 98, 592, 738, 147, 147, 147, 147, 147, 147, 147, 147, 147, 93, 98, 98, 156, 98, 546, 98, 98, 98, 712, 638, 147, 147, 147, 98, 15, 98, 690, 98, 650, 147, 147, 147, 147, 98, 98, 98, 280, 98, 715, 98, 98, 202, 144, 98, 651, 123, 123, 98, 98, 98, 98, 147, 147, 98, 98, 706, 597, 98, 98, 98, 385, 98, 364, 98, 629, 98, 242, 47, 147, 147, 147, 147, 147, 98, 98, 98, 98, 123, 147, 147, 147, 664, 50, 692, 282, 98, 98, 98, 300, 98, 98, 241, 750, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 98, 712, 98, 98, 101, 507, 147, 147, 147, 147, 98, 98, 738, 98, 79, 78, 147, 147, 147, 147, 147, 98, 581, 147, 98, 597, 561, 98, 98, 39, 718, 715, 98, 754, 561, 98, 98, 593, 507, 98, 123, 750, 561, 98, 175, 748, 108, 98, 98, 480, 561, 98, 98, 709, 368, 98, 604, 571, 98, 421, 99, 745, 147, 147, 147, 147, 65, 70, 750, 98, 98, 376, 209, 750, 674, 479, 85, 576, 465, 553, 122, 214, 147, 147, 147, 147, 147, 147, 147, 147, 98, 98, 98, 694, 119, 294, 507, 147, 98, 98, 98, 249, 159, 750, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 98, 98, 376, 198, 268, 560, 147, 147, 98, 98, 98, 249, 325, 750, 341, 147, 98, 98, 340, 548, 750, 147, 147, 147, 98, 313, 627, 98, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 98, 98, 99, 5, 147, 147, 147, 147, 147, 147, 621, 403, 98, 98, 98, 326, 677, 329, 98, 343, 444, 750, 147, 147, 147, 147, 585, 98, 98, 409, 46, 147, 539, 98, 98, 237, 729, 567, 98, 98, 347, 454, 184, 147, 98, 98, 98, 123, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 85, 98, 376, 401, 592, 98, 341, 98, 98, 688, 308, 497, 147, 147, 147, 147, 503, 98, 98, 481, 494, 750, 66, 98, 601, 230, 750, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 98, 263, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 710, 98, 98, 98, 532, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 750, 147, 147, 147, 147, 147, 147, 98, 98, 98, 98, 98, 98, 712, 571, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 757, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 712, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 597, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 123, 98, 712, 501, 147, 147, 147, 147, 147, 147, 98, 499, 94, 98, 98, 98, 119, 592, 14, 421, 95, 98, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 634, 370, 98, 98, 98, 134, 147, 147, 147, 147, 147, 147, 98, 98, 98, 98, 275, 52, 249, 249, 673, 561, 147, 147, 147, 147, 662, 334, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 738, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 592, 147, 147, 123, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 712, 147, 147, 147, 184, 18, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 581, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 98, 98, 98, 98, 98, 98, 134, 341, 123, 318, 663, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 592, 98, 98, 725, 98, 98, 455, 1, 753, 623, 98, 398, 457, 116, 98, 123, 147, 98, 98, 98, 98, 216, 147, 147, 147, 147, 147, 147, 147, 147, 147, 98, 757, 98, 98, 98, 98, 98, 597, 98, 123, 147, 147, 147, 147, 147, 147, 147, 147, 558, 582, 243, 20, 449, 71, 697, 564, 482, 261, 513, 591, 105, 558, 582, 243, 599, 728, 239, 22, 684, 354, 97, 733, 319, 74, 558, 582, 243, 20, 449, 239, 697, 564, 482, 97, 733, 319, 74, 558, 582, 243, 191, 361, 182, 121, 103, 760, 595, 442, 431, 272, 87, 383, 170, 474, 502, 474, 183, 257, 348, 404, 229, 212, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 249, 249, 249, 345, 249, 249, 617, 668, 594, 739, 611, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 401, 393, 266, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 98, 98, 341, 718, 501, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 98, 98, 99, 650, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 332, 497, 147, 147, 500, 31, 445, 98, 192, 501, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 604, 98, 98, 98, 571, 147, 147, 147, 147, 604, 98, 98, 499, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 204, 682, 357, 330, 467, 633, 751, 734, 487, 152, 432, 152, 147, 147, 147, 507, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 98, 98, 581, 98, 98, 98, 98, 98, 98, 757, 712, 604, 604, 604, 98, 592, 377, 625, 360, 558, 649, 98, 702, 98, 98, 91, 499, 147, 147, 147, 683, 98, 735, 647, 302, 283, 76, 655, 592, 147, 147, 147, 147, 147, 147, 147, 147, 147, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 738, 341, 341, 98, 98, 98, 98, 98, 98, 98, 757, 98, 98, 98, 98, 98, 123, 581, 147, 581, 98, 98, 98, 738, 750, 98, 98, 738, 98, 499, 507, 147, 147, 147, 147, 98, 98, 98, 98, 98, 98, 98, 85, 98, 98, 98, 98, 492, 98, 98, 98, 98, 98, 98, 98, 98, 757, 499, 315, 597, 98, 123, 597, 184, 597, 147, 147, 98, 98, 98, 98, 98, 98, 98, 98, 98, 740, 98, 98, 134, 147, 147, 549, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 499, 147, 147, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 571, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 499, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 507, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 710, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 10, 44, 464, 17, 443, 534, 476, 127, 220, 379, 3, 473, 707, 61, 569, 236, 659, 12, 689, 397, 232, 57, 196, 428, 130, 36, 685, 552, 55, 210, 372, 533, 756, 67, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147]);
        var mappingStr = "صلى الله عليه وسلمجل جلالهキロメートルrad∕s2𝅘𝅥𝅮𝅘𝅥𝅯𝅘𝅥𝅰𝅘𝅥𝅱𝅘𝅥𝅲𝆹𝅥𝅮𝆺𝅥𝅮𝆹𝅥𝅯𝆺𝅥𝅯エスクードキログラムキロワットグラムトンクルゼイロサンチームパーセントピアストルファラッドブッシェルヘクタールマンションミリバールレントゲン′′′′1⁄10viii(10)(11)(12)(13)(14)(15)(16)(17)(18)(19)(20)∫∫∫∫(오전)(오후)アパートアルファアンペアイニングエーカーカラットカロリーキュリーギルダークローネサイクルシリングバーレルフィートポイントマイクロミクロンメガトンリットルルーブル株式会社kcalm∕s2c∕kgاكبرمحمدصلعمرسولریال𝅗𝅥1⁄41⁄23⁄4 ̈́ྲཱྀླཱྀ ̈͂ ̓̀ ̓́ ̓͂ ̔̀ ̔́ ̔͂ ̈̀‵‵‵a/ca/sc/oc/utelfax1⁄71⁄91⁄32⁄31⁄52⁄53⁄54⁄51⁄65⁄61⁄83⁄85⁄87⁄8xii0⁄3∮∮∮(1)(2)(3)(4)(5)(6)(7)(8)(9)(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)(n)(o)(p)(q)(r)(s)(t)(u)(v)(w)(x)(y)(z)::====(ᄀ)(ᄂ)(ᄃ)(ᄅ)(ᄆ)(ᄇ)(ᄉ)(ᄋ)(ᄌ)(ᄎ)(ᄏ)(ᄐ)(ᄑ)(ᄒ)(가)(나)(다)(라)(마)(바)(사)(아)(자)(차)(카)(타)(파)(하)(주)(一)(二)(三)(四)(五)(六)(七)(八)(九)(十)(月)(火)(水)(木)(金)(土)(日)(株)(有)(社)(名)(特)(財)(祝)(労)(代)(呼)(学)(監)(企)(資)(協)(祭)(休)(自)(至)pte10月11月12月ergltdアールインチウォンオンスオームカイリガロンガンマギニーケースコルナコーポセンチダースノットハイツパーツピクルフランペニヒヘルツペンスページベータボルトポンドホールホーンマイルマッハマルクヤードヤールユアンルピー10点11点12点13点14点15点16点17点18点19点20点21点22点23点24点hpabardm2dm3khzmhzghzthzmm2cm2km2mm3cm3km3kpampagpalogmilmolppmv∕ma∕m10日11日12日13日14日15日16日17日18日19日20日21日22日23日24日25日26日27日28日29日30日31日galffifflשּׁשּׂ ٌّ ٍّ َّ ُّ ِّ ّٰـَّـُّـِّتجمتحجتحمتخمتمجتمحتمخجمححميحمىسحجسجحسجىسمحسمجسممصححصممشحمشجيشمخشممضحىضخمطمحطممطميعجمعممعمىغممغميغمىفخمقمحقمملحملحيلحىلججلخملمحمحجمحيمجحمجممخممجخهمجهممنحمنحىنجمنجىنمينمىيممبخيتجيتجىتخيتخىتميتمىجميجحىجمىسخىصحيشحيضحيلجيلمييحييجييميمميقمينحيعميكمينجحمخيلجمكممجحيحجيمجيفميبحيسخينجيصلےقلے〔s〕ppv〔本〕〔三〕〔二〕〔安〕〔点〕〔打〕〔盗〕〔勝〕〔敗〕 ̄ ́ ̧ssi̇ijl·ʼndžljnjdz ̆ ̇ ̊ ̨ ̃ ̋ ιեւاٴوٴۇٴيٴक़ख़ग़ज़ड़ढ़फ़य़ড়ঢ়য়ਲ਼ਸ਼ਖ਼ਗ਼ਜ਼ਫ਼ଡ଼ଢ଼ําໍາຫນຫມགྷཌྷདྷབྷཛྷཀྵཱཱིུྲྀླྀྒྷྜྷྡྷྦྷྫྷྐྵaʾἀιἁιἂιἃιἄιἅιἆιἇιἠιἡιἢιἣιἤιἥιἦιἧιὠιὡιὢιὣιὤιὥιὦιὧιὰιαιάιᾶι ͂ὴιηιήιῆιὼιωιώιῶι ̳!! ̅???!!?rs°c°fnosmtmivix⫝̸ ゙ ゚よりコト333435참고주의363738394042444546474849503月4月5月6月7月8月9月hgev令和ギガデシドルナノピコビルペソホンリラレムdaauovpciu平成昭和大正明治naμakakbmbgbpfnfμfμgmgμlmldlklfmnmμmpsnsμsmsnvμvkvpwnwμwmwkwkωmωbqcccddbgyhainkkktlnlxphprsrsvwb𤋮𢡊𢡄𣏕𥉉𥳐𧻓stմնմեմիվնմխיִײַשׁשׂאַאָאּבּגּדּהּוּזּטּיּךּכּלּמּנּסּףּפּצּקּרּתּוֹבֿכֿפֿאלئائەئوئۇئۆئۈئېئىئجئحئمئيبجبمبىبيتىتيثجثمثىثيخحضجضمطحظمغجفجفحفىفيقحقىقيكاكجكحكخكلكىكينخنىنيهجهىهييىذٰرٰىٰئرئزئنبزبنترتزتنثرثزثنمانرنزننيريزئخئهبهتهصخنههٰثهسهشهطىطيعىعيغىغيسىسيشىشيصىصيضىضيشخشرسرصرضراً ًـًـّ ْـْلآلألإ𐐨𐐩𐐪𐐫𐐬𐐭𐐮𐐯𐐰𐐱𐐲𐐳𐐴𐐵𐐶𐐷𐐸𐐹𐐺𐐻𐐼𐐽𐐾𐐿𐑀𐑁𐑂𐑃𐑄𐑅𐑆𐑇𐑈𐑉𐑊𐑋𐑌𐑍𐑎𐑏𐓘𐓙𐓚𐓛𐓜𐓝𐓞𐓟𐓠𐓡𐓢𐓣𐓤𐓥𐓦𐓧𐓨𐓩𐓪𐓫𐓬𐓭𐓮𐓯𐓰𐓱𐓲𐓳𐓴𐓵𐓶𐓷𐓸𐓹𐓺𐓻𐳀𐳁𐳂𐳃𐳄𐳅𐳆𐳇𐳈𐳉𐳊𐳋𐳌𐳍𐳎𐳏𐳐𐳑𐳒𐳓𐳔𐳕𐳖𐳗𐳘𐳙𐳚𐳛𐳜𐳝𐳞𐳟𐳠𐳡𐳢𐳣𐳤𐳥𐳦𐳧𐳨𐳩𐳪𐳫𐳬𐳭𐳮𐳯𐳰𐳱𐳲𑣀𑣁𑣂𑣃𑣄𑣅𑣆𑣇𑣈𑣉𑣊𑣋𑣌𑣍𑣎𑣏𑣐𑣑𑣒𑣓𑣔𑣕𑣖𑣗𑣘𑣙𑣚𑣛𑣜𑣝𑣞𑣟𖹠𖹡𖹢𖹣𖹤𖹥𖹦𖹧𖹨𖹩𖹪𖹫𖹬𖹭𖹮𖹯𖹰𖹱𖹲𖹳𖹴𖹵𖹶𖹷𖹸𖹹𖹺𖹻𖹼𖹽𖹾𖹿𞤢𞤣𞤤𞤥𞤦𞤧𞤨𞤩𞤪𞤫𞤬𞤭𞤮𞤯𞤰𞤱𞤲𞤳𞤴𞤵𞤶𞤷𞤸𞤹𞤺𞤻𞤼𞤽𞤾𞤿𞥀𞥁𞥂𞥃0,1,2,3,4,5,6,7,8,9,wzhvsdwcmcmdmrdjほかココ𠄢𠘺𠔜𠕋𩇟𠨬𠭣𡓤𡚨𡛪𡧈𡬘𡷤𡷦𢆃𪎒𢌱𣊸𦇚𢛔𢬌𢯱𣀊𣏃𣑭𣚣𣢧𣪍𡴋𣫺𣲼𣴞𣻑𣽞𣾎𠔥𤉣𤘈𤜵𤠔𤰶𤲒𢆟𤾡𤾸𥁄𥃳𥃲𥄙𥄳𥐝𥘦𥚚𥛅𥥼𥪧𥮫𥲀𥾆𦈨𦉇𦋙𦌾𦓚𦔣𦖨𣍟𦞧𦞵𣎓𣎜𦬼𦰶𦵫𦳕𧏊𦼬𦾱𧃒𧙧𧢮𧥦𧲨𧼯𠠄𠣞𨗒𨗭𨜮𨯺𨵷𩅅𩈚𩐊𩒖𩖶𩬰𪃎𪄅𪈎𪊑𪘀àáâãäåæçèéêëìíîïðñòóôõöøùúûüýþāăąćĉċčďđēĕėęěĝğġģĥħĩīĭįĵķĺļľłńņňŋōŏőœŕŗřśŝşšţťŧũūŭůűųŵŷÿźżɓƃƅɔƈɖɗƌǝəɛƒɠɣɩɨƙɯɲɵơƣƥʀƨʃƭʈưʊʋƴƶʒƹƽǎǐǒǔǖǘǚǜǟǡǣǥǧǩǫǭǯǵƕƿǹǻǽǿȁȃȅȇȉȋȍȏȑȓȕȗșțȝȟƞȣȥȧȩȫȭȯȱȳⱥȼƚⱦɂƀʉʌɇɉɋɍɏɦɹɻʁʕͱͳʹͷ;ϳέίόύβγδεζθκλνξοπρστυφχψϊϋϗϙϛϝϟϡϣϥϧϩϫϭϯϸϻͻͼͽѐёђѓєѕіїјљњћќѝўџабвгдежзийклмнопрстуфхцчшщъыьэюяѡѣѥѧѩѫѭѯѱѳѵѷѹѻѽѿҁҋҍҏґғҕҗҙқҝҟҡңҥҧҩҫҭүұҳҵҷҹһҽҿӂӄӆӈӊӌӎӑӓӕӗәӛӝӟӡӣӥӧөӫӭӯӱӳӵӷӹӻӽӿԁԃԅԇԉԋԍԏԑԓԕԗԙԛԝԟԡԣԥԧԩԫԭԯաբգդզէըթժլծկհձղճյշոչպջռստրցփքօֆ་ⴧⴭნᏰᏱᏲᏳᏴᏵꙋაბგდევზთიკლმოპჟრსტუფქღყშჩცძწჭხჯჰჱჲჳჴჵჶჷჸჹჺჽჾჿɐɑᴂɜᴖᴗᴝᴥɒɕɟɡɥɪᵻʝɭᶅʟɱɰɳɴɸʂƫᴜʐʑḁḃḅḇḉḋḍḏḑḓḕḗḙḛḝḟḡḣḥḧḩḫḭḯḱḳḵḷḹḻḽḿṁṃṅṇṉṋṍṏṑṓṕṗṙṛṝṟṡṣṥṧṩṫṭṯṱṳṵṷṹṻṽṿẁẃẅẇẉẋẍẏẑẓẕạảấầẩẫậắằẳẵặẹẻẽếềểễệỉịọỏốồổỗộớờởỡợụủứừửữựỳỵỷỹỻỽỿἐἑἒἓἔἕἰἱἲἳἴἵἶἷὀὁὂὃὄὅὑὓὕὗᾰᾱὲΐῐῑὶΰῠῡὺῥ`ὸ‐+−∑〈〉ⰰⰱⰲⰳⰴⰵⰶⰷⰸⰹⰺⰻⰼⰽⰾⰿⱀⱁⱂⱃⱄⱅⱆⱇⱈⱉⱊⱋⱌⱍⱎⱏⱐⱑⱒⱓⱔⱕⱖⱗⱘⱙⱚⱛⱜⱝⱞⱡɫᵽɽⱨⱪⱬⱳⱶȿɀⲁⲃⲅⲇⲉⲋⲍⲏⲑⲓⲕⲗⲙⲛⲝⲟⲡⲣⲥⲧⲩⲫⲭⲯⲱⲳⲵⲷⲹⲻⲽⲿⳁⳃⳅⳇⳉⳋⳍⳏⳑⳓⳕⳗⳙⳛⳝⳟⳡⳣⳬⳮⳳⵡ母龟丨丶丿乙亅亠人儿入冂冖冫几凵刀力勹匕匚匸卜卩厂厶又口囗士夂夊夕女子宀寸小尢尸屮山巛工己巾干幺广廴廾弋弓彐彡彳心戈戶手支攴文斗斤方无曰欠止歹殳毋比毛氏气爪父爻爿片牙牛犬玄玉瓜瓦甘生用田疋疒癶白皮皿目矛矢石示禸禾穴立竹米糸缶网羊羽老而耒耳聿肉臣臼舌舛舟艮色艸虍虫血行衣襾見角言谷豆豕豸貝赤走足身車辛辰辵邑酉釆里長門阜隶隹雨靑非面革韋韭音頁風飛食首香馬骨高髟鬥鬯鬲鬼魚鳥鹵鹿麥麻黃黍黑黹黽鼎鼓鼠鼻齊齒龍龜龠.〒卄卅ᄁᆪᆬᆭᄄᆰᆱᆲᆳᆴᆵᄚᄈᄡᄊ짜ᅢᅣᅤᅥᅦᅧᅨᅩᅪᅫᅬᅭᅮᅯᅰᅱᅲᅳᅴᅵᄔᄕᇇᇈᇌᇎᇓᇗᇙᄜᇝᇟᄝᄞᄠᄢᄣᄧᄩᄫᄬᄭᄮᄯᄲᄶᅀᅇᅌᇱᇲᅗᅘᅙᆄᆅᆈᆑᆒᆔᆞᆡ上中下甲丙丁天地問幼箏우秘男適優印注項写左右医宗夜テヌモヨヰヱヲꙁꙃꙅꙇꙉꙍꙏꙑꙓꙕꙗꙙꙛꙝꙟꙡꙣꙥꙧꙩꙫꙭꚁꚃꚅꚇꚉꚋꚍꚏꚑꚓꚕꚗꚙꚛꜣꜥꜧꜩꜫꜭꜯꜳꜵꜷꜹꜻꜽꜿꝁꝃꝅꝇꝉꝋꝍꝏꝑꝓꝕꝗꝙꝛꝝꝟꝡꝣꝥꝧꝩꝫꝭꝯꝺꝼᵹꝿꞁꞃꞅꞇꞌꞑꞓꞗꞙꞛꞝꞟꞡꞣꞥꞧꞩɬʞʇꭓꞵꞷꞹꞻꞽꞿꟃꞔᶎꟈꟊꟶꬷꭒʍᎠᎡᎢᎣᎤᎥᎦᎧᎨᎩᎪᎫᎬᎭᎮᎯᎰᎱᎲᎳᎴᎵᎶᎷᎸᎹᎺᎻᎼᎽᎾᎿᏀᏁᏂᏃᏄᏅᏆᏇᏈᏉᏊᏋᏌᏍᏎᏏᏐᏑᏒᏓᏔᏕᏖᏗᏘᏙᏚᏛᏜᏝᏞᏟᏠᏡᏢᏣᏤᏥᏦᏧᏨᏩᏪᏫᏬᏭᏮᏯ豈更賈滑串句契喇奈懶癩羅蘿螺裸邏樂洛烙珞落酪駱亂卵欄爛蘭鸞嵐濫藍襤拉臘蠟廊朗浪狼郎來冷勞擄櫓爐盧蘆虜路露魯鷺碌祿綠菉錄論壟弄籠聾牢磊賂雷壘屢樓淚漏累縷陋勒肋凜凌稜綾菱陵讀拏諾丹寧怒率異北磻便復不泌數索參塞省葉說殺沈拾若掠略亮兩凉梁糧良諒量勵呂廬旅濾礪閭驪麗黎曆歷轢年憐戀撚漣煉璉秊練聯輦蓮連鍊列劣咽烈裂廉念捻殮簾獵囹嶺怜玲瑩羚聆鈴零靈領例禮醴隸惡了僚寮尿料燎療蓼遼暈阮劉杻柳流溜琉留硫紐類戮陸倫崙淪輪律慄栗隆利吏履易李梨泥理痢罹裏裡離匿溺吝燐璘藺隣鱗麟林淋臨笠粒狀炙識什茶刺切度拓糖宅洞暴輻降廓兀嗀塚晴凞猪益礼神祥福靖精蘒諸逸都飯飼館鶴郞隷侮僧免勉勤卑喝嘆器塀墨層悔慨憎懲敏既暑梅海渚漢煮爫琢碑祉祈祐祖禍禎穀突節縉繁署者臭艹著褐視謁謹賓贈辶難響頻恵舘並况全侀充冀勇勺啕喙嗢墳奄奔婢嬨廒廙彩徭惘慎愈慠戴揄搜摒敖望杖滛滋瀞瞧爵犯瑱甆画瘝瘟盛直睊着磌窱类絛缾荒華蝹襁覆調請諭變輸遲醙鉶陼韛頋鬒㮝䀘䀹齃龎עםٱٻپڀٺٿٹڤڦڄڃچڇڍڌڎڈژڑکگڳڱںڻۀہھۓڭۋۅۉ、〖〗—–_{}【】《》「」『』[]#&amp;*-&lt;&gt;\\$%@ءؤة\"'^|~⦅⦆・ゥャ¢£¬¦¥₩│←↑→↓■○ıȷ∇∂ٮڡٯ字双多解交映無前後再新初終販声吹演投捕遊指禁空合満申割営配得可丽丸乁你侻倂偺備像㒞兔兤具㒹內冗冤仌冬刃㓟刻剆剷㔕包匆卉博即卽卿灰及叟叫叱吆咞吸呈周咢哶唐啓啣善喫喳嗂圖圗噑噴壮城埴堍型堲報墬売壷夆夢奢姬娛娧姘婦㛮嬈嬾寃寘寳寿将㞁屠峀岍嵃嵮嵫嵼巡巢㠯巽帨帽幩㡢㡼庰庳庶舁弢㣇形彫㣣徚忍志忹悁㤺㤜惇慈慌慺憲憤憯懞戛扝抱拔捐挽拼捨掃揤搢揅掩㨮摩摾撝摷㩬敬旣書晉㬙㬈㫤冒冕最暜肭䏙朡杞杓㭉柺枅桒梎栟椔楂榣槪檨櫛㰘次歔㱎歲殟殻汎沿泍汧洖派浩浸涅洴港湮㴳滇淹潮濆瀹瀛㶖灊災灷炭煅熜爨牐犀犕獺王㺬玥㺸瑇瑜璅瓊㼛甤甾瘐㿼䀈眞真瞋䁆䂖硎䃣秫䄯穊穏䈂篆築䈧糒䊠糨糣紀絣䌁緇縂繅䌴䍙罺羕翺聠聰䏕育脃䐋脾媵舄辞䑫芑芋芝劳花芳芽苦茝荣莭茣莽菧荓菊菌菜䔫蓱蓳蔖蕤䕝䕡䕫虐虧虩蚩蚈蜎蛢蜨蝫螆蟡蠁䗹衠裗裞䘵裺㒻䚾䛇誠貫賁贛起跋趼跰軔邔郱鄑鄛鈸鋗鋘鉼鏹鐕開䦕閷䧦雃嶲霣䩮䩶韠䪲頩飢䬳餩馧駂駾䯎鱀鳽䳎䳭鵧䳸䵖黾鼅鼏鼖";
        function mapChar(codePoint) {
          if (codePoint &gt;= 196608) {
            if (codePoint &gt;= 917760 &amp;&amp; codePoint &lt;= 917999)
              return 18874368;
            return 0;
          }
          return blocks[blockIdxes[codePoint &gt;&gt; 4]][codePoint &amp; 15];
        }
        return {
          mapStr: mappingStr,
          mapChar
        };
      });
    })(idnaMap);
    (function(module2, exports2) {
      (function(root, factory) {
        {
          module2.exports = factory(require$$0__default["default"], idnaMap.exports);
        }
      })(commonjsGlobal$1, function(punycode2, idnaMap2) {
        function mapLabel(label, useStd3ASCII, transitional) {
          const mapped = [];
          const chars = punycode2.ucs2.decode(label);
          for (let i = 0; i &lt; chars.length; i++) {
            const cp = chars[i];
            const ch = punycode2.ucs2.encode([chars[i]]);
            const composite = idnaMap2.mapChar(cp);
            const flags = composite &gt;&gt; 23;
            const kind = composite &gt;&gt; 21 &amp; 3;
            const index = composite &gt;&gt; 5 &amp; 65535;
            const length = composite &amp; 31;
            const value = idnaMap2.mapStr.substr(index, length);
            if (kind === 0 || useStd3ASCII &amp;&amp; flags &amp; 1) {
              throw new Error("Illegal char " + ch);
            } else if (kind === 1) {
              mapped.push(value);
            } else if (kind === 2) {
              mapped.push(transitional ? value : ch);
            } else if (kind === 3) {
              mapped.push(ch);
            }
          }
          const newLabel = mapped.join("").normalize("NFC");
          return newLabel;
        }
        function process2(domain, transitional, useStd3ASCII) {
          if (useStd3ASCII === void 0) {
            useStd3ASCII = false;
          }
          const mappedIDNA = mapLabel(domain, useStd3ASCII, transitional);
          let labels = mappedIDNA.split(".");
          labels = labels.map(function(label) {
            if (label.startsWith("xn--")) {
              label = punycode2.decode(label.substring(4));
              validateLabel(label, useStd3ASCII, false);
            } else {
              validateLabel(label, useStd3ASCII, transitional);
            }
            return label;
          });
          return labels.join(".");
        }
        function validateLabel(label, useStd3ASCII, transitional) {
          if (label[2] === "-" &amp;&amp; label[3] === "-") {
            throw new Error("Failed to validate " + label);
          }
          if (label.startsWith("-") || label.endsWith("-")) {
            throw new Error("Failed to validate " + label);
          }
          if (label.includes(".")) {
            throw new Error("Failed to validate " + label);
          }
          if (mapLabel(label, useStd3ASCII, transitional) !== label) {
            throw new Error("Failed to validate " + label);
          }
          const ch = label.codePointAt(0);
          if (idnaMap2.mapChar(ch) &amp; 2 &lt;&lt; 23) {
            throw new Error("Label contains illegal character: " + ch);
          }
        }
        function toAscii(domain, options) {
          if (options === void 0) {
            options = {};
          }
          const transitional = "transitional" in options ? options.transitional : true;
          const useStd3ASCII = "useStd3ASCII" in options ? options.useStd3ASCII : false;
          const verifyDnsLength = "verifyDnsLength" in options ? options.verifyDnsLength : false;
          const labels = process2(domain, transitional, useStd3ASCII).split(".");
          const asciiLabels = labels.map(punycode2.toASCII);
          const asciiString = asciiLabels.join(".");
          let i;
          if (verifyDnsLength) {
            if (asciiString.length &lt; 1 || asciiString.length &gt; 253) {
              throw new Error("DNS name has wrong length: " + asciiString);
            }
            for (i = 0; i &lt; asciiLabels.length; i++) {
              const label = asciiLabels[i];
              if (label.length &lt; 1 || label.length &gt; 63) {
                throw new Error("DNS label has wrong length: " + label);
              }
            }
          }
          return asciiString;
        }
        function convert(domains) {
          const isArrayInput = Array.isArray(domains);
          if (!isArrayInput) {
            domains = [domains];
          }
          const results = { IDN: [], PC: [] };
          domains.forEach((domain) =&gt; {
            let pc, tmp;
            try {
              pc = toAscii(domain, {
                transitional: !domain.match(/\.(?:be|ca|de|fr|pm|re|swiss|tf|wf|yt)\.?$/)
              });
              tmp = {
                PC: pc,
                IDN: toUnicode2(pc)
              };
            } catch (e) {
              tmp = {
                PC: domain,
                IDN: domain
              };
            }
            results.PC.push(tmp.PC);
            results.IDN.push(tmp.IDN);
          });
          if (isArrayInput) {
            return results;
          }
          return { IDN: results.IDN[0], PC: results.PC[0] };
        }
        function toUnicode2(domain, options) {
          if (options === void 0) {
            options = {};
          }
          const useStd3ASCII = "useStd3ASCII" in options ? options.useStd3ASCII : false;
          return process2(domain, false, useStd3ASCII);
        }
        return {
          toUnicode: toUnicode2,
          toAscii,
          convert
        };
      });
    })(uts46$1);
    var sha3 = sha3$1.exports.keccak_256;
    var uts46 = uts46$1.exports;
    function namehash(inputName) {
      var node = "";
      for (var i = 0; i &lt; 32; i++) {
        node += "00";
      }
      var name = normalize(inputName);
      if (name) {
        var labels = name.split(".");
        for (var i = labels.length - 1; i &gt;= 0; i--) {
          var labelSha = sha3(labels[i]);
          node = sha3(new Buffer(node + labelSha, "hex"));
        }
      }
      return "0x" + node;
    }
    function normalize(name) {
      return name ? uts46.toUnicode(name, { useStd3ASCII: true, transitional: false }) : name;
    }
    var ethEnsNamehash = {
      hash: namehash,
      normalize
    };
    return ethEnsNamehash;
  });
})(dist);
var distExports = dist.exports;
function create_if_block(ctx) {
  let div4;
  let div2;
  let h3;
  let t0_value = (
    /*token*/
    ctx[0].name + ""
  );
  let t0;
  let t1;
  let div1;
  let div0;
  let t2;
  let t3;
  let t4;
  let div3;
  let img;
  let img_src_value;
  let img_alt_value;
  let t5;
  let div13;
  let div5;
  let t7;
  let div12;
  let div7;
  let button0;
  let t9;
  let div6;
  let t10_value = (
    /*years*/
    ctx[3] &gt; 1 ? (
      /*years*/
      ctx[3] + " Years"
    ) : (
      /*years*/
      ctx[3] + " Year"
    )
  );
  let t10;
  let t11;
  let button1;
  let t13;
  let div11;
  let mounted;
  let dispose;
  return {
    c() {
      div4 = element("div");
      div2 = element("div");
      h3 = element("h3");
      t0 = text(t0_value);
      t1 = space();
      div1 = element("div");
      div0 = element("div");
      t2 = text("Valid until: ");
      t3 = text(
        /*expiry*/
        ctx[1]
      );
      t4 = space();
      div3 = element("div");
      img = element("img");
      t5 = space();
      div13 = element("div");
      div5 = element("div");
      div5.innerHTML = `&lt;p style="font-size: 19px; font-weight: 500; text-align: center; "&gt;Extend Name&lt;/p&gt;`;
      t7 = space();
      div12 = element("div");
      div7 = element("div");
      button0 = element("button");
      button0.textContent = "-";
      t9 = space();
      div6 = element("div");
      t10 = text(t10_value);
      t11 = space();
      button1 = element("button");
      button1.textContent = "+";
      t13 = space();
      div11 = element("div");
      div11.innerHTML = `&lt;div style="color: #B6B6BF; display: flex; justify-content: space-between"&gt;&lt;p&gt;1 year extension&lt;/p&gt; &lt;p&gt;$5.00&lt;/p&gt;&lt;/div&gt; &lt;div style="color: #B6B6BF; display: flex; justify-content: space-between"&gt;&lt;p&gt;Transaction&lt;/p&gt; &lt;p&gt;$5.00&lt;/p&gt;&lt;/div&gt; &lt;div style="color: black;display: flex; justify-content: space-between"&gt;&lt;p&gt;Estimated total&lt;/p&gt; &lt;p&gt;$5.00&lt;/p&gt;&lt;/div&gt;`;
      set_style(h3, "font-size", "24px");
      set_style(div0, "color", "#1FB184");
      set_style(div0, "font-size", "12px");
      set_style(div1, "padding", "0 14px");
      set_style(div1, "height", "29px");
      set_style(div1, "background-color", "#E7F3EF");
      set_style(div1, "border-radius", "60px");
      set_style(div1, "display", "flex");
      set_style(div1, "justify-content", "center");
      set_style(div1, "align-items", "center");
      set_style(div2, "margin", "15px");
      set_style(img, "width", "104px");
      set_style(img, "margin-top", "4px");
      set_style(img, "margin-right", "15px");
      if (!src_url_equal(img.src, img_src_value = /*token*/
      ctx[0].image_preview_url))
        attr(img, "src", img_src_value);
      attr(img, "alt", img_alt_value = "image of " + /*token*/
      ctx[0].description);
      set_style(div4, "margin", "14px 0");
      set_style(div4, "display", "flex");
      set_style(div4, "justify-content", "space-between");
      set_style(div4, "align-items", "center");
      set_style(div4, "background-color", "white");
      set_style(div4, "border-radius", "7px");
      set_style(div4, "border", "1px solid rgb(194, 194, 194)");
      set_style(div4, "height", "142px");
      set_style(div4, "width", "100%");
      set_style(div5, "width", "100%");
      attr(button0, "class", "years-selection-btn");
      set_style(button0, "background-color", "#C2C2C2");
      set_style(button0, "border-radius", "38px");
      set_style(button0, "height", "58px");
      set_style(button0, "width", "58px");
      set_style(button0, "margin", "5px");
      set_style(button0, "text-align", "center");
      set_style(button0, "border", "none");
      set_style(button0, "cursor", "pointer");
      set_style(div6, "font-weight", "500");
      attr(button1, "class", "years-selection-btn");
      set_style(button1, "background-color", "#3888FF");
      set_style(button1, "border-radius", "38px");
      set_style(button1, "color", "white");
      set_style(button1, "height", "58px");
      set_style(button1, "width", "58px");
      set_style(button1, "margin", "5px");
      set_style(button1, "text-align", "center");
      set_style(button1, "cursor", "pointer");
      set_style(button1, "border", "none");
      set_style(div7, "height", "69px");
      set_style(div7, "border-radius", "60px");
      set_style(div7, "display", "flex");
      set_style(div7, "justify-content", "space-between");
      set_style(div7, "align-items", "center");
      set_style(div7, "background-color", "white");
      set_style(div7, "border", "solid #C2C2C2 1px");
      set_style(div7, "width", "320px");
      set_style(div11, "background-color", "#F5F5F5");
      set_style(div11, "width", "310px");
      set_style(div11, "height", "200px");
      set_style(div11, "border-radius", "20px");
      set_style(div11, "margin", "52px");
      set_style(div11, "padding", "24px");
      set_style(div12, "display", "flex");
      set_style(div12, "justify-content", "center");
      set_style(div12, "flex-direction", "column");
      set_style(div12, "align-items", "center");
      set_style(div13, "margin", "14px 0");
      set_style(div13, "background-color", "white");
      set_style(div13, "border-radius", "7px");
      set_style(div13, "border", "solid #C2C2C2 1px");
      set_style(div13, "width", "100%");
      set_style(div13, "height", "472px");
      set_style(div13, "display", "flex");
      set_style(div13, "justify-content", "space-between");
      set_style(div13, "flex-direction", "column");
    },
    m(target, anchor) {
      insert(target, div4, anchor);
      append(div4, div2);
      append(div2, h3);
      append(h3, t0);
      append(div2, t1);
      append(div2, div1);
      append(div1, div0);
      append(div0, t2);
      append(div0, t3);
      append(div4, t4);
      append(div4, div3);
      append(div3, img);
      insert(target, t5, anchor);
      insert(target, div13, anchor);
      append(div13, div5);
      append(div13, t7);
      append(div13, div12);
      append(div12, div7);
      append(div7, button0);
      append(div7, t9);
      append(div7, div6);
      append(div6, t10);
      append(div7, t11);
      append(div7, button1);
      append(div12, t13);
      append(div12, div11);
      if (!mounted) {
        dispose = [
          listen(
            button0,
            "click",
            /*click_handler*/
            ctx[5]
          ),
          listen(
            button1,
            "click",
            /*click_handler_1*/
            ctx[6]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty &amp; /*token*/
      1 &amp;&amp; t0_value !== (t0_value = /*token*/
      ctx2[0].name + ""))
        set_data(t0, t0_value);
      if (dirty &amp; /*expiry*/
      2)
        set_data(
          t3,
          /*expiry*/
          ctx2[1]
        );
      if (dirty &amp; /*token*/
      1 &amp;&amp; !src_url_equal(img.src, img_src_value = /*token*/
      ctx2[0].image_preview_url)) {
        attr(img, "src", img_src_value);
      }
      if (dirty &amp; /*token*/
      1 &amp;&amp; img_alt_value !== (img_alt_value = "image of " + /*token*/
      ctx2[0].description)) {
        attr(img, "alt", img_alt_value);
      }
      if (dirty &amp; /*years*/
      8 &amp;&amp; t10_value !== (t10_value = /*years*/
      ctx2[3] &gt; 1 ? (
        /*years*/
        ctx2[3] + " Years"
      ) : (
        /*years*/
        ctx2[3] + " Year"
      )))
        set_data(t10, t10_value);
    },
    d(detaching) {
      if (detaching) {
        detach(div4);
        detach(t5);
        detach(div13);
      }
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_fragment$1(ctx) {
  let div;
  let t;
  let loader;
  let current;
  let if_block = (
    /*token*/
    ctx[0] &amp;&amp; create_if_block(ctx)
  );
  loader = new Loader({ props: { show: (
    /*loading*/
    ctx[2]
  ) } });
  return {
    c() {
      div = element("div");
      if (if_block)
        if_block.c();
      t = space();
      create_component(loader.$$.fragment);
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (if_block)
        if_block.m(div, null);
      append(div, t);
      mount_component(loader, div, null);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (
        /*token*/
        ctx2[0]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block(ctx2);
          if_block.c();
          if_block.m(div, t);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
      const loader_changes = {};
      if (dirty &amp; /*loading*/
      4)
        loader_changes.show = /*loading*/
        ctx2[2];
      loader.$set(loader_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(loader.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(loader.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (if_block)
        if_block.d();
      destroy_component(loader);
    }
  };
}
let maxYears = 1e3;
function dateToUIDate(dateValue) {
  if (!dateValue)
    return "Could not be found";
  const userLocale = navigator.language;
  const options = {
    year: "numeric",
    month: "short",
    day: "numeric"
  };
  return new Date(dateValue).toLocaleDateString(userLocale, options);
}
function instance$1($$self, $$props, $$invalidate) {
  let token;
  let expiry;
  let loading = true;
  let years = 1;
  context.data.subscribe(async (value) =&gt; {
    if (!value.token)
      return;
    $$invalidate(0, token = value.token);
    $$invalidate(1, expiry = dateToUIDate(token.nameExpires * 1e3));
    $$invalidate(2, loading = false);
  });
  function updateYearsSelected(increment) {
    if (increment &amp;&amp; years &lt; maxYears) {
      $$invalidate(3, years++, years);
    } else {
      if (years &gt; 1) {
        $$invalidate(3, years--, years);
      }
    }
    setYears();
  }
  function setYears() {
    const renewalSeconds = years * 31556952;
    const renewalPrice = years * token.renewalPricePerYear;
    web3.action.setProps({ renewalSeconds, renewalPrice });
  }
  setYears();
  const click_handler = () =&gt; {
    updateYearsSelected(false);
  };
  const click_handler_1 = () =&gt; {
    updateYearsSelected(true);
  };
  return [
    token,
    expiry,
    loading,
    years,
    updateYearsSelected,
    click_handler,
    click_handler_1
  ];
}
class Renew extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$1, create_fragment$1, safe_not_equal, {});
  }
}
const { window: window_1 } = globals;
function create_fragment(ctx) {
  let div1;
  let div0;
  let switch_instance;
  let current;
  let mounted;
  let dispose;
  var switch_value = (
    /*page*/
    ctx[0]
  );
  function switch_props(ctx2, dirty) {
    return {};
  }
  if (switch_value) {
    switch_instance = construct_svelte_component(switch_value, switch_props());
  }
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      if (switch_instance)
        create_component(switch_instance.$$.fragment);
      attr(div0, "id", "token-container");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, div0);
      if (switch_instance)
        mount_component(switch_instance, div0, null);
      current = true;
      if (!mounted) {
        dispose = listen(
          window_1,
          "hashchange",
          /*routeChange*/
          ctx[1]
        );
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty &amp; /*page*/
      1 &amp;&amp; switch_value !== (switch_value = /*page*/
      ctx2[0])) {
        if (switch_instance) {
          group_outros();
          const old_component = switch_instance;
          transition_out(old_component.$$.fragment, 1, 0, () =&gt; {
            destroy_component(old_component, 1);
          });
          check_outros();
        }
        if (switch_value) {
          switch_instance = construct_svelte_component(switch_value, switch_props());
          create_component(switch_instance.$$.fragment);
          transition_in(switch_instance.$$.fragment, 1);
          mount_component(switch_instance, div0, null);
        } else {
          switch_instance = null;
        }
      }
    },
    i(local) {
      if (current)
        return;
      if (switch_instance)
        transition_in(switch_instance.$$.fragment, local);
      current = true;
    },
    o(local) {
      if (switch_instance)
        transition_out(switch_instance.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
      }
      if (switch_instance)
        destroy_component(switch_instance);
      mounted = false;
      dispose();
    }
  };
}
function instance($$self, $$props, $$invalidate) {
  let token;
  let initialised = false;
  window.Buffer = buffer.Buffer;
  const routingMap = { "#info": Info, "#renew": Renew };
  let page;
  function routeChange() {
    $$invalidate(0, page = routingMap[document.location.hash] || NotFound);
  }
  web3.tokens.dataChanged = async (oldTokens, updatedTokens, cardId) =&gt; {
    if (initialised)
      return;
    context.setToken(updatedTokens.currentInstance);
    token = updatedTokens.currentInstance;
    token.baseNode = ".eth";
    token.fullName = token.ensName + token.baseNode;
    if (!token.resolverAddress) {
      web3.action.setProps({ nodeHash: distExports.hash(token.fullName) });
      return;
    }
    initialised = true;
    routeChange();
  };
  return [page, routeChange];
}
class App extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance, create_fragment, safe_not_equal, {});
  }
}
new App({
  target: document.body
});


//]]&gt;</script>
<link xmlns="http://www.w3.org/1999/xhtml" rel="preconnect" href="https://fonts.googleapis.com"/>
<link xmlns="http://www.w3.org/1999/xhtml" rel="preconnect" href="https://fonts.gstatic.com"/>
<link xmlns="http://www.w3.org/1999/xhtml" href="https://fonts.googleapis.com/css2?family=Rubik:wght@300;400;500;600;700;800;900&amp;display=swap" rel="stylesheet"/>


<style>
					/* <![CDATA[ */
					
* {
	font-family: "Rubik", sans-serif;
	box-sizing: border-box;
}

body {
	color: #0B0B0B;
	background-color: #F3F4F7;
}

h1 {
	font-size: 22px;
}

h2 {
	font-size: 20px;
}

h3 {
	font-size: 18px;
}

h5 {
	font-size: 16px;
	margin-bottom: 12px;
}

p.light {
	color: #545454;
}

.loader-modal {
	position: absolute;
	left: 0;
	top: 0;
	width: 100%;
	height: 100%;
}

button.years-selection-btn:hover {
	opacity: 0.8;
}
					/* ]]> */
				</style></ts:viewContent>

		<ts:card name="Info" type="token">
			<ts:label>
				<ts:string xml:lang="en">Info</ts:string>
			</ts:label>
			<ts:view xmlns="http://www.w3.org/1999/xhtml" urlFragment="info" xml:lang="en">
				<ts:viewContent name="common"/>
			</ts:view>
		</ts:card>

		<ts:card name="Renew" type="action">
			<ts:label>
				<ts:string xml:lang="en">Renew</ts:string>
			</ts:label>

			<ts:attribute name="renewalSeconds">
				<ts:type><ts:syntax>1.3.6.1.4.1.1466.115.121.1.27</ts:syntax></ts:type>
				<ts:origins>
						<ts:user-entry as="uint"/>
				</ts:origins>
			</ts:attribute>
			
			<ts:attribute name="renewalPrice">
				<ts:type><ts:syntax>1.3.6.1.4.1.1466.115.121.1.27</ts:syntax></ts:type>
				<ts:origins>
						<ts:user-entry as="uint"/>
				</ts:origins>
			</ts:attribute>

			<ts:attribute name="renewalPricePerYear">
          <ts:type><ts:syntax>1.3.6.1.4.1.1466.115.121.1.36</ts:syntax></ts:type>
        <ts:label>
          <ts:string xml:lang="en">renewal price per year</ts:string>
        </ts:label>
        <ts:origins>
          <ethereum:call as="uint" contract="ETHRegistrarController" function="rentPrice">
            <ts:data>
              <ts:string ref="ensName"/>
              <ts:uint256>31556952</ts:uint256>
            </ts:data>
          </ethereum:call>
        </ts:origins>
      </ts:attribute>

			<ts:transaction>
        <ethereum:transaction as="uint" contract="ETHRegistrarController" function="renew">
          <ts:data>
            <ts:string ref="ensName"/>
            <ts:uint256 local-ref="renewalSeconds"/>
          </ts:data>
          <ethereum:value local-ref="renewalSeconds"/>
        </ethereum:transaction>
      </ts:transaction>
			
			<ts:view xmlns="http://www.w3.org/1999/xhtml" urlFragment="renew" xml:lang="en">
				<ts:viewContent name="common"/>
			</ts:view>
		</ts:card>
	
	</ts:cards>

	<ts:attribute name="nameExpires">
        <ts:type><ts:syntax>1.3.6.1.4.1.1466.115.121.1.36</ts:syntax></ts:type>
      	<ts:origins>
        <ethereum:call as="uint" contract="ENS" function="nameExpires">
          <ts:data>
            <ts:uint256 ref="tokenId"/>
          </ts:data>
        </ethereum:call>
      </ts:origins>
    	</ts:attribute>

			<ts:attribute name="ensName">
					<ts:type><ts:syntax>1.3.6.1.4.1.1466.115.121.1.15</ts:syntax></ts:type>
				<ts:origins>
					<ethereum:event contract="ETHRegistrarController" filter="label=${tokenId}" select="name" type="NameRegistered"/>
				</ts:origins>
			</ts:attribute>

			<ts:attribute name="resolverAddress">
					<ts:type><ts:syntax>1.3.6.1.4.1.1466.115.121.1.15</ts:syntax></ts:type>
				<ts:origins>
					<ethereum:call as="address" contract="registry" function="resolver">
						<ts:data>
							<ts:bytes32 local-ref="nodeHash"/>
						</ts:data>
					</ethereum:call>
				</ts:origins>
			</ts:attribute>

			<ts:attribute name="newRecordValue">
					<ts:type><ts:syntax>1.3.6.1.4.1.1466.115.121.1.15</ts:syntax></ts:type>
				<ts:label>
					<ts:string xml:lang="en">new record value</ts:string>
				</ts:label>
				<ts:origins>
					<ts:user-entry as="utf8"/>
				</ts:origins>
			</ts:attribute>

			<ts:attribute name="emailRecord">
					<ts:type><ts:syntax>1.3.6.1.4.1.1466.115.121.1.15</ts:syntax></ts:type>
				<ts:origins>
					<ethereum:call as="utf8" contract="PublicResolver" function="text">
						<ts:data>
							<ts:bytes32 local-ref="nodeHash"/>
							<ts:string>email</ts:string>
						</ts:data>
					</ethereum:call>
				</ts:origins>
			</ts:attribute>

</ts:token>