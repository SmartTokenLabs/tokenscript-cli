{"version":3,"names":["ViewEvent","RequestFromView","ViewController","constructor","tokenScript","viewAdapter","this","userEntryValues","async","card","currentCard","viewLoading","showTokenView","unloadTokenView","getCurrentCard","getUserEntryValue","key","undefined","changedKeys","shouldRefresh","attr","findAttribute","console","log","push","length","getAttributes","invalidate","updateCardData","name","hasAttribute","getAttribute","dispatchViewEvent","event","data","id","TOKENS_UPDATED","tokenViewData","getCurrentTokenData","getViewDataId"],"sources":["../engine-js/src/view/ViewController.ts"],"sourcesContent":["import {Card} from \"../tokenScript/Card\";\nimport {IViewBinding} from \"./IViewBinding\";\nimport {TokenScript} from \"../TokenScript\";\n\nexport enum ViewEvent {\n\tTOKENS_UPDATED = \"tokensUpdated\",\n\tGET_USER_INPUT = \"getUserInput\",\n\tEXECUTE_CALLBACK = \"executeCallback\",\n\tON_CONFIRM = \"onConfirm\",\n}\n\nexport enum RequestFromView {\n\tSIGN_PERSONAL_MESSAGE = \"signPersonalMessage\",\n\tPUT_USER_INPUT = \"putUserInput\",\n}\n\nexport class ViewController {\n\n\tprivate currentCard?: Card;\n\tprivate userEntryValues: {[key: string]: any} = {};\n\n\tconstructor(private tokenScript: TokenScript, private viewAdapter: IViewBinding) {\n\n\t}\n\n\tasync showCard(card: Card){\n\n\t\t//this.userEntryValues = {};\n\t\tthis.currentCard = card;\n\n\t\tthis.viewAdapter.viewLoading();\n\n\t\tawait this.viewAdapter.showTokenView(this.currentCard);\n\t}\n\n\tasync unloadTokenCard(){\n\t\tthis.currentCard = null;\n\t\tawait this.viewAdapter.unloadTokenView();\n\t}\n\n\tgetCurrentCard(){\n\t\treturn this.currentCard;\n\t}\n\n\tgetUserEntryValue(key: string){\n\t\tif (!this.userEntryValues[key])\n\t\t\treturn undefined;\n\n\t\treturn this.userEntryValues[key];\n\t}\n\n\tasync setUserEntryValues(userEntryValues: {[key: string]: any}){\n\n\t\tconst changedKeys = [];\n\n\t\tlet shouldRefresh = false;\n\n\t\tfor (let key in userEntryValues){\n\n\t\t\tif (this.userEntryValues[key] &&\n\t\t\t\tthis.userEntryValues[key] === userEntryValues[key]){\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (!this.userEntryValues[key] && userEntryValues[key] === \"\")\n\t\t\t\tcontinue;\n\n\t\t\tconst attr = this.findAttribute(key);\n\n\t\t\t// Attributes that are explicitly defined as user entry SHOULD NEVER refresh the view! This can cause loops and all kinds of crazy behavior.\n\t\t\t// However, in the example of ENS, some views require attributes that depend on a value generated by the view in order to refresh the view.\n\t\t\t// By this example these attributes are not specified at all in the XML, defined only by the Javascript, so we can use this check to determine if view data needs to be refreshed.\n\t\t\tif (!attr && !shouldRefresh)\n\t\t\t\tshouldRefresh = true;\n\n\t\t\tconsole.log(\"User input '\" + key + \"' changed (\" + this.userEntryValues[key] + \" -> \" + userEntryValues[key] + \")\");\n\t\t\t// Invalidate attributes that depend on changed user entry value\n\t\t\tchangedKeys.push(key);\n\t\t\tthis.userEntryValues[key] = userEntryValues[key];\n\t\t}\n\n\t\tif (changedKeys.length > 0) {\n\n\t\t\tthis.tokenScript.getAttributes().invalidate(changedKeys);\n\t\t\tif (this.currentCard)\n\t\t\t\tthis.currentCard.getAttributes().invalidate(changedKeys);\n\n\t\t\tif (shouldRefresh) this.updateCardData();\n\t\t}\n\t}\n\n\tprivate findAttribute(name: string){\n\n\t\tif (this.tokenScript.getAttributes().hasAttribute(name))\n\t\t\treturn this.tokenScript.getAttributes().getAttribute(name);\n\n\t\tif (this.currentCard && this.currentCard.getAttributes().hasAttribute(name))\n\t\t\treturn this.currentCard.getAttributes().getAttribute(name);\n\n\t\treturn null;\n\t}\n\n\tdispatchViewEvent(event: ViewEvent, data: any, id: string){\n\t\treturn this.viewAdapter.dispatchViewEvent(event, data, id);\n\t}\n\n\tasync updateCardData(){\n\t\tthis.viewAdapter.viewLoading();\n\n\t\tthis.viewAdapter.dispatchViewEvent(ViewEvent.TOKENS_UPDATED, await this.currentCard.tokenViewData.getCurrentTokenData(true), this.currentCard.tokenViewData.getViewDataId());\n\t}\n}\n"],"mappings":"IAIYA,GAAZ,SAAYA,GACXA,EAAA,kCACAA,EAAA,iCACAA,EAAA,sCACAA,EAAA,yBACA,EALD,CAAYA,MAAS,K,IAOTC,GAAZ,SAAYA,GACXA,EAAA,+CACAA,EAAA,gCACA,EAHD,CAAYA,MAAe,K,MAKdC,EAKZC,YAAoBC,EAAkCC,GAAlCC,KAAAF,cAAkCE,KAAAD,cAF9CC,KAAAC,gBAAwC,E,CAMhDC,eAAeC,GAGdH,KAAKI,YAAcD,EAEnBH,KAAKD,YAAYM,oBAEXL,KAAKD,YAAYO,cAAcN,KAAKI,Y,CAG3CF,wBACCF,KAAKI,YAAc,WACbJ,KAAKD,YAAYQ,iB,CAGxBC,iBACC,OAAOR,KAAKI,W,CAGbK,kBAAkBC,GACjB,IAAKV,KAAKC,gBAAgBS,GACzB,OAAOC,UAER,OAAOX,KAAKC,gBAAgBS,E,CAG7BR,yBAAyBD,GAExB,MAAMW,EAAc,GAEpB,IAAIC,EAAgB,MAEpB,IAAK,IAAIH,KAAOT,EAAgB,CAE/B,GAAID,KAAKC,gBAAgBS,IACxBV,KAAKC,gBAAgBS,KAAST,EAAgBS,GAAK,CACnD,Q,CAGD,IAAKV,KAAKC,gBAAgBS,IAAQT,EAAgBS,KAAS,GAC1D,SAED,MAAMI,EAAOd,KAAKe,cAAcL,GAKhC,IAAKI,IAASD,EACbA,EAAgB,KAEjBG,QAAQC,IAAI,eAAiBP,EAAM,cAAgBV,KAAKC,gBAAgBS,GAAO,OAAST,EAAgBS,GAAO,KAE/GE,EAAYM,KAAKR,GACjBV,KAAKC,gBAAgBS,GAAOT,EAAgBS,E,CAG7C,GAAIE,EAAYO,OAAS,EAAG,CAE3BnB,KAAKF,YAAYsB,gBAAgBC,WAAWT,GAC5C,GAAIZ,KAAKI,YACRJ,KAAKI,YAAYgB,gBAAgBC,WAAWT,GAE7C,GAAIC,EAAeb,KAAKsB,gB,EAIlBP,cAAcQ,GAErB,GAAIvB,KAAKF,YAAYsB,gBAAgBI,aAAaD,GACjD,OAAOvB,KAAKF,YAAYsB,gBAAgBK,aAAaF,GAEtD,GAAIvB,KAAKI,aAAeJ,KAAKI,YAAYgB,gBAAgBI,aAAaD,GACrE,OAAOvB,KAAKI,YAAYgB,gBAAgBK,aAAaF,GAEtD,OAAO,I,CAGRG,kBAAkBC,EAAkBC,EAAWC,GAC9C,OAAO7B,KAAKD,YAAY2B,kBAAkBC,EAAOC,EAAMC,E,CAGxD3B,uBACCF,KAAKD,YAAYM,cAEjBL,KAAKD,YAAY2B,kBAAkBhC,EAAUoC,qBAAsB9B,KAAKI,YAAY2B,cAAcC,oBAAoB,MAAOhC,KAAKI,YAAY2B,cAAcE,gB"}