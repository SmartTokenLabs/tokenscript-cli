import{V as t,R as e}from"./p-4a1bebfd.js";import{h as n}from"./p-f0f1815c.js";class s{constructor(t,e){this.view=t;this.showToast=e;this.iframe=t.querySelector(".tokenscript-frame");this.loader=t.querySelector(".view-loader");this.actionBar=t.querySelector(".action-bar");this.actionBtn=t.querySelector(".action-btn");this.actionBtn.addEventListener("click",this.confirmAction.bind(this));window.addEventListener("message",this.handlePostMessageFromView.bind(this))}setTokenScript(t){this.tokenScript=t}viewLoading(){this.showLoader()}viewError(t){this.hideLoader()}async showTokenView(t){this.currentCard=t;this.view.querySelector(".view-container").style.display="block";await this.injectContentView(t);this.setupConfirmButton(t);this.renderAttributesTable();this.hideLoader()}async unloadTokenView(){this.currentCard=null;this.view.querySelector(".view-container").style.display="none";this.iframe.src="";this.actionBar.style.display="none";this.view.querySelector(".attribute-table").innerHTML=""}async renderAttributesTable(){let t="<tr><th>Attribute</th><th>Value</th></tr>";const e=async(t,e=false)=>`<tr><td>${t.getName()} ${e?"(Card)":"(Global)"}</td><td>${await t.getCurrentValue()}</td></tr>`;for(let n of this.tokenScript.getAttributes()){t+=await e(n)}for(let n of this.currentCard.getAttributes()){t+=await e(n,true)}this.view.querySelector(".attribute-table").innerHTML=t}showLoader(){this.loader.style.display="flex"}hideLoader(){this.loader.style.display="none"}async injectContentView(t){if(!t.view){this.iframe.src="";return}if(t.isUrlView){this.iframe.src=t.url}else{const e=await t.renderViewHtml();const n=new Blob([e],{type:"text/html"});const s=t.urlFragment;this.iframe.src=URL.createObjectURL(n)+(s?"#"+s:"")}}setupConfirmButton(t){if(t.type=="action"){this.actionBar.style.display="block";this.actionBtn.innerText=t.label}else{this.actionBar.style.display="none"}}async confirmAction(){const e=this.currentCard.getTransaction();this.showLoader();if(e){console.log(e.getTransactionInfo());try{await this.currentCard.executeTransaction((t=>{switch(t.status){case"submitted":this.showToast("info","Transaction submitted",n("span",null,"Processing TX, please wait.. ",n("br",null),"TX Number: "+t.txNumber));break;case"confirmed":this.showToast("success","Transaction confirmed",n("span",null,"TX "+t.txNumber+" confirmed!",n("br",null),t.txLink?n("a",{href:t.txLink,target:"_blank"},"View On Block Scanner"):""));break}}))}catch(t){console.error(t);this.showToast("error","Transaction Error",t.message)}}else{this.postMessageToView(t.ON_CONFIRM,{})}this.hideLoader()}getViewBindingJavascript(){return`\n\t\t\twindow.addEventListener("message", (event) => {\n\n\t\t\t\tif (event.origin !== "${document.location.origin}")\n\t\t\t\t\treturn;\n\n\t\t\t\tconst params = event.data?.params;\n\n\t\t\t\tswitch (event.data?.method){\n\t\t\t\t\tcase "tokensUpdated":\n\t\t\t\t\t\twindow.web3.tokens.dataChanged(params.oldTokens, params.updatedTokens, params.cardId);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase "onConfirm":\n\t\t\t\t\t\twindow.onConfirm();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase "executeCallback":\n\t\t\t\t\t\twindow.executeCallback(params.id, params.error, params.result);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase "getUserInput":\n\t\t\t\t\t\tsendUserInputValues();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tfunction sendUserInputValues(){\n\n\t\t\t\tconst inputs = Array.from(document.querySelectorAll("textarea,input")).filter((elem) => !!elem.id);\n\n\t\t\t\tconst values = Object.fromEntries(inputs.map((elem) => {\n\t\t\t\t\treturn [elem.id, elem.value];\n\t\t\t\t}));\n\n\t\t\t\tpostMessageToEngine("putUserInput", values);\n\t\t\t}\n\n\t\t\tfunction postMessageToEngine(method, params){\n\t\t\t\twindow.parent.postMessage({method, params}, {\n\t\t\t\t\ttargetOrigin: "${document.location.origin}"\n\t\t\t\t});\n\t\t\t}\n\n\t\t\twindow.alpha = {\n\t\t\t\tsignPersonalMessage: (id, data) => {\n\t\t\t\t\tpostMessageToEngine("signPersonalMessage", {id, data});\n\t\t\t\t}\n\t\t\t};\n\n\t\t\twindow.web3.action.setProps = (params) => {\n\t\t\t\tpostMessageToEngine("putUserInput", params);\n\t\t\t};\n\n\t\t\tfunction listenForUserValueChanges(){\n\t\t\t\twindow.addEventListener('change', (evt) => {\n                    if (!evt.target.id) return;\n\t\t\t\t\tsendUserInputValues();\n                });\n\t\t\t}\n\n\t\t\tlistenForUserValueChanges();\n\t\t\t/*document.addEventListener("DOMContentLoaded", function() {\n\t\t\t\tsendUserInputValues();\n\t\t\t});*/\n\t\t`}postMessageToView(t,e){this.iframe.contentWindow.postMessage({method:t,params:e},"*")}handlePostMessageFromView(t){var e,n;if(!this.iframe.src)return;if(t.source!==this.iframe.contentWindow){return}if(!((e=t.data)===null||e===void 0?void 0:e.method))return;this.handleMessageFromView(t.data.method,(n=t.data)===null||n===void 0?void 0:n.params)}async handleMessageFromView(t,n){switch(t){case e.SIGN_PERSONAL_MESSAGE:console.log("Event from view: Sign personal message");this.currentCard.signPersonalMessage(n.id,n.data);break;case e.PUT_USER_INPUT:await this.tokenScript.getViewController().setUserEntryValues(n);this.renderAttributesTable();break;default:throw new Error("TokenScript view API method: "+t+" is not implemented.")}}async dispatchViewEvent(e,n,s){switch(e){case t.TOKENS_UPDATED:const a={currentInstance:n};console.log("ViewEvent.TOKENS_UPDATED");this.postMessageToView(e,{oldTokens:a,updatedTokens:a,cardId:s});await this.renderAttributesTable();this.hideLoader();return;case t.EXECUTE_CALLBACK:case t.GET_USER_INPUT:case t.ON_CONFIRM:this.postMessageToView(e,Object.assign(Object.assign({},n),{id:s}));return}}}export{s as V};
//# sourceMappingURL=p-1a921d6b.js.map