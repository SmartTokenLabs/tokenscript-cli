{"version":3,"names":["ViewEvent","RequestFromView","ViewController","constructor","tokenScript","viewAdapter","this","userEntryValues","async","card","currentCard","viewLoading","showTokenView","unloadTokenView","getCurrentCard","getUserEntryValue","key","undefined","changedKeys","shouldRefresh","attr","findAttribute","console","log","push","length","getAttributes","invalidate","updateCardData","name","hasAttribute","getAttribute","dispatchViewEvent","event","data","id","TOKENS_UPDATED","tokenViewData","getCurrentTokenData","getViewDataId"],"sources":["../engine-js/src/view/ViewController.ts"],"sourcesContent":["import {Card} from \"../tokenScript/Card\";\nimport {IViewBinding} from \"./IViewBinding\";\nimport {TokenScript} from \"../TokenScript\";\n\nexport enum ViewEvent {\n\tTOKENS_UPDATED = \"tokensUpdated\",\n\tGET_USER_INPUT = \"getUserInput\",\n\tEXECUTE_CALLBACK = \"executeCallback\",\n\tON_CONFIRM = \"onConfirm\",\n}\n\nexport enum RequestFromView {\n\tSIGN_PERSONAL_MESSAGE = \"signPersonalMessage\",\n\tPUT_USER_INPUT = \"putUserInput\",\n}\n\n/**\n * The ViewController acts as an intermediary between the user-agent supplied viewAdapter (IViewBinding) & the engine\n * This allows us to have more complex logic in the ViewController in order to keep IViewBinding simple & low-level\n *\n * The view binding also calls method on the ViewController for various functions, such as setting user-input attributes.\n */\nexport class ViewController {\n\n\tprivate currentCard?: Card;\n\tprivate userEntryValues: {[key: string]: any} = {};\n\n\tconstructor(private tokenScript: TokenScript, private viewAdapter: IViewBinding) {\n\n\t}\n\n\t/**\n\t * Show a card in the user interface\n\t * @param card\n\t */\n\tasync showCard(card: Card){\n\n\t\t//this.userEntryValues = {};\n\t\tthis.currentCard = card;\n\n\t\tthis.viewAdapter.viewLoading();\n\n\t\tawait this.viewAdapter.showTokenView(this.currentCard);\n\t}\n\n\t/**\n\t * Unload the card from the UI\n\t */\n\tasync unloadTokenCard(){\n\t\tthis.currentCard = null;\n\t\tawait this.viewAdapter.unloadTokenView();\n\t}\n\n\t/**\n\t * The current card loaded in the UI\n\t */\n\tgetCurrentCard(){\n\t\treturn this.currentCard;\n\t}\n\n\t/**\n\t * Gets a specific user-entry value that has been set by the token card Javascript\n\t * @param key\n\t */\n\tgetUserEntryValue(key: string){\n\t\tif (!this.userEntryValues[key])\n\t\t\treturn undefined;\n\n\t\treturn this.userEntryValues[key];\n\t}\n\n\t/**\n\t * Sets user entry values (usually called from the viewAdapter)\n\t * @param userEntryValues\n\t */\n\tasync setUserEntryValues(userEntryValues: {[key: string]: any}){\n\n\t\tconst changedKeys = [];\n\n\t\tlet shouldRefresh = false;\n\n\t\tfor (let key in userEntryValues){\n\n\t\t\tif (this.userEntryValues[key] &&\n\t\t\t\tthis.userEntryValues[key] === userEntryValues[key]){\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (!this.userEntryValues[key] && userEntryValues[key] === \"\")\n\t\t\t\tcontinue;\n\n\t\t\tconst attr = this.findAttribute(key);\n\n\t\t\t// Attributes that are explicitly defined as user entry SHOULD NEVER refresh the view! This can cause loops and all kinds of crazy behavior.\n\t\t\t// However, in the example of ENS, some views require attributes that depend on a value generated by the view in order to refresh the view.\n\t\t\t// By this example these attributes are not specified at all in the XML, defined only by the Javascript, so we can use this check to determine if view data needs to be refreshed.\n\t\t\tif (!attr && !shouldRefresh)\n\t\t\t\tshouldRefresh = true;\n\n\t\t\tconsole.log(\"User input '\" + key + \"' changed (\" + this.userEntryValues[key] + \" -> \" + userEntryValues[key] + \")\");\n\t\t\t// Invalidate attributes that depend on changed user entry value\n\t\t\tchangedKeys.push(key);\n\t\t\tthis.userEntryValues[key] = userEntryValues[key];\n\t\t}\n\n\t\tif (changedKeys.length > 0) {\n\n\t\t\tthis.tokenScript.getAttributes().invalidate(changedKeys);\n\t\t\tif (this.currentCard)\n\t\t\t\tthis.currentCard.getAttributes().invalidate(changedKeys);\n\n\t\t\tif (shouldRefresh) this.updateCardData();\n\t\t}\n\t}\n\n\t/**\n\t * Find a specific attribute by name, either from the global scope or the scope of the currently loaded card\n\t * @param name\n\t * @private\n\t */\n\tprivate findAttribute(name: string){\n\n\t\tif (this.tokenScript.getAttributes().hasAttribute(name))\n\t\t\treturn this.tokenScript.getAttributes().getAttribute(name);\n\n\t\tif (this.currentCard && this.currentCard.getAttributes().hasAttribute(name))\n\t\t\treturn this.currentCard.getAttributes().getAttribute(name);\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Dispatch an event to the token card Javascript\n\t * @param event\n\t * @param data\n\t * @param id\n\t */\n\tdispatchViewEvent(event: ViewEvent, data: any, id: string){\n\t\treturn this.viewAdapter.dispatchViewEvent(event, data, id);\n\t}\n\n\t/**\n\t * Reload card attributes & dispatch the TOKENS_UPDATED event to the card Javascript\n\t */\n\tasync updateCardData(){\n\t\tthis.viewAdapter.viewLoading();\n\n\t\tthis.viewAdapter.dispatchViewEvent(ViewEvent.TOKENS_UPDATED, await this.currentCard.tokenViewData.getCurrentTokenData(true), this.currentCard.tokenViewData.getViewDataId());\n\t}\n}\n"],"mappings":"IAIYA,GAAZ,SAAYA,GACXA,EAAA,kCACAA,EAAA,iCACAA,EAAA,sCACAA,EAAA,yBACA,EALD,CAAYA,MAAS,K,IAOTC,GAAZ,SAAYA,GACXA,EAAA,+CACAA,EAAA,gCACA,EAHD,CAAYA,MAAe,K,MAWdC,EAKZC,YAAoBC,EAAkCC,GAAlCC,KAAAF,cAAkCE,KAAAD,cAF9CC,KAAAC,gBAAwC,E,CAUhDC,eAAeC,GAGdH,KAAKI,YAAcD,EAEnBH,KAAKD,YAAYM,oBAEXL,KAAKD,YAAYO,cAAcN,KAAKI,Y,CAM3CF,wBACCF,KAAKI,YAAc,WACbJ,KAAKD,YAAYQ,iB,CAMxBC,iBACC,OAAOR,KAAKI,W,CAObK,kBAAkBC,GACjB,IAAKV,KAAKC,gBAAgBS,GACzB,OAAOC,UAER,OAAOX,KAAKC,gBAAgBS,E,CAO7BR,yBAAyBD,GAExB,MAAMW,EAAc,GAEpB,IAAIC,EAAgB,MAEpB,IAAK,IAAIH,KAAOT,EAAgB,CAE/B,GAAID,KAAKC,gBAAgBS,IACxBV,KAAKC,gBAAgBS,KAAST,EAAgBS,GAAK,CACnD,Q,CAGD,IAAKV,KAAKC,gBAAgBS,IAAQT,EAAgBS,KAAS,GAC1D,SAED,MAAMI,EAAOd,KAAKe,cAAcL,GAKhC,IAAKI,IAASD,EACbA,EAAgB,KAEjBG,QAAQC,IAAI,eAAiBP,EAAM,cAAgBV,KAAKC,gBAAgBS,GAAO,OAAST,EAAgBS,GAAO,KAE/GE,EAAYM,KAAKR,GACjBV,KAAKC,gBAAgBS,GAAOT,EAAgBS,E,CAG7C,GAAIE,EAAYO,OAAS,EAAG,CAE3BnB,KAAKF,YAAYsB,gBAAgBC,WAAWT,GAC5C,GAAIZ,KAAKI,YACRJ,KAAKI,YAAYgB,gBAAgBC,WAAWT,GAE7C,GAAIC,EAAeb,KAAKsB,gB,EASlBP,cAAcQ,GAErB,GAAIvB,KAAKF,YAAYsB,gBAAgBI,aAAaD,GACjD,OAAOvB,KAAKF,YAAYsB,gBAAgBK,aAAaF,GAEtD,GAAIvB,KAAKI,aAAeJ,KAAKI,YAAYgB,gBAAgBI,aAAaD,GACrE,OAAOvB,KAAKI,YAAYgB,gBAAgBK,aAAaF,GAEtD,OAAO,I,CASRG,kBAAkBC,EAAkBC,EAAWC,GAC9C,OAAO7B,KAAKD,YAAY2B,kBAAkBC,EAAOC,EAAMC,E,CAMxD3B,uBACCF,KAAKD,YAAYM,cAEjBL,KAAKD,YAAY2B,kBAAkBhC,EAAUoC,qBAAsB9B,KAAKI,YAAY2B,cAAcC,oBAAoB,MAAOhC,KAAKI,YAAY2B,cAAcE,gB"}