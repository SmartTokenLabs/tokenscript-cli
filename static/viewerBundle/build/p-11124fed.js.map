{"version":3,"names":["__awaiter","this","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Web3WalletProvider","constructor","client","walletOptions","safeConnectOptions","connections","saveConnections","savedConnections","address","con","chainId","providerType","blockchain","localStorage","setItem","LOCAL_STORAGE_KEY","JSON","stringify","emitSavedConnection","Object","keys","length","eventSender","toLocaleLowerCase","emitNetworkChange","deleteConnections","removeItem","sessionStorage","loadConnections","data","getItem","state","parse","connection","connectWith","console","log","message","walletType","checkConnectionOnly","Error","logger","signMessage","provider","getWalletProvider","signer","getSigner","_a","toLowerCase","getConnectedWalletData","values","registerNewWalletAddress","ethers","registerProvider","providerName","accounts","listAccounts","detectNetwork","curAccount","on","disconnectWallet","getTokenStore","clearCachedTokens","enrichTokenLookupDataOnChainTokens","_chainId","reason","indexOf","MetaMask","window","ethereum","enable","ethers.providers.Web3Provider","WalletConnect","walletConnectProvider","import","walletConnect","getWalletConnectProviderInstance","connector","err","payload","catch","WalletConnectV2","_b","_c","_d","_e","_f","universalWalletConnect","getWalletConnectV2ProviderInstance","QRCodeModal","uri","n","i","default","open","getUi","showError","id","topic","connect","namespaces","eip155","methods","chains","walletConnectV2","WC_V2_DEFAULT_CHAINS","events","rpcMap","WC_DEFAULT_RPC_MAP","pairingTopic","close","Torus","TorusProvider","torus","getTorusProviderInstance","init","login","Phantom","solana","accountAddress","publicKey","toBase58","SafeConnect","getSafeConnectProvider","initSafeConnect","Flow","flowProvider","fcl","getFlowProvider","currentUser","authenticate","snapshot","addr","safeConnectAvailable","undefined","SafeConnectProvider","S"],"sources":["../../token-negotiator/dist/wallet/Web3WalletProvider.js"],"sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ethers } from 'ethers';\nimport { logger } from '../utils';\nexport class Web3WalletProvider {\n    constructor(client, walletOptions, safeConnectOptions) {\n        this.client = client;\n        this.walletOptions = walletOptions;\n        this.safeConnectOptions = safeConnectOptions;\n        this.connections = {};\n    }\n    saveConnections() {\n        let savedConnections = {};\n        for (let address in this.connections) {\n            let con = this.connections[address];\n            savedConnections[address] = {\n                address: con.address,\n                chainId: con.chainId,\n                providerType: con.providerType,\n                blockchain: con.blockchain,\n            };\n        }\n        localStorage.setItem(Web3WalletProvider.LOCAL_STORAGE_KEY, JSON.stringify(savedConnections));\n    }\n    emitSavedConnection(address) {\n        if (Object.keys(this.connections).length && address) {\n            this.client.eventSender('connected-wallet', this.connections[address.toLocaleLowerCase()]);\n            return this.connections[address.toLocaleLowerCase()];\n        }\n        else {\n            return null;\n        }\n    }\n    emitNetworkChange(chainId) {\n        if (chainId) {\n            this.client.eventSender('network-change', chainId);\n            return chainId;\n        }\n    }\n    deleteConnections() {\n        this.connections = {};\n        localStorage.removeItem(Web3WalletProvider.LOCAL_STORAGE_KEY);\n        localStorage.removeItem('walletconnect');\n        sessionStorage.removeItem('CURRENT_USER');\n    }\n    loadConnections() {\n        return __awaiter(this, void 0, void 0, function* () {\n            let data = localStorage.getItem(Web3WalletProvider.LOCAL_STORAGE_KEY);\n            if (!data)\n                return;\n            let state = JSON.parse(data);\n            if (!state)\n                return;\n            for (let address in state) {\n                let connection = state[address];\n                try {\n                    yield this.connectWith(connection.providerType, true);\n                }\n                catch (e) {\n                    console.log(\"Wallet couldn't connect: \" + e.message);\n                    delete state[address];\n                    this.saveConnections();\n                    this.emitSavedConnection(address);\n                }\n            }\n        });\n    }\n    connectWith(walletType, checkConnectionOnly = false) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!walletType)\n                throw new Error('Please provide a Wallet type to connect with.');\n            if (this[walletType]) {\n                const address = yield this[walletType](checkConnectionOnly);\n                logger(2, 'address', address);\n                this.saveConnections();\n                this.emitSavedConnection(address);\n                return address;\n            }\n            else {\n                throw new Error('Wallet type not found');\n            }\n        });\n    }\n    signMessage(address, message) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let provider = this.getWalletProvider(address);\n            let signer = provider.getSigner(address);\n            return yield signer.signMessage(message);\n        });\n    }\n    getWalletProvider(address) {\n        var _a;\n        address = address.toLowerCase();\n        if (!((_a = this.connections[address]) === null || _a === void 0 ? void 0 : _a.provider))\n            throw new Error('Wallet provider not found for address');\n        return this.connections[address].provider;\n    }\n    getConnectedWalletData() {\n        return Object.values(this.connections);\n    }\n    registerNewWalletAddress(address, chainId, providerType, provider, blockchain = 'evm') {\n        this.connections[address.toLowerCase()] = { address, chainId, providerType, provider, blockchain, ethers };\n        return address;\n    }\n    registerProvider(provider, providerName) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const accounts = yield provider.listAccounts();\n            const chainId = (yield provider.detectNetwork()).chainId;\n            if (accounts.length === 0) {\n                throw new Error('No accounts found via wallet-connect.');\n            }\n            let curAccount = accounts[0];\n            this.registerNewWalletAddress(curAccount, chainId, providerName, provider);\n            provider.provider.on('accountsChanged', (accounts) => {\n                if (!accounts || accounts.length === 0) {\n                    this.client.disconnectWallet();\n                    return;\n                }\n                if (curAccount === accounts[0])\n                    return;\n                delete this.connections[curAccount.toLowerCase()];\n                curAccount = accounts[0];\n                this.registerNewWalletAddress(curAccount, chainId, providerName, provider);\n                this.saveConnections();\n                this.emitSavedConnection(curAccount);\n                this.client.getTokenStore().clearCachedTokens();\n                this.client.enrichTokenLookupDataOnChainTokens();\n            });\n            provider.provider.on('chainChanged', (_chainId) => {\n                this.registerNewWalletAddress(accounts[0], _chainId, providerName, provider);\n                this.saveConnections();\n                this.emitNetworkChange(_chainId);\n            });\n            provider.provider.on('disconnect', (reason) => {\n                if ((reason === null || reason === void 0 ? void 0 : reason.message) && reason.message.indexOf('MetaMask: Disconnected from chain') > -1)\n                    return;\n                this.client.disconnectWallet();\n            });\n            return accounts[0];\n        });\n    }\n    MetaMask(checkConnectionOnly) {\n        return __awaiter(this, void 0, void 0, function* () {\n            logger(2, 'connect MetaMask');\n            if (typeof window.ethereum !== 'undefined') {\n                yield window.ethereum.enable();\n                const provider = new ethers.providers.Web3Provider(window.ethereum, 'any');\n                return this.registerProvider(provider, 'MetaMask');\n            }\n            else {\n                throw new Error('MetaMask is not available. Please check the extension is supported and active.');\n            }\n        });\n    }\n    WalletConnect(checkConnectionOnly) {\n        return __awaiter(this, void 0, void 0, function* () {\n            logger(2, 'connect Wallet Connect');\n            const walletConnectProvider = yield import('./WalletConnectProvider');\n            const walletConnect = yield walletConnectProvider.getWalletConnectProviderInstance(checkConnectionOnly);\n            return new Promise((resolve, reject) => {\n                if (checkConnectionOnly) {\n                    walletConnect.connector.on('display_uri', (err, payload) => {\n                        reject(new Error('Connection expired'));\n                    });\n                }\n                walletConnect\n                    .enable()\n                    .then(() => {\n                    const provider = new ethers.providers.Web3Provider(walletConnect, 'any');\n                    resolve(this.registerProvider(provider, 'WalletConnect'));\n                })\n                    .catch((e) => reject(e));\n            });\n        });\n    }\n    WalletConnectV2(checkConnectionOnly) {\n        var _a, _b, _c, _d, _e, _f;\n        return __awaiter(this, void 0, void 0, function* () {\n            logger(2, 'connect Wallet Connect V2');\n            const walletConnectProvider = yield import('./WalletConnectV2Provider');\n            const universalWalletConnect = yield walletConnectProvider.getWalletConnectV2ProviderInstance();\n            let QRCodeModal;\n            universalWalletConnect.on('display_uri', (uri) => __awaiter(this, void 0, void 0, function* () {\n                console.log('EVENT', 'QR Code Modal open');\n                QRCodeModal = (yield import('@walletconnect/qrcode-modal')).default;\n                QRCodeModal.open(uri, () => {\n                    this.client.getUi().showError('User closed modal');\n                });\n            }));\n            universalWalletConnect.on('session_delete', ({ id, topic }) => {\n                console.log('WC V2 EVENT', 'session_deleted');\n                this.client.disconnectWallet();\n            });\n            if (!checkConnectionOnly) {\n                let pairing;\n                yield universalWalletConnect.connect({\n                    namespaces: {\n                        eip155: {\n                            methods: ['eth_sendTransaction', 'eth_signTransaction', 'eth_sign', 'personal_sign', 'eth_signTypedData'],\n                            chains: (_c = (_b = (_a = this.walletOptions) === null || _a === void 0 ? void 0 : _a.walletConnectV2) === null || _b === void 0 ? void 0 : _b.chains) !== null && _c !== void 0 ? _c : walletConnectProvider.WC_V2_DEFAULT_CHAINS,\n                            events: ['chainChanged', 'accountsChanged'],\n                            rpcMap: (_f = (_e = (_d = this.walletOptions) === null || _d === void 0 ? void 0 : _d.walletConnectV2) === null || _e === void 0 ? void 0 : _e.rpcMap) !== null && _f !== void 0 ? _f : walletConnectProvider.WC_DEFAULT_RPC_MAP,\n                        },\n                    },\n                    pairingTopic: pairing === null || pairing === void 0 ? void 0 : pairing.topic,\n                });\n                QRCodeModal.close();\n            }\n            return new Promise((resolve, reject) => {\n                universalWalletConnect\n                    .enable()\n                    .then(() => {\n                    const provider = new ethers.providers.Web3Provider(universalWalletConnect, 'any');\n                    resolve(this.registerProvider(provider, 'WalletConnectV2'));\n                })\n                    .catch((e) => {\n                    reject(e);\n                });\n            });\n        });\n    }\n    Torus(checkConnectionOnly) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const TorusProvider = yield import('./TorusProvider');\n            const torus = yield TorusProvider.getTorusProviderInstance();\n            yield torus.init();\n            yield torus.login();\n            const provider = new ethers.providers.Web3Provider(torus.provider, 'any');\n            return this.registerProvider(provider, 'Torus');\n        });\n    }\n    Phantom(checkConnectionOnly) {\n        return __awaiter(this, void 0, void 0, function* () {\n            logger(2, 'connect Phantom');\n            if (typeof window.solana !== 'undefined') {\n                const connection = yield window.solana.connect();\n                const accountAddress = connection.publicKey.toBase58();\n                return this.registerNewWalletAddress(accountAddress, 'mainnet-beta', 'phantom', window.solana, 'solana');\n            }\n            else {\n                throw new Error('Phantom is not available. Please check the extension is supported and active.');\n            }\n        });\n    }\n    SafeConnect(checkConnectionOnly) {\n        return __awaiter(this, void 0, void 0, function* () {\n            logger(2, 'connect SafeConnect');\n            const provider = yield this.getSafeConnectProvider();\n            const address = yield provider.initSafeConnect();\n            this.registerNewWalletAddress(address, 1, 'SafeConnect', provider);\n            return address;\n        });\n    }\n    Flow(checkConnectionOnly) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const flowProvider = yield import('./FlowProvider');\n            const fcl = flowProvider.getFlowProvider();\n            yield fcl.currentUser.authenticate();\n            let currentUser = yield fcl.currentUser.snapshot();\n            if (!currentUser.addr)\n                throw new Error('Failed to connect Flow wallet');\n            this.registerNewWalletAddress(currentUser.addr, 1, 'flow', fcl);\n            return currentUser.addr;\n        });\n    }\n    safeConnectAvailable() {\n        return this.safeConnectOptions !== undefined;\n    }\n    getSafeConnectProvider() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { SafeConnectProvider } = yield import('./SafeConnectProvider');\n            return new SafeConnectProvider(this.client.getUi(), this.safeConnectOptions);\n        });\n    }\n}\nWeb3WalletProvider.LOCAL_STORAGE_KEY = 'tn-wallet-connections';\nexport default Web3WalletProvider;\n//# sourceMappingURL=Web3WalletProvider.js.map"],"mappings":"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"}